[5, 3, 3]
[Item{type=0, id=0, p=240, q=190, r=20, num=1, volume=912000}, Item{type=1, id=1, p=90, q=20, r=230, num=1, volume=414000}, Item{type=2, id=2, p=140, q=60, r=200, num=1, volume=1680000}, Item{type=3, id=3, p=80, q=50, r=210, num=1, volume=840000}, Item{type=4, id=4, p=130, q=20, r=220, num=1, volume=572000}, Item{type=5, id=5, p=190, q=20, r=260, num=1, volume=988000}, Item{type=6, id=6, p=100, q=100, r=100, num=1, volume=1000000}, Item{type=7, id=7, p=130, q=20, r=250, num=1, volume=650000}, Item{type=8, id=8, p=110, q=30, r=150, num=1, volume=495000}, Item{type=9, id=9, p=180, q=40, r=270, num=1, volume=1944000}, Item{type=10, id=10, p=120, q=10, r=160, num=1, volume=192000}, Item{type=11, id=11, p=170, q=40, r=270, num=1, volume=1836000}, Item{type=12, id=12, p=130, q=90, r=240, num=1, volume=2808000}, Item{type=13, id=13, p=100, q=70, r=180, num=1, volume=1260000}, Item{type=14, id=14, p=90, q=40, r=190, num=1, volume=684000}, Item{type=15, id=15, p=140, q=30, r=230, num=1, volume=966000}, Item{type=16, id=16, p=180, q=80, r=200, num=1, volume=2880000}, Item{type=17, id=17, p=280, q=270, r=180, num=1, volume=13608000}, Item{type=18, id=18, p=100, q=70, r=180, num=1, volume=1260000}]
[Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=5}, Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=3}, Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=3}]
Instance{bagTypeCount=3, itemTypeCount=19, bagCount=11, itemCount=19}
[Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=5}, Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=3}, Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=3}]
3
0,1
1,2
2,3
3,4
4,5
5,6
6,7
7,8
8,9
9,10
10,11
11,12
12,13
13,14
14,15
15,16
16,17
17,18
18,19
IloModel  {
IloMinimize  : (0.4*n_0 + 0.4*n_1 + 0.4*n_2 + 0.4*n_3 + 0.4*n_4 + 0.7*n_5 + 0.7*n_6 + 0.7*n_7 + 1.0*n_8 + 1.0*n_9 + 1.0*n_10)
IloRange bag_and_box0 : 1.0 <= (1.0*s_0,0 + 1.0*s_0,1 + 1.0*s_0,2 + 1.0*s_0,3 + 1.0*s_0,4 + 1.0*s_0,5 + 1.0*s_0,6 + 1.0*s_0,7 + 1.0*s_0,8 + 1.0*s_0,9 + 1.0*s_0,10) <= 1.0
IloRange bag_and_box1 : 1.0 <= (1.0*s_1,0 + 1.0*s_1,1 + 1.0*s_1,2 + 1.0*s_1,3 + 1.0*s_1,4 + 1.0*s_1,5 + 1.0*s_1,6 + 1.0*s_1,7 + 1.0*s_1,8 + 1.0*s_1,9 + 1.0*s_1,10) <= 1.0
IloRange bag_and_box2 : 1.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 + 1.0*s_2,7 + 1.0*s_2,8 + 1.0*s_2,9 + 1.0*s_2,10) <= 1.0
IloRange bag_and_box3 : 1.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 + 1.0*s_3,7 + 1.0*s_3,8 + 1.0*s_3,9 + 1.0*s_3,10) <= 1.0
IloRange bag_and_box4 : 1.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 + 1.0*s_4,7 + 1.0*s_4,8 + 1.0*s_4,9 + 1.0*s_4,10) <= 1.0
IloRange bag_and_box5 : 1.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 + 1.0*s_5,7 + 1.0*s_5,8 + 1.0*s_5,9 + 1.0*s_5,10) <= 1.0
IloRange bag_and_box6 : 1.0 <= (1.0*s_6,0 + 1.0*s_6,1 + 1.0*s_6,2 + 1.0*s_6,3 + 1.0*s_6,4 + 1.0*s_6,5 + 1.0*s_6,6 + 1.0*s_6,7 + 1.0*s_6,8 + 1.0*s_6,9 + 1.0*s_6,10) <= 1.0
IloRange bag_and_box7 : 1.0 <= (1.0*s_7,0 + 1.0*s_7,1 + 1.0*s_7,2 + 1.0*s_7,3 + 1.0*s_7,4 + 1.0*s_7,5 + 1.0*s_7,6 + 1.0*s_7,7 + 1.0*s_7,8 + 1.0*s_7,9 + 1.0*s_7,10) <= 1.0
IloRange bag_and_box8 : 1.0 <= (1.0*s_8,0 + 1.0*s_8,1 + 1.0*s_8,2 + 1.0*s_8,3 + 1.0*s_8,4 + 1.0*s_8,5 + 1.0*s_8,6 + 1.0*s_8,7 + 1.0*s_8,8 + 1.0*s_8,9 + 1.0*s_8,10) <= 1.0
IloRange bag_and_box9 : 1.0 <= (1.0*s_9,0 + 1.0*s_9,1 + 1.0*s_9,2 + 1.0*s_9,3 + 1.0*s_9,4 + 1.0*s_9,5 + 1.0*s_9,6 + 1.0*s_9,7 + 1.0*s_9,8 + 1.0*s_9,9 + 1.0*s_9,10) <= 1.0
IloRange bag_and_box10 : 1.0 <= (1.0*s_10,0 + 1.0*s_10,1 + 1.0*s_10,2 + 1.0*s_10,3 + 1.0*s_10,4 + 1.0*s_10,5 + 1.0*s_10,6 + 1.0*s_10,7 + 1.0*s_10,8 + 1.0*s_10,9 + 1.0*s_10,10) <= 1.0
IloRange bag_and_box11 : 1.0 <= (1.0*s_11,0 + 1.0*s_11,1 + 1.0*s_11,2 + 1.0*s_11,3 + 1.0*s_11,4 + 1.0*s_11,5 + 1.0*s_11,6 + 1.0*s_11,7 + 1.0*s_11,8 + 1.0*s_11,9 + 1.0*s_11,10) <= 1.0
IloRange bag_and_box12 : 1.0 <= (1.0*s_12,0 + 1.0*s_12,1 + 1.0*s_12,2 + 1.0*s_12,3 + 1.0*s_12,4 + 1.0*s_12,5 + 1.0*s_12,6 + 1.0*s_12,7 + 1.0*s_12,8 + 1.0*s_12,9 + 1.0*s_12,10) <= 1.0
IloRange bag_and_box13 : 1.0 <= (1.0*s_13,0 + 1.0*s_13,1 + 1.0*s_13,2 + 1.0*s_13,3 + 1.0*s_13,4 + 1.0*s_13,5 + 1.0*s_13,6 + 1.0*s_13,7 + 1.0*s_13,8 + 1.0*s_13,9 + 1.0*s_13,10) <= 1.0
IloRange bag_and_box14 : 1.0 <= (1.0*s_14,0 + 1.0*s_14,1 + 1.0*s_14,2 + 1.0*s_14,3 + 1.0*s_14,4 + 1.0*s_14,5 + 1.0*s_14,6 + 1.0*s_14,7 + 1.0*s_14,8 + 1.0*s_14,9 + 1.0*s_14,10) <= 1.0
IloRange bag_and_box15 : 1.0 <= (1.0*s_15,0 + 1.0*s_15,1 + 1.0*s_15,2 + 1.0*s_15,3 + 1.0*s_15,4 + 1.0*s_15,5 + 1.0*s_15,6 + 1.0*s_15,7 + 1.0*s_15,8 + 1.0*s_15,9 + 1.0*s_15,10) <= 1.0
IloRange bag_and_box16 : 1.0 <= (1.0*s_16,0 + 1.0*s_16,1 + 1.0*s_16,2 + 1.0*s_16,3 + 1.0*s_16,4 + 1.0*s_16,5 + 1.0*s_16,6 + 1.0*s_16,7 + 1.0*s_16,8 + 1.0*s_16,9 + 1.0*s_16,10) <= 1.0
IloRange bag_and_box17 : 1.0 <= (1.0*s_17,0 + 1.0*s_17,1 + 1.0*s_17,2 + 1.0*s_17,3 + 1.0*s_17,4 + 1.0*s_17,5 + 1.0*s_17,6 + 1.0*s_17,7 + 1.0*s_17,8 + 1.0*s_17,9 + 1.0*s_17,10) <= 1.0
IloRange bag_and_box18 : 1.0 <= (1.0*s_18,0 + 1.0*s_18,1 + 1.0*s_18,2 + 1.0*s_18,3 + 1.0*s_18,4 + 1.0*s_18,5 + 1.0*s_18,6 + 1.0*s_18,7 + 1.0*s_18,8 + 1.0*s_18,9 + 1.0*s_18,10) <= 1.0
IloRange Volume_0 : -infinity <= (912000.0*s_0,0 + 414000.0*s_1,0 + 1680000.0*s_2,0 + 840000.0*s_3,0 + 572000.0*s_4,0 + 988000.0*s_5,0 + 1000000.0*s_6,0 + 650000.0*s_7,0 + 495000.0*s_8,0 + 1944000.0*s_9,0 + 192000.0*s_10,0 + 1836000.0*s_11,0 + 2808000.0*s_12,0 + 1260000.0*s_13,0 + 684000.0*s_14,0 + 966000.0*s_15,0 + 2880000.0*s_16,0 + 1.3608E7*s_17,0 + 1260000.0*s_18,0 - 6305299.284992639*n_0) <= 0.0
IloRange Volume_1 : -infinity <= (912000.0*s_0,1 + 414000.0*s_1,1 + 1680000.0*s_2,1 + 840000.0*s_3,1 + 572000.0*s_4,1 + 988000.0*s_5,1 + 1000000.0*s_6,1 + 650000.0*s_7,1 + 495000.0*s_8,1 + 1944000.0*s_9,1 + 192000.0*s_10,1 + 1836000.0*s_11,1 + 2808000.0*s_12,1 + 1260000.0*s_13,1 + 684000.0*s_14,1 + 966000.0*s_15,1 + 2880000.0*s_16,1 + 1.3608E7*s_17,1 + 1260000.0*s_18,1 - 6305299.284992639*n_1) <= 0.0
IloRange Volume_2 : -infinity <= (912000.0*s_0,2 + 414000.0*s_1,2 + 1680000.0*s_2,2 + 840000.0*s_3,2 + 572000.0*s_4,2 + 988000.0*s_5,2 + 1000000.0*s_6,2 + 650000.0*s_7,2 + 495000.0*s_8,2 + 1944000.0*s_9,2 + 192000.0*s_10,2 + 1836000.0*s_11,2 + 2808000.0*s_12,2 + 1260000.0*s_13,2 + 684000.0*s_14,2 + 966000.0*s_15,2 + 2880000.0*s_16,2 + 1.3608E7*s_17,2 + 1260000.0*s_18,2 - 6305299.284992639*n_2) <= 0.0
IloRange Volume_3 : -infinity <= (912000.0*s_0,3 + 414000.0*s_1,3 + 1680000.0*s_2,3 + 840000.0*s_3,3 + 572000.0*s_4,3 + 988000.0*s_5,3 + 1000000.0*s_6,3 + 650000.0*s_7,3 + 495000.0*s_8,3 + 1944000.0*s_9,3 + 192000.0*s_10,3 + 1836000.0*s_11,3 + 2808000.0*s_12,3 + 1260000.0*s_13,3 + 684000.0*s_14,3 + 966000.0*s_15,3 + 2880000.0*s_16,3 + 1.3608E7*s_17,3 + 1260000.0*s_18,3 - 6305299.284992639*n_3) <= 0.0
IloRange Volume_4 : -infinity <= (912000.0*s_0,4 + 414000.0*s_1,4 + 1680000.0*s_2,4 + 840000.0*s_3,4 + 572000.0*s_4,4 + 988000.0*s_5,4 + 1000000.0*s_6,4 + 650000.0*s_7,4 + 495000.0*s_8,4 + 1944000.0*s_9,4 + 192000.0*s_10,4 + 1836000.0*s_11,4 + 2808000.0*s_12,4 + 1260000.0*s_13,4 + 684000.0*s_14,4 + 966000.0*s_15,4 + 2880000.0*s_16,4 + 1.3608E7*s_17,4 + 1260000.0*s_18,4 - 6305299.284992639*n_4) <= 0.0
IloRange Volume_5 : -infinity <= (912000.0*s_0,5 + 414000.0*s_1,5 + 1680000.0*s_2,5 + 840000.0*s_3,5 + 572000.0*s_4,5 + 988000.0*s_5,5 + 1000000.0*s_6,5 + 650000.0*s_7,5 + 495000.0*s_8,5 + 1944000.0*s_9,5 + 192000.0*s_10,5 + 1836000.0*s_11,5 + 2808000.0*s_12,5 + 1260000.0*s_13,5 + 684000.0*s_14,5 + 966000.0*s_15,5 + 2880000.0*s_16,5 + 1.3608E7*s_17,5 + 1260000.0*s_18,5 - 1.1340839946075162E7*n_5) <= 0.0
IloRange Volume_6 : -infinity <= (912000.0*s_0,6 + 414000.0*s_1,6 + 1680000.0*s_2,6 + 840000.0*s_3,6 + 572000.0*s_4,6 + 988000.0*s_5,6 + 1000000.0*s_6,6 + 650000.0*s_7,6 + 495000.0*s_8,6 + 1944000.0*s_9,6 + 192000.0*s_10,6 + 1836000.0*s_11,6 + 2808000.0*s_12,6 + 1260000.0*s_13,6 + 684000.0*s_14,6 + 966000.0*s_15,6 + 2880000.0*s_16,6 + 1.3608E7*s_17,6 + 1260000.0*s_18,6 - 1.1340839946075162E7*n_6) <= 0.0
IloRange Volume_7 : -infinity <= (912000.0*s_0,7 + 414000.0*s_1,7 + 1680000.0*s_2,7 + 840000.0*s_3,7 + 572000.0*s_4,7 + 988000.0*s_5,7 + 1000000.0*s_6,7 + 650000.0*s_7,7 + 495000.0*s_8,7 + 1944000.0*s_9,7 + 192000.0*s_10,7 + 1836000.0*s_11,7 + 2808000.0*s_12,7 + 1260000.0*s_13,7 + 684000.0*s_14,7 + 966000.0*s_15,7 + 2880000.0*s_16,7 + 1.3608E7*s_17,7 + 1260000.0*s_18,7 - 1.1340839946075162E7*n_7) <= 0.0
IloRange Volume_8 : -infinity <= (912000.0*s_0,8 + 414000.0*s_1,8 + 1680000.0*s_2,8 + 840000.0*s_3,8 + 572000.0*s_4,8 + 988000.0*s_5,8 + 1000000.0*s_6,8 + 650000.0*s_7,8 + 495000.0*s_8,8 + 1944000.0*s_9,8 + 192000.0*s_10,8 + 1836000.0*s_11,8 + 2808000.0*s_12,8 + 1260000.0*s_13,8 + 684000.0*s_14,8 + 966000.0*s_15,8 + 2880000.0*s_16,8 + 1.3608E7*s_17,8 + 1260000.0*s_18,8 - 1.9635004901018865E7*n_8) <= 0.0
IloRange Volume_9 : -infinity <= (912000.0*s_0,9 + 414000.0*s_1,9 + 1680000.0*s_2,9 + 840000.0*s_3,9 + 572000.0*s_4,9 + 988000.0*s_5,9 + 1000000.0*s_6,9 + 650000.0*s_7,9 + 495000.0*s_8,9 + 1944000.0*s_9,9 + 192000.0*s_10,9 + 1836000.0*s_11,9 + 2808000.0*s_12,9 + 1260000.0*s_13,9 + 684000.0*s_14,9 + 966000.0*s_15,9 + 2880000.0*s_16,9 + 1.3608E7*s_17,9 + 1260000.0*s_18,9 - 1.9635004901018865E7*n_9) <= 0.0
IloRange Volume_10 : -infinity <= (912000.0*s_0,10 + 414000.0*s_1,10 + 1680000.0*s_2,10 + 840000.0*s_3,10 + 572000.0*s_4,10 + 988000.0*s_5,10 + 1000000.0*s_6,10 + 650000.0*s_7,10 + 495000.0*s_8,10 + 1944000.0*s_9,10 + 192000.0*s_10,10 + 1836000.0*s_11,10 + 2808000.0*s_12,10 + 1260000.0*s_13,10 + 684000.0*s_14,10 + 966000.0*s_15,10 + 2880000.0*s_16,10 + 1.3608E7*s_17,10 + 1260000.0*s_18,10 - 1.9635004901018865E7*n_10) <= 0.0
IloRange bagCut_0,1 : 0.0 <= (1.0*n_0 - 1.0*n_1) <= infinity
IloRange bagCut_1,2 : 0.0 <= (1.0*n_1 - 1.0*n_2) <= infinity
IloRange bagCut_2,3 : 0.0 <= (1.0*n_2 - 1.0*n_3) <= infinity
IloRange bagCut_3,4 : 0.0 <= (1.0*n_3 - 1.0*n_4) <= infinity
IloRange bagCut_5,6 : 0.0 <= (1.0*n_5 - 1.0*n_6) <= infinity
IloRange bagCut_6,7 : 0.0 <= (1.0*n_6 - 1.0*n_7) <= infinity
IloRange bagCut_8,9 : 0.0 <= (1.0*n_8 - 1.0*n_9) <= infinity
IloRange bagCut_9,10 : 0.0 <= (1.0*n_9 - 1.0*n_10) <= infinity

}
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
CPXPARAM_Threads                                 1
!!Thread UP
Lazy constraint(s) or lazy constraint/branch callback is present.
    Disabling dual reductions (CPX_PARAM_REDUCE) in presolve.
    Disabling presolve reductions that prevent crushing forms.
Tried aggregator 1 time.
MIP Presolve eliminated 0 rows and 8 columns.
MIP Presolve modified 837 coefficients.
Reduced MIP has 38 rows, 212 columns, and 429 nonzeros.
Reduced MIP has 212 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.47 ticks)
print n
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
将物品  [3]  放进袋子  0  袋子种类为0              patten : [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=3, id=0, x=0, y=0, z=0, lx=80, ly=210, lz=50}
needToSolve=true needToAddCut=false
将物品  [16]  放进袋子  1  袋子种类为0              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=16, id=0, x=0, y=0, z=0, lx=180, ly=200, lz=80}
needToSolve=true needToAddCut=false
将物品  [0, 9, 11, 18]  放进袋子  2  袋子种类为0              patten : [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
子问题建模完毕-->求解完毕-->子问题状态=Infeasible           addNoGoodCut:  (1.0*s_0,2 + 1.0*s_9,2 + 1.0*s_11,2 + 1.0*s_18,2 - 3.0*n_2) <= 0
needToSolve=true needToAddCut=true
将物品  [7, 14]  放进袋子  3  袋子种类为0              patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=7, id=0, x=0, y=0, z=40, lx=250, ly=130, lz=20}
Position{type=14, id=0, x=0, y=0, z=0, lx=90, ly=190, lz=40}
needToSolve=true needToAddCut=false
将物品  [1, 8]  放进袋子  4  袋子种类为0              patten : [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=1, id=0, x=0, y=0, z=30, lx=90, ly=230, lz=20}
Position{type=8, id=0, x=90, y=0, z=0, lx=110, ly=150, lz=30}
needToSolve=true needToAddCut=false
将物品  [2, 6]  放进袋子  5  袋子种类为1              patten : [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=2, id=0, x=0, y=0, z=0, lx=60, ly=140, lz=200}
Position{type=6, id=0, x=60, y=0, z=0, lx=100, ly=100, lz=100}
needToSolve=true needToAddCut=false
将物品  [13]  放进袋子  6  袋子种类为1              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=13, id=0, x=0, y=0, z=0, lx=100, ly=70, lz=180}
needToSolve=true needToAddCut=false
将物品  [5, 17]  放进袋子  8  袋子种类为2              patten : [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=5, id=0, x=0, y=0, z=0, lx=20, ly=260, lz=190}
Position{type=17, id=0, x=60, y=30, z=10, lx=270, ly=280, lz=180}
needToSolve=true needToAddCut=false
将物品  [15]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=15, id=0, x=0, y=0, z=0, lx=140, ly=30, lz=230}
needToSolve=true needToAddCut=false
将物品  [4, 10, 12]  放进袋子  10  袋子种类为2              patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=4, id=0, x=90, y=0, z=0, lx=20, ly=130, lz=220}
Position{type=10, id=0, x=110, y=240, z=0, lx=160, ly=10, lz=120}
Position{type=12, id=0, x=0, y=0, z=120, lx=90, ly=240, lz=130}
needToSolve=true needToAddCut=false
print n
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
将物品  [3]  放进袋子  0  袋子种类为0              patten : [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [16]  放进袋子  1  袋子种类为0              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [0, 9, 11, 18]  放进袋子  2  袋子种类为0              patten : [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
addNoGoodCut:  (1.0*s_0,2 + 1.0*s_9,2 + 1.0*s_11,2 + 1.0*s_18,2 - 3.0*n_2) <= 0
needToSolve=false needToAddCut=true
将物品  [7, 14]  放进袋子  3  袋子种类为0              patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [1, 8]  放进袋子  4  袋子种类为0              patten : [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [2, 6]  放进袋子  5  袋子种类为1              patten : [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
needToSolve=false needToAddCut=false
将物品  [13]  放进袋子  6  袋子种类为1              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]
needToSolve=false needToAddCut=false
将物品  [5, 17]  放进袋子  8  袋子种类为2              patten : [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2]
needToSolve=false needToAddCut=false
将物品  [15]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2]
needToSolve=false needToAddCut=false
将物品  [4, 10, 12]  放进袋子  10  袋子种类为2              patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2]
needToSolve=false needToAddCut=false
print n
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
将物品  [3]  放进袋子  0  袋子种类为0              patten : [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [16]  放进袋子  1  袋子种类为0              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [0, 9, 11, 18]  放进袋子  2  袋子种类为0              patten : [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
addNoGoodCut:  (1.0*s_0,2 + 1.0*s_9,2 + 1.0*s_11,2 + 1.0*s_18,2 - 3.0*n_2) <= 0
needToSolve=false needToAddCut=true
将物品  [7, 14]  放进袋子  3  袋子种类为0              patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [1, 8]  放进袋子  4  袋子种类为0              patten : [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [2, 6]  放进袋子  5  袋子种类为1              patten : [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
needToSolve=false needToAddCut=false
将物品  [13]  放进袋子  6  袋子种类为1              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]
needToSolve=false needToAddCut=false
将物品  [5, 17]  放进袋子  8  袋子种类为2              patten : [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2]
needToSolve=false needToAddCut=false
将物品  [15]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2]
needToSolve=false needToAddCut=false
将物品  [4, 10, 12]  放进袋子  10  袋子种类为2              patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2]
needToSolve=false needToAddCut=false
print n
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
将物品  [3]  放进袋子  0  袋子种类为0              patten : [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [16]  放进袋子  1  袋子种类为0              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [0, 9, 11, 18]  放进袋子  2  袋子种类为0              patten : [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
addNoGoodCut:  (1.0*s_0,2 + 1.0*s_9,2 + 1.0*s_11,2 + 1.0*s_18,2 - 3.0*n_2) <= 0
needToSolve=false needToAddCut=true
将物品  [7, 14]  放进袋子  3  袋子种类为0              patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [1, 8]  放进袋子  4  袋子种类为0              patten : [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
needToSolve=false needToAddCut=false
将物品  [2, 6]  放进袋子  5  袋子种类为1              patten : [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
needToSolve=false needToAddCut=false
将物品  [13]  放进袋子  6  袋子种类为1              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]
needToSolve=false needToAddCut=false
将物品  [5, 17]  放进袋子  8  袋子种类为2              patten : [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2]
needToSolve=false needToAddCut=false
将物品  [15]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2]
needToSolve=false needToAddCut=false
将物品  [4, 10, 12]  放进袋子  10  袋子种类为2              patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2]
needToSolve=false needToAddCut=false
Probing fixed 1 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.29 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 1 rows and 1 columns.
MIP Presolve modified 19 coefficients.
Reduced MIP has 37 rows, 211 columns, and 426 nonzeros.
Reduced MIP has 211 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.34 ticks)
Probing time = 0.00 sec. (0.27 ticks)
Clique table members: 393.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: none, using 1 thread.
Root relaxation solution time = 0.00 sec. (0.28 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        1.7820     3                      1.7820       53         
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2]
装不完，装了15
addNoGoodCut:  (1.0*s_12,8 + 1.0*s_9,8 + 1.0*s_11,8 + 1.0*s_2,8 + 1.0*s_13,8 + 1.0*s_18,8 + 1.0*s_5,8 + 1.0*s_15,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_14,8 + 1.0*s_4,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_10,8 + 1.0*s_6,8 - 15.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [16, 17]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2]
子问题建模完毕-->求解完毕-->子问题状态=Infeasible           addNoGoodCut:  (1.0*s_16,9 + 1.0*s_17,9 - 1.0*n_9) <= 0
needToSolve=true needToAddCut=true
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 2]
装不完，装了15
addNoGoodCut:  (1.0*s_12,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_13,8 + 1.0*s_18,8 + 1.0*s_6,8 + 1.0*s_5,8 + 1.0*s_15,8 + 1.0*s_0,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_10,8 + 1.0*s_3,8 - 15.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [11]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=11, id=0, x=0, y=0, z=0, lx=270, ly=40, lz=170}
needToSolve=true needToAddCut=false
将物品  [16, 17]  放进袋子  10  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2]
addNoGoodCut:  (1.0*s_16,10 + 1.0*s_17,10 - 1.0*n_10) <= 0
needToSolve=false needToAddCut=true
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 18]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 2]
装不完，装了14
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_13,8 + 1.0*s_18,8 + 1.0*s_6,8 + 1.0*s_5,8 + 1.0*s_15,8 + 1.0*s_0,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_4,8 + 1.0*s_10,8 + 1.0*s_3,8 - 14.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [11, 12, 17]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 2]
子问题建模完毕-->求解完毕-->子问题状态=Infeasible           addNoGoodCut:  (1.0*s_11,9 + 1.0*s_12,9 + 1.0*s_17,9 - 2.0*n_9) <= 0
needToSolve=true needToAddCut=true
      0     0        1.7820     3                    Cuts: 15       72         
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, -0.0]
将物品  [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 16, 18]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 2]
装不完，装了14
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_12,8 + 1.0*s_9,8 + 1.0*s_11,8 + 1.0*s_2,8 + 1.0*s_18,8 + 1.0*s_5,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_1,8 + 1.0*s_10,8 + 1.0*s_8,8 - 14.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [6, 13, 15, 17]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 2]
子问题建模完毕-->求解完毕-->子问题状态=Infeasible           addNoGoodCut:  (1.0*s_6,9 + 1.0*s_13,9 + 1.0*s_15,9 + 1.0*s_17,9 - 3.0*n_9) <= 0
needToSolve=true needToAddCut=true
      0     0        1.7820     3                    Cuts: 14      104         
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2]
haha
Position{type=16, id=16, x=0, y=0, z=0, lx=200, ly=180, lz=80}
Position{type=12, id=12, x=200, y=0, z=0, lx=90, ly=240, lz=130}
Position{type=11, id=11, x=290, y=0, z=0, lx=40, ly=270, lz=170}
Position{type=2, id=2, x=0, y=0, z=80, lx=200, ly=140, lz=60}
Position{type=13, id=13, x=0, y=180, z=0, lx=180, ly=70, lz=100}
Position{type=5, id=5, x=0, y=0, z=140, lx=190, ly=260, lz=20}
Position{type=0, id=0, x=0, y=0, z=160, lx=190, ly=240, lz=20}
Position{type=3, id=3, x=200, y=0, z=130, lx=80, ly=210, lz=50}
Position{type=14, id=14, x=0, y=140, z=100, lx=190, ly=90, lz=40}
Position{type=7, id=7, x=0, y=250, z=0, lx=250, ly=20, lz=130}
Position{type=4, id=4, x=0, y=270, z=0, lx=220, ly=20, lz=130}
Position{type=8, id=8, x=220, y=270, z=0, lx=110, ly=30, lz=150}
Position{type=1, id=1, x=0, y=300, z=0, lx=230, ly=20, lz=90}
Position{type=10, id=10, x=0, y=290, z=0, lx=160, ly=10, lz=120}
needToSolve=true needToAddCut=false
将物品  [6, 9, 15, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 2]
装不完，装了3
addNoGoodCut:  (1.0*s_17,9 + 1.0*s_9,9 + 1.0*s_18,9 + 1.0*s_6,9 - 3.0*n_9) <= 0
needToSolve=true needToAddCut=true
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 2]
haha
Position{type=16, id=16, x=0, y=0, z=0, lx=180, ly=80, lz=200}
Position{type=12, id=12, x=0, y=80, z=0, lx=240, ly=90, lz=130}
Position{type=9, id=9, x=240, y=0, z=0, lx=40, ly=270, lz=180}
Position{type=2, id=2, x=0, y=170, z=0, lx=140, ly=60, lz=200}
Position{type=13, id=13, x=140, y=170, z=0, lx=100, ly=70, lz=180}
Position{type=5, id=5, x=280, y=0, z=0, lx=20, ly=260, lz=190}
Position{type=0, id=0, x=0, y=240, z=0, lx=240, ly=20, lz=190}
Position{type=3, id=3, x=180, y=0, z=0, lx=50, ly=80, lz=210}
Position{type=14, id=14, x=0, y=80, z=130, lx=190, ly=90, lz=40}
Position{type=7, id=7, x=0, y=0, z=200, lx=130, ly=250, lz=20}
Position{type=4, id=4, x=0, y=260, z=0, lx=220, ly=20, lz=130}
Position{type=8, id=8, x=140, y=80, z=180, lx=110, ly=150, lz=30}
Position{type=1, id=1, x=0, y=260, z=130, lx=230, ly=20, lz=90}
Position{type=10, id=10, x=140, y=0, z=210, lx=160, ly=120, lz=10}
needToSolve=true needToAddCut=false
将物品  [6, 11, 15, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 2]
装不完，装了3
addNoGoodCut:  (1.0*s_17,9 + 1.0*s_11,9 + 1.0*s_18,9 + 1.0*s_6,9 - 3.0*n_9) <= 0
needToSolve=true needToAddCut=true
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 2]
装不完，装了13
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_12,8 + 1.0*s_9,8 + 1.0*s_11,8 + 1.0*s_2,8 + 1.0*s_13,8 + 1.0*s_5,8 + 1.0*s_0,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_8,8 + 1.0*s_10,8 + 1.0*s_6,8 - 13.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [15, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 2]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=15, id=0, x=0, y=0, z=0, lx=230, ly=30, lz=140}
Position{type=17, id=0, x=0, y=40, z=0, lx=270, ly=280, lz=180}
Position{type=18, id=0, x=270, y=140, z=0, lx=70, ly=180, lz=100}
needToSolve=true needToAddCut=false
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 2]
装不完，装了13
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_12,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_13,8 + 1.0*s_6,8 + 1.0*s_5,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_1,8 + 1.0*s_10,8 + 1.0*s_14,8 - 13.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [11, 15, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 2]
子问题建模完毕-->求解完毕-->子问题状态=Infeasible           addNoGoodCut:  (1.0*s_11,9 + 1.0*s_15,9 + 1.0*s_17,9 + 1.0*s_18,9 - 3.0*n_9) <= 0
needToSolve=true needToAddCut=true
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2]
装不完，装了14
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_2,8 + 1.0*s_13,8 + 1.0*s_5,8 + 1.0*s_15,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_1,8 + 1.0*s_10,8 + 1.0*s_6,8 - 14.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [9, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=9, id=0, x=0, y=0, z=0, lx=270, ly=40, lz=180}
Position{type=17, id=0, x=0, y=40, z=0, lx=270, ly=280, lz=180}
Position{type=18, id=0, x=270, y=40, z=0, lx=70, ly=100, lz=180}
needToSolve=true needToAddCut=false
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2]
装不完，装了14
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_2,8 + 1.0*s_5,8 + 1.0*s_15,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_10,8 + 1.0*s_6,8 - 14.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [9, 13, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=9, id=0, x=0, y=0, z=0, lx=270, ly=40, lz=180}
Position{type=13, id=0, x=270, y=40, z=0, lx=70, ly=180, lz=100}
Position{type=17, id=0, x=0, y=40, z=0, lx=270, ly=280, lz=180}
Position{type=18, id=0, x=270, y=220, z=0, lx=70, ly=100, lz=180}
needToSolve=true needToAddCut=false
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2]
装不完，装了14
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_2,8 + 1.0*s_13,8 + 1.0*s_5,8 + 1.0*s_15,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_8,8 + 1.0*s_10,8 + 1.0*s_1,8 - 14.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [6, 9, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2]
子问题建模完毕-->求解完毕-->子问题状态=Infeasible           addNoGoodCut:  (1.0*s_6,9 + 1.0*s_9,9 + 1.0*s_17,9 + 1.0*s_18,9 - 3.0*n_9) <= 0
needToSolve=true needToAddCut=true
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2]
装不完，装了13
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_2,8 + 1.0*s_5,8 + 1.0*s_15,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_1,8 + 1.0*s_10,8 + 1.0*s_6,8 - 13.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [8, 9, 13, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2]
haha
Position{type=17, id=17, x=0, y=0, z=0, lx=270, ly=280, lz=180}
Position{type=9, id=9, x=0, y=280, z=0, lx=270, ly=40, lz=180}
Position{type=13, id=13, x=270, y=0, z=0, lx=70, ly=100, lz=180}
Position{type=18, id=18, x=270, y=100, z=0, lx=70, ly=100, lz=180}
Position{type=8, id=8, x=270, y=200, z=0, lx=30, ly=110, lz=150}
needToSolve=true needToAddCut=false
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16]  放进袋子  8  袋子种类为2              patten : [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2]
装不完，装了13
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_2,8 + 1.0*s_13,8 + 1.0*s_5,8 + 1.0*s_15,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_10,8 + 1.0*s_6,8 - 13.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [1, 9, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2]
子问题建模完毕-->求解完毕-->子问题状态=Infeasible           addNoGoodCut:  (1.0*s_1,9 + 1.0*s_9,9 + 1.0*s_17,9 + 1.0*s_18,9 - 3.0*n_9) <= 0
needToSolve=true needToAddCut=true
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2]
装不完，装了13
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_2,8 + 1.0*s_13,8 + 1.0*s_5,8 + 1.0*s_15,8 + 1.0*s_0,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_8,8 + 1.0*s_10,8 + 1.0*s_6,8 - 13.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [3, 9, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2]
子问题建模完毕-->求解完毕-->子问题状态=Optimal           Position{type=3, id=0, x=0, y=0, z=0, lx=50, ly=210, lz=80}
Position{type=9, id=0, x=70, y=280, z=0, lx=270, ly=40, lz=180}
Position{type=17, id=0, x=70, y=0, z=0, lx=270, ly=280, lz=180}
Position{type=18, id=0, x=0, y=210, z=0, lx=70, ly=100, lz=180}
needToSolve=true needToAddCut=false
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2]
装不完，装了13
addNoGoodCut:  (1.0*s_16,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_2,8 + 1.0*s_13,8 + 1.0*s_5,8 + 1.0*s_15,8 + 1.0*s_0,8 + 1.0*s_14,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_1,8 + 1.0*s_10,8 + 1.0*s_6,8 - 13.0*n_8) <= 0
needToSolve=true needToAddCut=true
将物品  [3, 8, 9, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2]
haha
Position{type=17, id=17, x=0, y=0, z=0, lx=270, ly=280, lz=180}
Position{type=9, id=9, x=0, y=280, z=0, lx=270, ly=40, lz=180}
Position{type=18, id=18, x=270, y=0, z=0, lx=70, ly=180, lz=100}
Position{type=3, id=3, x=270, y=0, z=100, lx=50, ly=210, lz=80}
Position{type=8, id=8, x=270, y=210, z=0, lx=30, ly=110, lz=150}
needToSolve=true needToAddCut=false
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0]
将物品  [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16]  放进袋子  8  袋子种类为2              patten : [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2]
haha
Position{type=16, id=16, x=0, y=0, z=0, lx=180, ly=200, lz=80}
Position{type=12, id=12, x=0, y=200, z=0, lx=240, ly=90, lz=130}
Position{type=11, id=11, x=0, y=0, z=80, lx=270, ly=170, lz=40}
Position{type=2, id=2, x=270, y=0, z=0, lx=60, ly=200, lz=140}
Position{type=6, id=6, x=240, y=200, z=0, lx=100, ly=100, lz=100}
Position{type=5, id=5, x=0, y=0, z=120, lx=260, ly=190, lz=20}
Position{type=15, id=15, x=0, y=290, z=0, lx=230, ly=30, lz=140}
Position{type=0, id=0, x=0, y=0, z=140, lx=240, ly=190, lz=20}
Position{type=14, id=14, x=180, y=0, z=0, lx=90, ly=190, lz=40}
Position{type=7, id=7, x=340, y=0, z=0, lx=20, ly=250, lz=130}
Position{type=4, id=4, x=0, y=190, z=140, lx=220, ly=130, lz=20}
Position{type=8, id=8, x=240, y=300, z=0, lx=110, ly=30, lz=150}
Position{type=1, id=1, x=240, y=0, z=140, lx=90, ly=230, lz=20}
Position{type=10, id=10, x=0, y=320, z=0, lx=160, ly=10, lz=120}
needToSolve=true needToAddCut=false
将物品  [3, 9, 13, 17, 18]  放进袋子  9  袋子种类为2              patten : [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2]
haha
Position{type=17, id=17, x=0, y=0, z=0, lx=270, ly=280, lz=180}
Position{type=9, id=9, x=0, y=280, z=0, lx=270, ly=40, lz=180}
Position{type=13, id=13, x=270, y=0, z=0, lx=70, ly=100, lz=180}
Position{type=18, id=18, x=270, y=100, z=0, lx=70, ly=180, lz=100}
Position{type=3, id=3, x=270, y=100, z=100, lx=50, ly=210, lz=80}
needToSolve=true needToAddCut=false
*     0+    0                            2.0000        1.7820            10.90%
      0     0        cutoff              2.0000        1.7820      116   10.90%
Elapsed time = 3.56 sec. (7.09 ticks, tree = 0.01 MB, solutions = 1)

Clique cuts applied:  3
Cover cuts applied:  2
User cuts applied:  14

Root node processing (before b&c):
  Real time             =    3.56 sec. (7.10 ticks)
Sequential b&c:
  Real time             =    0.00 sec. (0.00 ticks)
                          ------------
Total (root+branch&cut) =    3.56 sec. (7.10 ticks)
!!Thread down
2.0
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0]
Total time =3.806s
——————————————————————————————————————————————————
0.0   0.0    false
0.129   7.1000000000000005    false
0.13   7.1000000000000005    false
0.132   7.1000000000000005    false
0.134   7.1000000000000005    false
0.654   2.0    false
1.115   3.0    false
1.401   2.0    false
1.652   2.0    false
1.873   2.0    false
2.041   2.0    false
2.209   2.0    false
2.342   2.0    false
2.502   2.0    false
2.684   2.0    false
2.874   2.0    false
3.023   2.0    false
3.178   2.0    false
3.34   2.0    false
3.478   2.0    false
3.631   2.0    true
