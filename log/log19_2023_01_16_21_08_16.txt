[5, 3, 2]
[Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}, Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}, Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}, Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}, Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}, Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}, Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}, Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}, Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}, Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}, Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}, Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}, Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}]
[Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=5}, Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=3}, Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=2}]
Instance{bagTypeCount=3, itemTypeCount=9, bagCount=10, itemCount=13}
[Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=5}, Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=3}, Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=2}]
3
0,1
1,2
2,7
7,8
8,9
9,10
10,11
11,12
12,13
IloModel  {
IloMinimize  : (0.4*n_0 + 0.4*n_1 + 0.4*n_2 + 0.4*n_3 + 0.4*n_4 + 0.7*n_5 + 0.7*n_6 + 0.7*n_7 + 1.0*n_8 + 1.0*n_9)
IloRange bag_and_box0 : 1.0 <= (1.0*s_0,0 + 1.0*s_0,1 + 1.0*s_0,2 + 1.0*s_0,3 + 1.0*s_0,4 + 1.0*s_0,5 + 1.0*s_0,6 + 1.0*s_0,7 + 1.0*s_0,8 + 1.0*s_0,9) <= 1.0
IloRange bag_and_box1 : 1.0 <= (1.0*s_1,0 + 1.0*s_1,1 + 1.0*s_1,2 + 1.0*s_1,3 + 1.0*s_1,4 + 1.0*s_1,5 + 1.0*s_1,6 + 1.0*s_1,7 + 1.0*s_1,8 + 1.0*s_1,9) <= 1.0
IloRange bag_and_box2 : 1.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 + 1.0*s_2,7 + 1.0*s_2,8 + 1.0*s_2,9) <= 1.0
IloRange bag_and_box3 : 1.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 + 1.0*s_3,7 + 1.0*s_3,8 + 1.0*s_3,9) <= 1.0
IloRange bag_and_box4 : 1.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 + 1.0*s_4,7 + 1.0*s_4,8 + 1.0*s_4,9) <= 1.0
IloRange bag_and_box5 : 1.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 + 1.0*s_5,7 + 1.0*s_5,8 + 1.0*s_5,9) <= 1.0
IloRange bag_and_box6 : 1.0 <= (1.0*s_6,0 + 1.0*s_6,1 + 1.0*s_6,2 + 1.0*s_6,3 + 1.0*s_6,4 + 1.0*s_6,5 + 1.0*s_6,6 + 1.0*s_6,7 + 1.0*s_6,8 + 1.0*s_6,9) <= 1.0
IloRange bag_and_box7 : 1.0 <= (1.0*s_7,0 + 1.0*s_7,1 + 1.0*s_7,2 + 1.0*s_7,3 + 1.0*s_7,4 + 1.0*s_7,5 + 1.0*s_7,6 + 1.0*s_7,7 + 1.0*s_7,8 + 1.0*s_7,9) <= 1.0
IloRange bag_and_box8 : 1.0 <= (1.0*s_8,0 + 1.0*s_8,1 + 1.0*s_8,2 + 1.0*s_8,3 + 1.0*s_8,4 + 1.0*s_8,5 + 1.0*s_8,6 + 1.0*s_8,7 + 1.0*s_8,8 + 1.0*s_8,9) <= 1.0
IloRange bag_and_box9 : 1.0 <= (1.0*s_9,0 + 1.0*s_9,1 + 1.0*s_9,2 + 1.0*s_9,3 + 1.0*s_9,4 + 1.0*s_9,5 + 1.0*s_9,6 + 1.0*s_9,7 + 1.0*s_9,8 + 1.0*s_9,9) <= 1.0
IloRange bag_and_box10 : 1.0 <= (1.0*s_10,0 + 1.0*s_10,1 + 1.0*s_10,2 + 1.0*s_10,3 + 1.0*s_10,4 + 1.0*s_10,5 + 1.0*s_10,6 + 1.0*s_10,7 + 1.0*s_10,8 + 1.0*s_10,9) <= 1.0
IloRange bag_and_box11 : 1.0 <= (1.0*s_11,0 + 1.0*s_11,1 + 1.0*s_11,2 + 1.0*s_11,3 + 1.0*s_11,4 + 1.0*s_11,5 + 1.0*s_11,6 + 1.0*s_11,7 + 1.0*s_11,8 + 1.0*s_11,9) <= 1.0
IloRange bag_and_box12 : 1.0 <= (1.0*s_12,0 + 1.0*s_12,1 + 1.0*s_12,2 + 1.0*s_12,3 + 1.0*s_12,4 + 1.0*s_12,5 + 1.0*s_12,6 + 1.0*s_12,7 + 1.0*s_12,8 + 1.0*s_12,9) <= 1.0
IloRange Volume_0 : -infinity <= (120000.0*s_0,0 + 1472000.0*s_1,0 + 1000.0*s_2,0 + 1000.0*s_3,0 + 1000.0*s_4,0 + 1000.0*s_5,0 + 1000.0*s_6,0 + 2800000.0*s_7,0 + 3360000.0*s_8,0 + 1260000.0*s_9,0 + 4500000.0*s_10,0 + 4000000.0*s_11,0 + 4312000.0*s_12,0 - 6305299.284992639*n_0) <= 0.0
IloRange Volume_1 : -infinity <= (120000.0*s_0,1 + 1472000.0*s_1,1 + 1000.0*s_2,1 + 1000.0*s_3,1 + 1000.0*s_4,1 + 1000.0*s_5,1 + 1000.0*s_6,1 + 2800000.0*s_7,1 + 3360000.0*s_8,1 + 1260000.0*s_9,1 + 4500000.0*s_10,1 + 4000000.0*s_11,1 + 4312000.0*s_12,1 - 6305299.284992639*n_1) <= 0.0
IloRange Volume_2 : -infinity <= (120000.0*s_0,2 + 1472000.0*s_1,2 + 1000.0*s_2,2 + 1000.0*s_3,2 + 1000.0*s_4,2 + 1000.0*s_5,2 + 1000.0*s_6,2 + 2800000.0*s_7,2 + 3360000.0*s_8,2 + 1260000.0*s_9,2 + 4500000.0*s_10,2 + 4000000.0*s_11,2 + 4312000.0*s_12,2 - 6305299.284992639*n_2) <= 0.0
IloRange Volume_3 : -infinity <= (120000.0*s_0,3 + 1472000.0*s_1,3 + 1000.0*s_2,3 + 1000.0*s_3,3 + 1000.0*s_4,3 + 1000.0*s_5,3 + 1000.0*s_6,3 + 2800000.0*s_7,3 + 3360000.0*s_8,3 + 1260000.0*s_9,3 + 4500000.0*s_10,3 + 4000000.0*s_11,3 + 4312000.0*s_12,3 - 6305299.284992639*n_3) <= 0.0
IloRange Volume_4 : -infinity <= (120000.0*s_0,4 + 1472000.0*s_1,4 + 1000.0*s_2,4 + 1000.0*s_3,4 + 1000.0*s_4,4 + 1000.0*s_5,4 + 1000.0*s_6,4 + 2800000.0*s_7,4 + 3360000.0*s_8,4 + 1260000.0*s_9,4 + 4500000.0*s_10,4 + 4000000.0*s_11,4 + 4312000.0*s_12,4 - 6305299.284992639*n_4) <= 0.0
IloRange Volume_5 : -infinity <= (120000.0*s_0,5 + 1472000.0*s_1,5 + 1000.0*s_2,5 + 1000.0*s_3,5 + 1000.0*s_4,5 + 1000.0*s_5,5 + 1000.0*s_6,5 + 2800000.0*s_7,5 + 3360000.0*s_8,5 + 1260000.0*s_9,5 + 4500000.0*s_10,5 + 4000000.0*s_11,5 + 4312000.0*s_12,5 - 1.1340839946075162E7*n_5) <= 0.0
IloRange Volume_6 : -infinity <= (120000.0*s_0,6 + 1472000.0*s_1,6 + 1000.0*s_2,6 + 1000.0*s_3,6 + 1000.0*s_4,6 + 1000.0*s_5,6 + 1000.0*s_6,6 + 2800000.0*s_7,6 + 3360000.0*s_8,6 + 1260000.0*s_9,6 + 4500000.0*s_10,6 + 4000000.0*s_11,6 + 4312000.0*s_12,6 - 1.1340839946075162E7*n_6) <= 0.0
IloRange Volume_7 : -infinity <= (120000.0*s_0,7 + 1472000.0*s_1,7 + 1000.0*s_2,7 + 1000.0*s_3,7 + 1000.0*s_4,7 + 1000.0*s_5,7 + 1000.0*s_6,7 + 2800000.0*s_7,7 + 3360000.0*s_8,7 + 1260000.0*s_9,7 + 4500000.0*s_10,7 + 4000000.0*s_11,7 + 4312000.0*s_12,7 - 1.1340839946075162E7*n_7) <= 0.0
IloRange Volume_8 : -infinity <= (120000.0*s_0,8 + 1472000.0*s_1,8 + 1000.0*s_2,8 + 1000.0*s_3,8 + 1000.0*s_4,8 + 1000.0*s_5,8 + 1000.0*s_6,8 + 2800000.0*s_7,8 + 3360000.0*s_8,8 + 1260000.0*s_9,8 + 4500000.0*s_10,8 + 4000000.0*s_11,8 + 4312000.0*s_12,8 - 1.9635004901018865E7*n_8) <= 0.0
IloRange Volume_9 : -infinity <= (120000.0*s_0,9 + 1472000.0*s_1,9 + 1000.0*s_2,9 + 1000.0*s_3,9 + 1000.0*s_4,9 + 1000.0*s_5,9 + 1000.0*s_6,9 + 2800000.0*s_7,9 + 3360000.0*s_8,9 + 1260000.0*s_9,9 + 4500000.0*s_10,9 + 4000000.0*s_11,9 + 4312000.0*s_12,9 - 1.9635004901018865E7*n_9) <= 0.0
IloRange boxCut2,0 : 0.0 <= (1.0*s_2,0 - 1.0*s_3,0) <= infinity
IloRange boxCut2,1 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 - 1.0*s_3,1) <= infinity
IloRange boxCut2,2 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 - 1.0*s_3,2) <= infinity
IloRange boxCut2,3 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 - 1.0*s_3,3) <= infinity
IloRange boxCut2,4 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 - 1.0*s_3,4) <= infinity
IloRange boxCut2,5 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 - 1.0*s_3,5) <= infinity
IloRange boxCut2,6 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 - 1.0*s_3,6) <= infinity
IloRange boxCut2,7 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 + 1.0*s_2,7 - 1.0*s_3,7) <= infinity
IloRange boxCut2,8 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 + 1.0*s_2,7 + 1.0*s_2,8 - 1.0*s_3,8) <= infinity
IloRange boxCut2,9 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 + 1.0*s_2,7 + 1.0*s_2,8 + 1.0*s_2,9 - 1.0*s_3,9) <= infinity
IloRange boxCut3,0 : 0.0 <= (1.0*s_3,0 - 1.0*s_4,0) <= infinity
IloRange boxCut3,1 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 - 1.0*s_4,1) <= infinity
IloRange boxCut3,2 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 - 1.0*s_4,2) <= infinity
IloRange boxCut3,3 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 - 1.0*s_4,3) <= infinity
IloRange boxCut3,4 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 - 1.0*s_4,4) <= infinity
IloRange boxCut3,5 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 - 1.0*s_4,5) <= infinity
IloRange boxCut3,6 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 - 1.0*s_4,6) <= infinity
IloRange boxCut3,7 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 + 1.0*s_3,7 - 1.0*s_4,7) <= infinity
IloRange boxCut3,8 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 + 1.0*s_3,7 + 1.0*s_3,8 - 1.0*s_4,8) <= infinity
IloRange boxCut3,9 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 + 1.0*s_3,7 + 1.0*s_3,8 + 1.0*s_3,9 - 1.0*s_4,9) <= infinity
IloRange boxCut4,0 : 0.0 <= (1.0*s_4,0 - 1.0*s_5,0) <= infinity
IloRange boxCut4,1 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 - 1.0*s_5,1) <= infinity
IloRange boxCut4,2 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 - 1.0*s_5,2) <= infinity
IloRange boxCut4,3 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 - 1.0*s_5,3) <= infinity
IloRange boxCut4,4 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 - 1.0*s_5,4) <= infinity
IloRange boxCut4,5 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 - 1.0*s_5,5) <= infinity
IloRange boxCut4,6 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 - 1.0*s_5,6) <= infinity
IloRange boxCut4,7 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 + 1.0*s_4,7 - 1.0*s_5,7) <= infinity
IloRange boxCut4,8 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 + 1.0*s_4,7 + 1.0*s_4,8 - 1.0*s_5,8) <= infinity
IloRange boxCut4,9 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 + 1.0*s_4,7 + 1.0*s_4,8 + 1.0*s_4,9 - 1.0*s_5,9) <= infinity
IloRange boxCut5,0 : 0.0 <= (1.0*s_5,0 - 1.0*s_6,0) <= infinity
IloRange boxCut5,1 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 - 1.0*s_6,1) <= infinity
IloRange boxCut5,2 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 - 1.0*s_6,2) <= infinity
IloRange boxCut5,3 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 - 1.0*s_6,3) <= infinity
IloRange boxCut5,4 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 - 1.0*s_6,4) <= infinity
IloRange boxCut5,5 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 - 1.0*s_6,5) <= infinity
IloRange boxCut5,6 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 - 1.0*s_6,6) <= infinity
IloRange boxCut5,7 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 + 1.0*s_5,7 - 1.0*s_6,7) <= infinity
IloRange boxCut5,8 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 + 1.0*s_5,7 + 1.0*s_5,8 - 1.0*s_6,8) <= infinity
IloRange boxCut5,9 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 + 1.0*s_5,7 + 1.0*s_5,8 + 1.0*s_5,9 - 1.0*s_6,9) <= infinity
IloRange bagCut_0,1 : 0.0 <= (1.0*n_0 - 1.0*n_1) <= infinity
IloRange bagCut_1,2 : 0.0 <= (1.0*n_1 - 1.0*n_2) <= infinity
IloRange bagCut_2,3 : 0.0 <= (1.0*n_2 - 1.0*n_3) <= infinity
IloRange bagCut_3,4 : 0.0 <= (1.0*n_3 - 1.0*n_4) <= infinity
IloRange bagCut_5,6 : 0.0 <= (1.0*n_5 - 1.0*n_6) <= infinity
IloRange bagCut_6,7 : 0.0 <= (1.0*n_6 - 1.0*n_7) <= infinity
IloRange bagCut_8,9 : 0.0 <= (1.0*n_8 - 1.0*n_9) <= infinity

}
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
CPXPARAM_Threads                                 1
!!Thread UP
Lazy constraint(s) or lazy constraint/branch callback is present.
    Disabling dual reductions (CPX_PARAM_REDUCE) in presolve.
    Disabling presolve reductions that prevent crushing forms.
Tried aggregator 1 time.
MIP Presolve eliminated 4 rows and 0 columns.
MIP Presolve modified 602 coefficients.
Reduced MIP has 67 rows, 140 columns, and 510 nonzeros.
Reduced MIP has 140 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.61 ticks)
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
print n
[1.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, -0.0, -0.0, -0.0]
将物品  [9, 10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[9, 10],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'c12':  0  = 1.
Presolve time = 0.00 sec. (0.12 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.12 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.12 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_9,0 + 1.0*s_10,0 - 1.0*n_0) <= 0.0无法将物品 [9, 10]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 2, 3, 4, 5, 6, 7, 12]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 1, 0, 0, 0, 0, 1, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_12,5 + 1.0*s_7,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 7.0*n_5) <= 0.0无法将物品 [12, 7, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 8, 11]  放进袋子  6  袋子种类为1
patten : [0, 1, 0, 0, 1, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1, 8, 11],6
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 5 rows and 10 columns.
MIP Presolve modified 55 coefficients.
Aggregator did 11 substitutions.
Reduced MIP has 37 rows, 36 columns, and 150 nonzeros.
Reduced MIP has 27 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.39 ticks)
Probing fixed 2 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.06 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 22 coefficients.
Reduced MIP has 37 rows, 34 columns, and 142 nonzeros.
Reduced MIP has 25 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.12 ticks)
Probing fixed 4 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.06 ticks)
Cover probing fixed 3 vars, tightened 1 bounds.
Clique table members: 104.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.08 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    11                      0.0000       12         
*     0+    0                            0.0000        0.0000             0.00%
      0     0        cutoff              0.0000        0.0000       12    0.00%
Elapsed time = 0.00 sec. (1.09 ticks, tree = 0.01 MB, solutions = 1)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.09 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.09 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
print n
[1.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, -0.0, -0.0, -0.0]
将物品  [9, 10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 1, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_9,0 + 1.0*s_10,0 - 1.0*n_0) <= 0.0无法将物品 [9, 10]  放进袋子 0 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [0, 2, 3, 4, 5, 6, 7, 12]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 1, 0, 0, 0, 0, 1, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_12,5 + 1.0*s_7,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 7.0*n_5) <= 0.0无法将物品 [12, 7, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 8, 11]  放进袋子  6  袋子种类为1
patten : [0, 1, 0, 0, 1, 0, 0, 1, 0, 1]
pattern good
needToSolve=false needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
print n
[1.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, -0.0, -0.0, -0.0]
将物品  [9, 10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 1, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_9,0 + 1.0*s_10,0 - 1.0*n_0) <= 0.0无法将物品 [9, 10]  放进袋子 0 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [0, 2, 3, 4, 5, 6, 7, 12]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 1, 0, 0, 0, 0, 1, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_12,5 + 1.0*s_7,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 7.0*n_5) <= 0.0无法将物品 [12, 7, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 8, 11]  放进袋子  6  袋子种类为1
patten : [0, 1, 0, 0, 1, 0, 0, 1, 0, 1]
pattern good
needToSolve=false needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
print n
[1.0, -0.0, -0.0, -0.0, -0.0, 1.0, 1.0, -0.0, -0.0, -0.0]
将物品  [9, 10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 1, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_9,0 + 1.0*s_10,0 - 1.0*n_0) <= 0.0无法将物品 [9, 10]  放进袋子 0 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [0, 2, 3, 4, 5, 6, 7, 12]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 1, 0, 0, 0, 0, 1, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_12,5 + 1.0*s_7,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 7.0*n_5) <= 0.0无法将物品 [12, 7, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 8, 11]  放进袋子  6  袋子种类为1
patten : [0, 1, 0, 0, 1, 0, 0, 1, 0, 1]
pattern good
needToSolve=false needToAddCut=false
Probing fixed 14 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.81 ticks)
Tried aggregator 1 time.
MIP Presolve eliminated 6 rows and 14 columns.
Reduced MIP has 61 rows, 126 columns, and 440 nonzeros.
Reduced MIP has 126 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.21 ticks)
Probing time = 0.00 sec. (0.85 ticks)
Clique table members: 336.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: none, using 1 thread.
Root relaxation solution time = 0.00 sec. (0.48 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        1.1117     3                      1.1117      111         
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 1.0]
将物品  [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 5, 1, 1, 0, 1, 1, 1, 2]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
112
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 7, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
将物品  [1, 9]  放进袋子  9  袋子种类为2
patten : [0, 1, 0, 0, 0, 1, 0, 0, 0, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 9],9
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve modified 7 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 28 rows, 31 columns, and 123 nonzeros.
Reduced MIP has 24 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.12 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.23 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.23 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.23 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 1.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 1.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 1.0]
将物品  [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 4, 0, 1, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 1, 9, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
308
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 - 10.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 9, 0, 2, 3, 4, 5]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
将物品  [6, 7]  放进袋子  9  袋子种类为2
patten : [0, 0, 1, 1, 0, 0, 0, 0, 0, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[6, 7],9
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 0 columns.
MIP Presolve modified 48 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 25 rows, 31 columns, and 90 nonzeros.
Reduced MIP has 24 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.12 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.22 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.23 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.23 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
      0     0        1.1354     3                     Cuts: 4      118         
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 9]  放进袋子  5  袋子种类为1
patten : [1, 1, 5, 0, 0, 1, 0, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 9]
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
48
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=1, x=0, y=0, z=0, lx=230, ly=80, lz=80}
Position{type=5, x=0, y=80, z=0, lx=180, ly=100, lz=70}
Position{type=0, x=180, y=80, z=0, lx=50, ly=60, lz=40}
Position{type=2, x=180, y=140, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=140, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=140, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=140, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=140, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [7, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 0, 1, 1, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[7, 8, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 111 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 114 rows, 115 columns, and 568 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.10 ticks)
Probing fixed 5 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.17 ticks)
Cover probing fixed 0 vars, tightened 22 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 5 columns.
MIP Presolve modified 73 coefficients.
Reduced MIP has 113 rows, 110 columns, and 550 nonzeros.
Reduced MIP has 94 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.51 ticks)
Probing fixed 2 vars, tightened 4 bounds.
Probing time = 0.00 sec. (0.16 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Clique table members: 194.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.34 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    23                      0.0000       41         
      0     0        0.0000    23                     Cuts: 2       45         
      0     0        0.0000    23                    Cuts: 24       61         
      0     0        0.0000    23                    Cuts: 15       71         
      0     2        0.0000     8                      0.0000       71         
Elapsed time = 0.05 sec. (13.13 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  1
Clique cuts applied:  2
Cover cuts applied:  35
Implied bound cuts applied:  59
Flow cuts applied:  9
Mixed integer rounding cuts applied:  8
Gomory fractional cuts applied:  7

Root node processing (before b&c):
  Real time             =    0.05 sec. (13.07 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.05 sec. (20.28 ticks)
  Sync time (average)   =    0.01 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.09 sec. (33.35 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,8 + 1.0*s_8,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [7, 8, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.1416     3                    Cuts: 30      183         
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[4.4622387266694375E-9, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999955377613, -0.0]
[4.4622387266694375E-9, -5.577798408336797E-9, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0000000011155596, -0.0]
[4.4622387266694375E-9, -1.1155596816673592E-9, -1.1155596816673592E-9, -1.1155596816673592E-9, -1.1155596816673592E-9, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[2.12319051229315E-12, -1.061595256146575E-12, -1.7693254269109584E-13, -1.7693254269109584E-13, -1.7693254269109584E-13, -0.0, -0.0, -0.0, 1.0, 1.0]
将物品  [1, 2, 3, 4, 5, 6, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 0, 0, 1, 0, 1, 1, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
52
——————————————————————————————————————————第4层——————————————————————————————————————
426
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=7, x=0, y=0, z=70, lx=250, ly=160, lz=100}
Position{type=1, x=250, y=0, z=70, lx=80, ly=230, lz=80}
Position{type=5, x=0, y=160, z=70, lx=180, ly=70, lz=100}
Position{type=2, x=280, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=290, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=300, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=310, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=320, y=0, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [0, 7, 8, 10]  放进袋子  9  袋子种类为2
patten : [1, 0, 0, 1, 1, 0, 1, 0, 0, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[0, 7, 8, 10],9
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve modified 41 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 81 rows, 85 columns, and 399 nonzeros.
Reduced MIP has 72 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.40 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.74 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.74 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.74 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
*     0+    0                            2.0000        1.1416            42.92%
      0     0        1.1439     3        2.0000      Cuts: 20      216   42.81%
      0     0        1.1479     3        2.0000      Cuts: 13      241   42.61%
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 5, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=0, x=0, y=220, z=0, lx=60, ly=40, lz=50}
Position{type=2, x=60, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=70, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=80, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=90, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=100, y=220, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 11]  放进袋子  1  袋子种类为0
patten : [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 11],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_0,1':  0  = 1.
Presolve time = 0.00 sec. (0.10 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.10 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.10 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,1 + 1.0*s_11,1 - 1.0*n_1) <= 0.0无法将物品 [1, 11]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [7, 8]  放进袋子  2  袋子种类为0
patten : [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[7, 8],2
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 3 rows and 6 columns.
MIP Presolve modified 18 coefficients.
Aggregator did 7 substitutions.
Reduced MIP has 20 rows, 20 columns, and 85 nonzeros.
Reduced MIP has 15 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.16 ticks)
Probing fixed 8 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.02 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.32 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.32 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,2 + 1.0*s_8,2 - 1.0*n_2) <= 0.0无法将物品 [7, 8]  放进袋子 2 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [9, 10]  放进袋子  3  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 1, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_9,3 + 1.0*s_10,3 - 1.0*n_3) <= 0.0无法将物品 [9, 10]  放进袋子 3 袋子种类为0
needToSolve=false needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [7, 12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 1, 0, 0, 0, 0, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[7, 12],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 13 rows and 15 columns.
MIP Presolve modified 33 coefficients.
Aggregator did 10 substitutions.
Reduced MIP has 7 rows, 8 columns, and 24 nonzeros.
Reduced MIP has 6 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.17 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.21 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.21 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,5 + 1.0*s_12,5 - 1.0*n_5) <= 0.0无法将物品 [7, 12]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 0, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
104
——————————————————————————————————————————第4层——————————————————————————————————————
330
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 11, 8, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.1663     3        2.0000      Cuts: 28      294   41.68%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, -0.0]
将物品  [8]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[8],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 8 rows and 9 columns.
MIP Presolve modified 5 coefficients.
Aggregator did 6 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.03 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.04 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.04 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 7]  放进袋子  1  袋子种类为0
patten : [0, 0, 1, 1, 0, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2, 7],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 5 rows and 3 columns.
MIP Presolve modified 61 coefficients.
Aggregator did 5 substitutions.
Reduced MIP has 20 rows, 25 columns, and 70 nonzeros.
Reduced MIP has 20 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.16 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.25 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.25 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.25 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 4, 0, 1, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 1, 9, 0, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
308
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 9, 0, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.1952     3        2.0000      Cuts: 26      342   40.24%
      0     0        1.1985     3        2.0000       Cuts: 6      367   40.08%
      0     0        1.2127     3        2.0000      Cuts: 19      394   39.37%
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 8]  放进袋子  5  袋子种类为1
patten : [1, 0, 0, 0, 1, 0, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 8],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 26 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 26 rows, 28 columns, and 113 nonzeros.
Reduced MIP has 21 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.15 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.25 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.25 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.25 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
300
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2154     3        2.0000      Cuts: 11      427   39.23%
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0]
print n
[1.0, 1.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6]  放进袋子  0  袋子种类为0
patten : [0, 0, 5, 0, 0, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2, 3, 4, 5, 6],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 68 rows and 47 columns.
MIP Presolve modified 342 coefficients.
Aggregator did 10 substitutions.
Reduced MIP has 42 rows, 66 columns, and 124 nonzeros.
Reduced MIP has 63 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.49 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.64 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.65 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.65 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [12]  放进袋子  1  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[12],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 1 time.
MIP Presolve eliminated 14 rows and 15 columns.
MIP Presolve modified 4 coefficients.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.01 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.02 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.02 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[10, 11, 8, 7, 1, 9, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 - 6.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2238     3        2.0000      Cuts: 15      451   38.81%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
print n
[1.0, 1.249000902703301E-13, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [7]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[7],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 8 rows and 9 columns.
MIP Presolve modified 10 coefficients.
Aggregator did 6 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.04 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.04 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.04 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 0, 1, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
308
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2259     3        2.0000       Cuts: 7      458   38.71%
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
print n
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[12],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 9 rows and 10 columns.
MIP Presolve modified 4 coefficients.
Aggregator did 5 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.02 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.02 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.02 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2279     3        2.0000       Cuts: 7      466   38.61%
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
print n
[-0.0, -0.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2342     3        2.0000       Cuts: 7      483   38.29%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-1.249000902703189E-13, -0.0, -0.0, -0.0, -0.0, 1.249000902703189E-13, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
print n
[1.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 0, 1, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
308
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2381     3        2.0000      Cuts: 14      517   38.10%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
将物品  [12]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2392     3        2.0000       Cuts: 9      528   38.04%
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 1.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6]  放进袋子  0  袋子种类为0
patten : [1, 0, 5, 0, 0, 0, 0, 0, 0, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6]
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
108
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=0, x=0, y=0, z=0, lx=60, ly=50, lz=40}
Position{type=2, x=60, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=60, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=60, y=20, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=60, y=30, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=60, y=40, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [7]  放进袋子  1  袋子种类为0
patten : [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [1, 8, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 0, 1, 1, 1, 1, 1, 2]
pattern good
排序前[1, 8, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
排序后[10, 12, 11, 8, 1, 9]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
196
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 9]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 2.862364872759325E-13, 0.0, -0.0, 0.9999999999997138, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [8]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[8],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 7 rows and 8 columns.
MIP Presolve modified 12 coefficients.
Aggregator did 7 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.05 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.05 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.05 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2507     3        2.0000      Cuts: 30      578   37.46%
print s[i]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, -0.0]
将物品  [11]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 8 rows and 9 columns.
MIP Presolve modified 6 coefficients.
Aggregator did 6 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.04 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.04 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.04 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 0, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
126
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2544     3        2.0000      Cuts: 20      612   37.28%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
print n
[0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 1.0, -0.0]
将物品  [0, 2, 3, 4, 5, 12]  放进袋子  5  袋子种类为1
patten : [1, 0, 4, 0, 0, 0, 0, 0, 1, 1]
pattern good
排序前[0, 2, 3, 4, 5, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=0, x=280, y=0, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=280, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=290, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=300, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=310, y=60, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 1, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[1, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
336
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
12
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 8]  放进袋子  5  袋子种类为1
patten : [1, 0, 4, 0, 1, 0, 0, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 8]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
60
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=4, x=0, y=0, z=0, lx=210, ly=160, lz=100}
Position{type=0, x=210, y=0, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=210, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=60, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 1, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[1, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
300
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
168
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2565     3        2.0000      Cuts: 31      638   37.17%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, -0.0]
将物品  [12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2635     3        2.0000      Cuts: 24      683   36.82%
print s[i]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 1.2490009027030613E-13, -1.2490009027030613E-13, -0.0, -0.0, -0.0]
print n
[1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
将物品  [2, 12]  放进袋子  0  袋子种类为0
patten : [0, 0, 1, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2, 12],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 1 time.
MIP Presolve eliminated 24 rows and 24 columns.
MIP Presolve modified 46 coefficients.
Reduced MIP has 6 rows, 9 columns, and 18 nonzeros.
Reduced MIP has 9 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.06 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.08 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.08 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.08 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 4, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2642     3        2.0000      Cuts: 21      698   36.79%
print s[i]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -1.8616222693822686E-13, 0.0, 0.0, -0.0, 1.8616222693822686E-13, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
将物品  [12]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2693     3        2.0000      Cuts: 13      723   36.53%
print s[i]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2730     3        2.0000      Cuts: 17      738   36.35%
      0     0        1.2753     3        2.0000      Cuts: 20      750   36.23%
print s[i]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -1.2490009027032324E-13, 0.0, -0.0, -0.0, 1.2490009027032324E-13, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6, 12]  放进袋子  0  袋子种类为0
patten : [0, 0, 5, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[2, 3, 4, 5, 6, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
18
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=2, x=280, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=280, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=280, y=20, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=280, y=30, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=280, y=40, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [0, 1, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[10, 11, 8, 7, 1, 9, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 - 6.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-1.6130845187960846E-13, 0.0, 0.0, 0.0, 0.0, 1.6130845187960846E-13, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6, 8]  放进袋子  0  袋子种类为0
patten : [0, 0, 5, 0, 1, 0, 0, 0, 0, 0]
pattern good
排序前[2, 3, 4, 5, 6, 8]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
42
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=4, x=0, y=0, z=0, lx=210, ly=160, lz=100}
Position{type=2, x=210, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=20, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=30, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=40, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [0, 1, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[10, 12, 11, 7, 1, 9, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
64
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 - 6.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2766     3        2.0000      Cuts: 18      761   36.17%
print s[i]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
print n
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 12],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 15 rows and 15 columns.
MIP Presolve modified 42 coefficients.
Aggregator did 5 substitutions.
Reduced MIP has 10 rows, 13 columns, and 36 nonzeros.
Reduced MIP has 12 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.08 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.13 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.13 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.13 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
336
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 8]  放进袋子  0  袋子种类为0
patten : [1, 0, 0, 0, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 8],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 3 columns.
MIP Presolve modified 33 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 23 rows, 26 columns, and 97 nonzeros.
Reduced MIP has 20 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.15 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.24 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.24 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.24 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
300
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2795     3        2.0000       Cuts: 9      775   36.02%
print s[i]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0]
print n
[1.0, 1.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
将物品  [12]  放进袋子  1  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2813     3        2.0000      Cuts: 16      796   35.93%
print s[i]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
print n
[0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 1.0, 0.0]
将物品  [12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2837     3        2.0000       Cuts: 7      817   35.82%
print s[i]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
print n
[-0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2847     3        2.0000      Cuts: 19      833   35.77%
print s[i]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [8]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2850     3        2.0000      Cuts: 14      849   35.75%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [8]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2858     3        2.0000      Cuts: 14      883   35.71%
print s[i]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 12]  放进袋子  5  袋子种类为1
patten : [1, 0, 4, 0, 0, 0, 0, 0, 1, 1]
pattern good
排序前[0, 2, 3, 4, 5, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=0, x=280, y=0, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=280, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=290, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=300, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=310, y=60, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 1, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[1, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
336
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
12
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2861     3        2.0000      Cuts: 13      893   35.70%
print s[i]
[1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
print n
[1.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
将物品  [0, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
336
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
print n
[1.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
将物品  [0, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
336
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0000000000000213, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[0.9999999999999801, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0000000000000013, -0.0]
print n
[1.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 7, 8]  放进袋子  0  袋子种类为0
patten : [1, 0, 2, 1, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 2, 3, 7, 8],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 7 rows and 9 columns.
MIP Presolve modified 288 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 107 rows, 108 columns, and 446 nonzeros.
Reduced MIP has 92 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.80 ticks)
Probing fixed 8 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.12 ticks)
Cover probing fixed 0 vars, tightened 7 bounds.
Tried aggregator 2 times.
MIP Presolve eliminated 20 rows and 30 columns.
MIP Presolve modified 36 coefficients.
Aggregator did 1 substitutions.
Reduced MIP has 86 rows, 77 columns, and 346 nonzeros.
Reduced MIP has 61 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.41 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (3.92 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (3.92 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_7,0 + 1.0*s_8,0 - 4.0*n_0) <= 0.0无法将物品 [0, 2, 3, 7, 8]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [1, 4, 5, 6, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 3, 0, 0, 1, 1, 1, 1, 2]
pattern good
排序前[1, 4, 5, 6, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 1, 9, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
84
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 7.0*n_8) <= 0.0无法将物品 [10, 12, 11, 1, 9, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
print n
[1.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 2, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 2, 3, 12],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 12 rows and 15 columns.
MIP Presolve modified 227 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 69 rows, 70 columns, and 249 nonzeros.
Reduced MIP has 57 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (0.34 ticks)
Found incumbent of value 0.000000 after 0.02 sec. (0.57 ticks)

Root node processing (before b&c):
  Real time             =    0.02 sec. (0.58 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.02 sec. (0.58 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 3, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[1, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
336
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 1.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
print n
[1.0, 1.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 2, 0, 0, 0, 0, 0, 1, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [7, 8]  放进袋子  1  袋子种类为0
patten : [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_7,1 + 1.0*s_8,1 - 1.0*n_1) <= 0.0无法将物品 [7, 8]  放进袋子 1 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [1, 4, 5, 6, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 3, 0, 0, 1, 1, 1, 0, 2]
pattern good
排序前[1, 4, 5, 6, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 1, 9, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
196
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=200, ly=150, lz=150}
Position{type=7, x=0, y=150, z=0, lx=250, ly=100, lz=160}
Position{type=1, x=250, y=0, z=0, lx=80, ly=230, lz=80}
Position{type=5, x=250, y=0, z=80, lx=100, ly=180, lz=70}
Position{type=2, x=200, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=0, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 1.0, 0.0]
将物品  [0, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 0, 0, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 30 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 26 rows, 27 columns, and 111 nonzeros.
Reduced MIP has 20 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.15 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.27 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.28 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.28 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 1, 1, 1, 1, 0, 1, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
282
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 1, 9, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     2        1.2863    56        2.0000        1.2864      893   35.68%
Elapsed time = 11.02 sec. (55.40 ticks, tree = 0.01 MB, solutions = 1)
print s[i]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 8, 9]  放进袋子  0  袋子种类为0
patten : [1, 0, 0, 0, 1, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 8, 9],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 5 columns.
MIP Presolve modified 53 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 44 rows, 46 columns, and 201 nonzeros.
Reduced MIP has 36 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.29 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.46 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.46 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.46 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 1, 0, 0, 1, 1, 1, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 9.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 8, 9]  放进袋子  0  袋子种类为0
patten : [1, 0, 1, 0, 1, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 2, 8, 9],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 5 columns.
MIP Presolve modified 162 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 74 rows, 76 columns, and 320 nonzeros.
Reduced MIP has 63 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.55 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.84 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.84 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.84 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 3, 4, 5, 6, 7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 4, 1, 0, 0, 1, 1, 1, 2]
pattern good
排序前[1, 3, 4, 5, 6, 7, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0000000000000009, -0.0]
[0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 8, 9]  放进袋子  0  袋子种类为0
patten : [1, 1, 0, 0, 1, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 1, 8, 9],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 5 times.
MIP Presolve eliminated 12 rows and 20 columns.
MIP Presolve modified 110 coefficients.
Aggregator did 16 substitutions.
Reduced MIP has 55 rows, 51 columns, and 242 nonzeros.
Reduced MIP has 40 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.78 ticks)
Probing fixed 19 vars, tightened 10 bounds.
Probing time = 0.00 sec. (0.05 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Tried aggregator 2 times.
MIP Presolve eliminated 35 rows and 30 columns.
MIP Presolve modified 75 coefficients.
Aggregator did 3 substitutions.
Reduced MIP has 17 rows, 18 columns, and 58 nonzeros.
Reduced MIP has 14 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.13 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.35 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.35 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,0 + 1.0*s_1,0 + 1.0*s_8,0 + 1.0*s_9,0 - 3.0*n_0) <= 0.0无法将物品 [0, 1, 8, 9]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [2, 3, 4, 5, 6, 7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 5, 1, 0, 0, 1, 1, 1, 2]
pattern good
排序前[2, 3, 4, 5, 6, 7, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
120
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 8, 9]  放进袋子  0  袋子种类为0
patten : [0, 1, 1, 0, 1, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 2, 8, 9],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 5 times.
MIP Presolve eliminated 28 rows and 26 columns.
MIP Presolve added 1 rows and 0 columns.
MIP Presolve modified 183 coefficients.
Aggregator did 15 substitutions.
Reduced MIP has 41 rows, 46 columns, and 146 nonzeros.
Reduced MIP has 37 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.73 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.96 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.96 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,0 + 1.0*s_2,0 + 1.0*s_8,0 + 1.0*s_9,0 - 3.0*n_0) <= 0.0无法将物品 [1, 2, 8, 9]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 3, 4, 5, 6, 7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 4, 1, 0, 0, 1, 1, 1, 2]
pattern good
排序前[0, 3, 4, 5, 6, 7, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 0, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
120
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 0, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 8]  放进袋子  0  袋子种类为0
patten : [1, 1, 1, 0, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 1, 2, 8],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 5 times.
MIP Presolve eliminated 8 rows and 15 columns.
MIP Presolve modified 180 coefficients.
Aggregator did 12 substitutions.
Reduced MIP has 63 rows, 60 columns, and 242 nonzeros.
Reduced MIP has 47 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.81 ticks)
Probing fixed 13 vars, tightened 10 bounds.
Probing time = 0.00 sec. (0.04 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Tried aggregator 1 time.
MIP Presolve eliminated 34 rows and 26 columns.
MIP Presolve modified 58 coefficients.
Reduced MIP has 29 rows, 34 columns, and 106 nonzeros.
Reduced MIP has 24 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.12 ticks)

Root node processing (before b&c):
  Real time             =    0.02 sec. (2.34 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.02 sec. (2.34 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,0 + 1.0*s_1,0 + 1.0*s_2,0 + 1.0*s_8,0 - 3.0*n_0) <= 0.0无法将物品 [0, 1, 2, 8]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 4, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 9, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
52
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 9, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 8, 9]  放进袋子  0  袋子种类为0
patten : [1, 0, 5, 0, 1, 1, 0, 0, 0, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6, 8, 9]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
4
——————————————————————————————————————————第3层——————————————————————————————————————
30
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=4, x=0, y=0, z=0, lx=210, ly=160, lz=100}
Position{type=5, x=0, y=160, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=180, y=160, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=210, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=20, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=30, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=40, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 1, 0, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 7, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 122 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 114 rows, 115 columns, and 568 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.10 ticks)
Probing fixed 5 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.15 ticks)
Cover probing fixed 0 vars, tightened 22 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 5 columns.
MIP Presolve modified 71 coefficients.
Reduced MIP has 113 rows, 110 columns, and 548 nonzeros.
Reduced MIP has 94 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.53 ticks)
Probing fixed 0 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.13 ticks)
Cover probing fixed 0 vars, tightened 6 bounds.
Clique table members: 138.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.33 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    23                      0.0000       41         
      0     0        0.0000    23                     Cuts: 8       46         
      0     0        0.0000    23                    Cuts: 35       71         
      0     0        0.0000    23                     Cuts: 9       80         
      0     2        0.0000     7                      0.0000       80         
Elapsed time = 0.19 sec. (15.56 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  2
Clique cuts applied:  1
Cover cuts applied:  24
Implied bound cuts applied:  45
Flow cuts applied:  5
Mixed integer rounding cuts applied:  10
Gomory fractional cuts applied:  7

Root node processing (before b&c):
  Real time             =    0.11 sec. (15.50 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.22 sec. (11.32 ticks)
  Sync time (average)   =    0.11 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.33 sec. (26.83 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,8 + 1.0*s_7,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [1, 7, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 6, 8]  放进袋子  0  袋子种类为0
patten : [0, 1, 5, 0, 1, 0, 0, 0, 0, 0]
pattern good
排序前[1, 2, 3, 4, 5, 6, 8]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
26
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_8,0 + 1.0*s_1,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 + 1.0*s_6,0 - 6.0*n_0) <= 0.0无法将物品 [8, 1, 2, 3, 4, 5, 6]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 0, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[10, 12, 11, 7, 9, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
52
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_0,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 9, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 8]  放进袋子  0  袋子种类为0
patten : [0, 1, 2, 0, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 2, 3, 8],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 6 times.
MIP Presolve eliminated 39 rows and 32 columns.
MIP Presolve added 2 rows and 0 columns.
MIP Presolve modified 226 coefficients.
Aggregator did 14 substitutions.
Reduced MIP has 32 rows, 41 columns, and 96 nonzeros.
Reduced MIP has 33 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.70 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.81 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.82 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.82 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 9]  放进袋子  1  袋子种类为0
patten : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 9],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 27 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 26 rows, 28 columns, and 113 nonzeros.
Reduced MIP has 21 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.15 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.25 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.25 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.25 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [4, 5, 6, 7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 3, 1, 0, 0, 1, 1, 1, 2]
pattern good
排序前[4, 5, 6, 7, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
120
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 8]  放进袋子  0  袋子种类为0
patten : [0, 1, 3, 0, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 2, 3, 4, 8],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 5 times.
MIP Presolve eliminated 52 rows and 42 columns.
MIP Presolve added 1 rows and 0 columns.
MIP Presolve modified 377 coefficients.
Aggregator did 13 substitutions.
Reduced MIP has 56 rows, 68 columns, and 170 nonzeros.
Reduced MIP has 56 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.96 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.15 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.15 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.15 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 9]  放进袋子  1  袋子种类为0
patten : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [5, 6, 7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 1, 0, 0, 1, 1, 1, 2]
pattern good
排序前[5, 6, 7, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
120
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_5,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 8]  放进袋子  0  袋子种类为0
patten : [0, 1, 2, 0, 1, 0, 0, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 7, 9]  放进袋子  1  袋子种类为0
patten : [1, 0, 0, 1, 0, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 7, 9],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 5 columns.
MIP Presolve modified 51 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 44 rows, 46 columns, and 201 nonzeros.
Reduced MIP has 36 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.28 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.46 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.46 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.46 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [4, 5, 6, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 3, 0, 0, 0, 1, 1, 1, 2]
pattern good
排序前[4, 5, 6, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 8]  放进袋子  0  袋子种类为0
patten : [0, 1, 3, 0, 1, 0, 0, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 7, 9]  放进袋子  1  袋子种类为0
patten : [1, 0, 0, 1, 0, 1, 0, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [5, 6, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 0, 0, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[5, 6, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 6 rows and 5 columns.
MIP Presolve modified 316 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 108 rows, 112 columns, and 451 nonzeros.
Reduced MIP has 96 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.96 ticks)
Found incumbent of value 0.000000 after 0.02 sec. (1.51 ticks)

Root node processing (before b&c):
  Real time             =    0.02 sec. (1.52 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.02 sec. (1.52 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
*    19    14      integral     0        1.8000        1.2946     1128   28.08%
print s[i]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[10],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 9 rows and 10 columns.
MIP Presolve modified 5 coefficients.
Aggregator did 5 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.03 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.03 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.03 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
48
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 7, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 4, 1, 0, 0, 1, 0, 0, 1]
pattern good
排序前[2, 3, 4, 5, 7, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 7, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
30
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_7,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 - 5.0*n_5) <= 0.0无法将物品 [10, 7, 2, 3, 4, 5]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 6, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 1, 0, 1, 1, 0, 1, 1, 2]
pattern good
排序前[0, 1, 6, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 1, 9, 0, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
29
——————————————————————————————————————————第4层——————————————————————————————————————
122
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [12, 11, 8, 1, 9, 0, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 9, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 4, 0, 0, 1, 1, 0, 0, 1]
pattern good
排序前[2, 3, 4, 5, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 9, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
20
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=200, ly=150, lz=150}
Position{type=5, x=0, y=150, z=0, lx=180, ly=70, lz=100}
Position{type=2, x=180, y=150, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=150, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=180, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=160, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [0, 1, 6, 7, 8, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 1, 1, 1, 0, 0, 1, 1, 2]
pattern good
排序前[0, 1, 6, 7, 8, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 7, 1, 0, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
223
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_0,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 1, 0, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 4, 0, 0, 0, 1, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
88
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=200, ly=150, lz=150}
Position{type=0, x=200, y=0, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=200, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=60, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 6, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 1, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[1, 6, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 7, 1, 9, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
48
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
312
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 1, 9, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 9, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 4, 0, 0, 1, 1, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 9, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
20
——————————————————————————————————————————第3层——————————————————————————————————————
344
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=200, ly=150, lz=150}
Position{type=5, x=0, y=150, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=0, y=150, z=100, lx=60, ly=50, lz=40}
Position{type=2, x=180, y=150, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=150, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=180, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=160, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 6, 7, 8, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 1, 1, 1, 0, 0, 1, 1, 2]
pattern good
排序前[1, 6, 7, 8, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 7, 1, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 1, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 8, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 4, 0, 1, 0, 1, 0, 0, 1]
pattern good
排序前[2, 3, 4, 5, 8, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 - 5.0*n_5) <= 0.0无法将物品 [10, 8, 2, 3, 4, 5]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 6, 7, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 1, 1, 0, 1, 0, 1, 1, 2]
pattern good
排序前[0, 1, 6, 7, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 7, 1, 9, 0, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
31
——————————————————————————————————————————第4层——————————————————————————————————————
127
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=7, x=0, y=220, z=0, lx=250, ly=100, lz=160}
Position{type=3, x=0, y=0, z=70, lx=140, ly=200, lz=100}
Position{type=5, x=140, y=0, z=70, lx=100, ly=180, lz=70}
Position{type=0, x=140, y=180, z=70, lx=60, ly=40, lz=50}
Position{type=2, x=240, y=0, z=70, lx=10, ly=10, lz=10}
Position{type=1, x=250, y=0, z=70, lx=80, ly=230, lz=80}
needToSolve=true needToAddCut=false
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 10]  放进袋子  0  袋子种类为0
patten : [1, 0, 5, 0, 0, 0, 1, 0, 0, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 + 1.0*s_6,0 - 6.0*n_0) <= 0.0无法将物品 [10, 0, 2, 3, 4, 5, 6]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [1, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[1, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
排序后[12, 11, 8, 7, 1, 9]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
48
——————————————————————————————————————————第5层——————————————————————————————————————
16
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 - 5.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 1, 9]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 10]  放进袋子  0  袋子种类为0
patten : [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 1, 10],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Row 'width_1,0' infeasible, all entries at implied bounds.
Presolve time = 0.00 sec. (0.15 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.16 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.16 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,0 + 1.0*s_1,0 + 1.0*s_10,0 - 2.0*n_0) <= 0.0无法将物品 [0, 1, 10]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [2, 3, 4, 5, 6, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 5, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[2, 3, 4, 5, 6, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 7, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
60
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 9.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 9, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 10]  放进袋子  0  袋子种类为0
patten : [0, 1, 2, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 2, 3, 10],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Row 'width_0,0' infeasible, all entries at implied bounds.
Presolve time = 0.02 sec. (0.26 ticks)

Root node processing (before b&c):
  Real time             =    0.02 sec. (0.29 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.02 sec. (0.29 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_10,0 - 3.0*n_0) <= 0.0无法将物品 [1, 2, 3, 10]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 4, 5, 6, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 3, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[0, 4, 5, 6, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 7, 9, 0, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
60
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 9, 0, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 7, 8, 9]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 1, 1, 1, 0, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 8, 9]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 7, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
15
——————————————————————————————————————————第3层——————————————————————————————————————
28
——————————————————————————————————————————第4层——————————————————————————————————————
330
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
haha
Position{type=4, x=0, y=0, z=0, lx=210, ly=160, lz=100}
Position{type=3, x=0, y=160, z=0, lx=200, ly=140, lz=100}
Position{type=5, x=210, y=0, z=0, lx=70, ly=180, lz=100}
Position{type=0, x=200, y=180, z=0, lx=60, ly=50, lz=40}
Position{type=2, x=200, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=170, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=260, y=180, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=270, y=180, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=260, y=190, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 0, 0, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 91 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 77 rows, 79 columns, and 371 nonzeros.
Reduced MIP has 66 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.72 ticks)
Probing fixed 4 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.11 ticks)
Cover probing fixed 0 vars, tightened 13 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 4 columns.
MIP Presolve modified 49 coefficients.
Reduced MIP has 76 rows, 75 columns, and 354 nonzeros.
Reduced MIP has 62 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.33 ticks)
Probing time = 0.00 sec. (0.09 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Clique table members: 111.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.15 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    15                      0.0000       29         
      0     0        0.0000    15                     Cuts: 8       35         
      0     0        0.0000    15                    Cuts: 32       61         
      0     0        0.0000    15                     Cuts: 2       64         
      0     0        0.0000    15                     Cuts: 2       66         
      0     2        0.0000     2                      0.0000       66         
Elapsed time = 0.11 sec. (8.53 ticks, tree = 0.02 MB, solutions = 0)

Cover cuts applied:  15
Implied bound cuts applied:  41
Flow cuts applied:  3
Mixed integer rounding cuts applied:  6
Zero-half cuts applied:  1
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             =    0.09 sec. (8.49 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.03 sec. (9.43 ticks)
  Sync time (average)   =    0.01 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.13 sec. (17.92 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 3.0*n_8) <= 0.0无法将物品 [1, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  放进袋子  5  袋子种类为1
patten : [1, 1, 5, 1, 1, 1, 0, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
15
——————————————————————————————————————————第3层——————————————————————————————————————
29
——————————————————————————————————————————第4层——————————————————————————————————————
316
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 9.0*n_5) <= 0.0无法将物品 [8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 0, 0, 0, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 50 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 47 rows, 49 columns, and 216 nonzeros.
Reduced MIP has 39 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.42 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.81 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.82 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.82 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 7, 8, 9]  放进袋子  5  袋子种类为1
patten : [1, 1, 3, 1, 1, 1, 0, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 7, 8, 9]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 7, 1, 9, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
15
——————————————————————————————————————————第3层——————————————————————————————————————
29
——————————————————————————————————————————第4层——————————————————————————————————————
316
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 7.0*n_5) <= 0.0无法将物品 [8, 7, 1, 9, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [5, 6, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 0, 0, 0, 1, 1, 1, 2]
pattern good
needToSolve=false needToAddCut=false
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 8, 9]  放进袋子  5  袋子种类为1
patten : [1, 1, 4, 0, 1, 1, 0, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 8, 9]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 1, 9, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
20
——————————————————————————————————————————第3层——————————————————————————————————————
98
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=4, x=0, y=0, z=0, lx=210, ly=160, lz=100}
Position{type=1, x=0, y=160, z=0, lx=230, ly=80, lz=80}
Position{type=5, x=0, y=240, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=180, y=240, z=0, lx=50, ly=60, lz=40}
Position{type=2, x=210, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=10, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [6, 7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 1, 1, 0, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[6, 7, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 3 rows and 2 columns.
MIP Presolve modified 232 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 111 rows, 115 columns, and 508 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (1.05 ticks)
Probing fixed 3 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.15 ticks)
Cover probing fixed 0 vars, tightened 20 bounds.
Tried aggregator 1 time.
MIP Presolve eliminated 7 rows and 12 columns.
MIP Presolve modified 63 coefficients.
Reduced MIP has 104 rows, 103 columns, and 477 nonzeros.
Reduced MIP has 87 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.34 ticks)
Probing fixed 2 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.13 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 23 coefficients.
Reduced MIP has 104 rows, 101 columns, and 470 nonzeros.
Reduced MIP has 85 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.39 ticks)
Probing time = 0.00 sec. (0.14 ticks)
Clique table members: 167.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.19 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    23                      0.0000       36         
      0     0        0.0000    23                    Cuts: 12       49         
      0     0        0.0000    23                    Cuts: 29       66         
      0     0        0.0000    23                 Flowcuts: 2       71         
      0     2        0.0000     7                      0.0000       71         
Elapsed time = 0.06 sec. (14.14 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  1
Clique cuts applied:  2
Cover cuts applied:  23
Implied bound cuts applied:  37
Flow cuts applied:  6
Mixed integer rounding cuts applied:  5
Gomory fractional cuts applied:  5

Root node processing (before b&c):
  Real time             =    0.05 sec. (14.08 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.03 sec. (10.07 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.08 sec. (24.15 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_6,8 + 1.0*s_7,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [6, 7, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999998, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 7, 8]  放进袋子  5  袋子种类为1
patten : [1, 1, 3, 1, 1, 0, 0, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 7, 8]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 7, 1, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
15
——————————————————————————————————————————第3层——————————————————————————————————————
130
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 6.0*n_5) <= 0.0无法将物品 [8, 7, 1, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [5, 6, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 0, 0, 1, 1, 1, 1, 2]
pattern good
排序前[5, 6, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
94
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_9,8 + 1.0*s_5,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 9, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999998, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 7, 8, 9]  放进袋子  5  袋子种类为1
patten : [0, 1, 3, 1, 1, 1, 0, 0, 0, 1]
pattern good
排序前[1, 2, 3, 4, 7, 8, 9]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 7, 1, 9, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
15
——————————————————————————————————————————第3层——————————————————————————————————————
29
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 6.0*n_5) <= 0.0无法将物品 [8, 7, 1, 9, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 5, 6, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 2, 0, 0, 0, 1, 1, 1, 2]
pattern good
排序前[0, 5, 6, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 0, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
412
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_0,8 + 1.0*s_5,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 0, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999998, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 7, 8]  放进袋子  5  袋子种类为1
patten : [0, 1, 4, 1, 1, 0, 0, 0, 0, 1]
pattern good
排序前[1, 2, 3, 4, 5, 7, 8]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 7, 1, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
15
——————————————————————————————————————————第3层——————————————————————————————————————
222
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 - 6.0*n_5) <= 0.0无法将物品 [8, 7, 1, 2, 3, 4, 5]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 6, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 1, 0, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 6, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 9, 0, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
94
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 9, 0, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999998, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 7]  放进袋子  5  袋子种类为1
patten : [1, 1, 4, 1, 0, 0, 0, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 7]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 1, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=3, x=0, y=0, z=0, lx=200, ly=140, lz=100}
Position{type=1, x=0, y=140, z=0, lx=230, ly=80, lz=80}
Position{type=0, x=200, y=0, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=200, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=60, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [6, 8, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 1, 0, 1, 1, 1, 1, 1, 2]
pattern good
排序前[6, 8, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 9, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
74
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 9, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999998, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 7, 9]  放进袋子  5  袋子种类为1
patten : [0, 1, 4, 1, 0, 1, 0, 0, 0, 1]
pattern good
排序前[1, 2, 3, 4, 5, 7, 9]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 1, 9, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
30
——————————————————————————————————————————第3层——————————————————————————————————————
264
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 - 6.0*n_5) <= 0.0无法将物品 [7, 1, 9, 2, 3, 4, 5]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 6, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 1, 0, 1, 0, 1, 1, 1, 2]
pattern good
排序前[0, 6, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 0, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
368
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_0,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 0, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 7, 9]  放进袋子  5  袋子种类为1
patten : [1, 1, 3, 1, 0, 1, 0, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 7, 9]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 1, 9, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
30
——————————————————————————————————————————第3层——————————————————————————————————————
214
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 6.0*n_5) <= 0.0无法将物品 [7, 1, 9, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [5, 6, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 0, 1, 0, 1, 1, 1, 2]
pattern good
排序前[5, 6, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_5,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, -0.0, 0.0, 0.0]
将物品  [1, 2, 3, 4, 5, 6, 9, 10, 11]  放进袋子  5  袋子种类为1
patten : [0, 1, 5, 0, 0, 1, 1, 1, 0, 1]
pattern good
排序前[1, 2, 3, 4, 5, 6, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
192
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_11,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 8.0*n_5) <= 0.0无法将物品 [10, 11, 1, 9, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 7, 8, 12]  放进袋子  6  袋子种类为1
patten : [1, 0, 0, 1, 1, 0, 0, 0, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 7, 8, 12],6
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 13 rows and 17 columns.
MIP Presolve modified 131 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 61 rows, 61 columns, and 277 nonzeros.
Reduced MIP has 48 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.63 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.98 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.98 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,6 + 1.0*s_7,6 + 1.0*s_8,6 + 1.0*s_12,6 - 3.0*n_6) <= 0.0无法将物品 [0, 7, 8, 12]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 1.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, -0.0, 0.0, 0.0]
将物品  [2, 3, 4, 7, 10, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 3, 1, 0, 0, 1, 1, 0, 1]
pattern good
排序前[2, 3, 4, 7, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 7, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_11,5 + 1.0*s_7,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 5.0*n_5) <= 0.0无法将物品 [10, 11, 7, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 5, 6, 8, 9, 12]  放进袋子  6  袋子种类为1
patten : [1, 1, 2, 0, 1, 1, 0, 0, 1, 1]
pattern good
排序前[0, 1, 5, 6, 8, 9, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 8, 1, 9, 0, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
10
——————————————————————————————————————————第3层——————————————————————————————————————
100
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,6 + 1.0*s_8,6 + 1.0*s_1,6 + 1.0*s_9,6 + 1.0*s_0,6 + 1.0*s_5,6 + 1.0*s_6,6 - 6.0*n_6) <= 0.0无法将物品 [12, 8, 1, 9, 0, 5, 6]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
将物品  [7, 8]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_7,0 + 1.0*s_8,0 - 1.0*n_0) <= 0.0无法将物品 [7, 8]  放进袋子 0 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [0, 2, 3, 4, 5, 6, 9, 11]  放进袋子  1  袋子种类为0
patten : [1, 0, 5, 0, 0, 1, 0, 1, 0, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
1
——————————————————————————————————————————第3层——————————————————————————————————————
6
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=5, x=0, y=160, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=180, y=160, z=0, lx=60, ly=50, lz=40}
Position{type=2, x=240, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=170, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=180, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=190, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=200, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 10, 12]  放进袋子  5  袋子种类为1
patten : [0, 1, 0, 0, 0, 0, 1, 0, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1, 10, 12],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_1,2':  0  = 1.
Presolve time = 0.00 sec. (0.38 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.38 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.38 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,5 + 1.0*s_10,5 + 1.0*s_12,5 - 2.0*n_5) <= 0.0无法将物品 [1, 10, 12]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
将物品  [1, 2, 3, 8]  放进袋子  0  袋子种类为0
patten : [0, 1, 2, 0, 1, 0, 0, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 4, 5, 6, 9, 12]  放进袋子  1  袋子种类为0
patten : [1, 0, 3, 0, 0, 1, 0, 0, 1, 0]
pattern good
排序前[0, 4, 5, 6, 9, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 9, 0, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,1 + 1.0*s_9,1 + 1.0*s_0,1 + 1.0*s_4,1 + 1.0*s_5,1 + 1.0*s_6,1 - 5.0*n_1) <= 0.0无法将物品 [12, 9, 0, 4, 5, 6]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [7, 10, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 1, 0, 0, 1, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[7, 10, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 6 times.
MIP Presolve eliminated 7 rows and 14 columns.
MIP Presolve modified 77 coefficients.
Aggregator did 12 substitutions.
Reduced MIP has 34 rows, 31 columns, and 142 nonzeros.
Reduced MIP has 22 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.59 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.95 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.95 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,5 + 1.0*s_10,5 + 1.0*s_11,5 - 2.0*n_5) <= 0.0无法将物品 [7, 10, 11]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
将物品  [1, 2, 3, 11]  放进袋子  0  袋子种类为0
patten : [0, 1, 2, 0, 0, 0, 0, 1, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 2, 3, 11],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Row 'xi_0,3' infeasible, all entries at implied bounds.
Presolve time = 0.00 sec. (0.43 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.45 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.45 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_11,0 - 3.0*n_0) <= 0.0无法将物品 [1, 2, 3, 11]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 4, 5, 9, 12]  放进袋子  1  袋子种类为0
patten : [1, 0, 2, 0, 0, 1, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 4, 5, 9, 12],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_3,4':  0  = 1.
Presolve time = 0.00 sec. (0.37 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.40 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.40 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,1 + 1.0*s_4,1 + 1.0*s_5,1 + 1.0*s_9,1 + 1.0*s_12,1 - 4.0*n_1) <= 0.0无法将物品 [0, 4, 5, 9, 12]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [6, 7, 8, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 1, 1, 1, 0, 1, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[6, 7, 8, 10],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 4 rows and 2 columns.
MIP Presolve modified 136 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 75 rows, 81 columns, and 329 nonzeros.
Reduced MIP has 68 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.50 ticks)
Probing fixed 4 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.09 ticks)
Cover probing fixed 0 vars, tightened 13 bounds.
Tried aggregator 1 time.
MIP Presolve eliminated 7 rows and 13 columns.
MIP Presolve modified 53 coefficients.
Reduced MIP has 68 rows, 68 columns, and 295 nonzeros.
Reduced MIP has 55 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.22 ticks)
Probing fixed 4 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.08 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 4 columns.
MIP Presolve modified 15 coefficients.
Reduced MIP has 68 rows, 64 columns, and 280 nonzeros.
Reduced MIP has 51 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.24 ticks)
Probing time = 0.00 sec. (0.08 ticks)
Clique table members: 108.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.12 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    16                      0.0000       26         
      0     0        0.0000    16                   Covers: 1       31         
      0     0        0.0000    16                    Cuts: 13       43         
      0     0        0.0000    16                     Cuts: 9       50         
      0     0        cutoff                                         50         
Elapsed time = 0.03 sec. (7.72 ticks, tree = 0.01 MB, solutions = 0)

GUB cover cuts applied:  1
Clique cuts applied:  1
Implied bound cuts applied:  1
Flow cuts applied:  1
Mixed integer rounding cuts applied:  1

Root node processing (before b&c):
  Real time             =    0.03 sec. (7.72 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.03 sec. (7.72 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_6,5 + 1.0*s_7,5 + 1.0*s_8,5 + 1.0*s_10,5 - 3.0*n_5) <= 0.0无法将物品 [6, 7, 8, 10]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
将物品  [2, 3, 4, 5, 9, 12]  放进袋子  0  袋子种类为0
patten : [0, 0, 4, 0, 0, 1, 0, 0, 1, 0]
pattern good
排序前[2, 3, 4, 5, 9, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 9, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
18
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,0 + 1.0*s_9,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 - 5.0*n_0) <= 0.0无法将物品 [12, 9, 2, 3, 4, 5]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 1, 10]  放进袋子  1  袋子种类为0
patten : [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_0,1 + 1.0*s_1,1 + 1.0*s_10,1 - 2.0*n_1) <= 0.0无法将物品 [0, 1, 10]  放进袋子 1 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [6, 7, 8, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 1, 1, 1, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[6, 7, 8, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 8 rows and 12 columns.
MIP Presolve modified 156 coefficients.
Aggregator did 8 substitutions.
Reduced MIP has 67 rows, 67 columns, and 274 nonzeros.
Reduced MIP has 54 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.58 ticks)
Probing time = 0.00 sec. (0.08 ticks)
Cover probing fixed 0 vars, tightened 6 bounds.
Tried aggregator 1 time.
MIP Presolve eliminated 11 rows and 10 columns.
MIP Presolve modified 30 coefficients.
Reduced MIP has 56 rows, 57 columns, and 238 nonzeros.
Reduced MIP has 45 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.18 ticks)
Probing time = 0.00 sec. (0.08 ticks)
Tried aggregator 2 times.
Detecting symmetries...
MIP Presolve modified 6 coefficients.
Aggregator did 3 substitutions.
Reduced MIP has 53 rows, 54 columns, and 232 nonzeros.
Reduced MIP has 45 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.22 ticks)
Probing fixed 2 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.10 ticks)
Clique table members: 162.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.15 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    14                      0.0000       24         
      0     0        0.0000    14                     Cuts: 9       26         
      0     0        0.0000    14                     Cuts: 7       32         
      0     0        0.0000    14                    Cuts: 10       38         
      0     0        cutoff                                         38         
Elapsed time = 0.03 sec. (5.55 ticks, tree = 0.01 MB, solutions = 0)

GUB cover cuts applied:  1
Clique cuts applied:  6
Cover cuts applied:  2
Implied bound cuts applied:  2
Mixed integer rounding cuts applied:  5
Zero-half cuts applied:  2
Gomory fractional cuts applied:  2

Root node processing (before b&c):
  Real time             =    0.03 sec. (5.55 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.03 sec. (5.55 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_6,5 + 1.0*s_7,5 + 1.0*s_8,5 + 1.0*s_11,5 - 3.0*n_5) <= 0.0无法将物品 [6, 7, 8, 11]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 0, 0, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 1, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 1 rows and 5 columns.
MIP Presolve modified 60 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 43 rows, 43 columns, and 187 nonzeros.
Reduced MIP has 33 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.42 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.58 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.58 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.58 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [2, 3, 4, 5, 6, 7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 5, 1, 1, 1, 1, 0, 1, 2]
pattern good
排序前[2, 3, 4, 5, 6, 7, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 9.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 9, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0000000000000004, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 7, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 0, 1, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 7, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 1 rows and 6 columns.
MIP Presolve modified 57 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 46 rows, 45 columns, and 205 nonzeros.
Reduced MIP has 35 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.36 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.57 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.57 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.57 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 0, 1, 1, 1, 0, 1, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
412
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 9.0*n_8) <= 0.0无法将物品 [10, 12, 8, 1, 9, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 7, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 0, 1, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 1, 7, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 2 rows and 9 columns.
MIP Presolve modified 96 coefficients.
Aggregator did 11 substitutions.
Reduced MIP has 70 rows, 67 columns, and 314 nonzeros.
Reduced MIP has 54 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.75 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.14 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.15 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.15 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [2, 3, 4, 5, 6, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 5, 0, 1, 1, 1, 0, 1, 2]
pattern good
排序前[2, 3, 4, 5, 6, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
74
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 8, 9, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999994, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999994, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 1, 0, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 2, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 107 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 49 rows, 51 columns, and 199 nonzeros.
Reduced MIP has 41 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.33 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.51 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.51 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.51 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 3, 4, 5, 6, 7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 4, 1, 1, 1, 1, 0, 1, 2]
pattern good
排序前[1, 3, 4, 5, 6, 7, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 1, 9, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
282
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 9.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 1, 9, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999994, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 1, 0, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 1, 2, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 1 rows and 5 columns.
MIP Presolve modified 168 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 73 rows, 73 columns, and 301 nonzeros.
Reduced MIP has 60 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.76 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.03 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.03 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.03 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [3, 4, 5, 6, 7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 4, 1, 1, 1, 1, 0, 1, 2]
pattern good
排序前[3, 4, 5, 6, 7, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 9, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 9, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999994, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 7, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 1, 1, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 2, 7, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 1 rows and 6 columns.
MIP Presolve modified 165 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 76 rows, 75 columns, and 324 nonzeros.
Reduced MIP has 62 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.67 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.96 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.96 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.96 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 3, 4, 5, 6, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 4, 0, 1, 1, 1, 0, 1, 2]
pattern good
排序前[1, 3, 4, 5, 6, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 1, 9, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
412
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 8, 1, 9, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 7, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 1, 1, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 1, 2, 7, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 2 rows and 9 columns.
MIP Presolve modified 235 coefficients.
Aggregator did 11 substitutions.
Reduced MIP has 107 rows, 103 columns, and 459 nonzeros.
Reduced MIP has 87 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.23 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.65 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.66 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.66 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [3, 4, 5, 6, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 4, 0, 1, 1, 1, 0, 1, 2]
pattern good
排序前[3, 4, 5, 6, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 9, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
74
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 7.0*n_8) <= 0.0无法将物品 [10, 12, 8, 9, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 0, 0, 0, 1, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 9, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 54 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 49 rows, 51 columns, and 226 nonzeros.
Reduced MIP has 41 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.30 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.50 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.50 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.50 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 7, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 1, 1, 0, 1, 0, 1, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 9.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 1, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 1, 0, 0, 1, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 2, 9, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 158 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 79 rows, 81 columns, and 347 nonzeros.
Reduced MIP has 68 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.57 ticks)
Found incumbent of value 0.000000 after 0.02 sec. (0.87 ticks)

Root node processing (before b&c):
  Real time             =    0.02 sec. (0.88 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.02 sec. (0.88 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 3, 4, 5, 6, 7, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 4, 1, 1, 0, 1, 0, 1, 2]
pattern good
排序前[1, 3, 4, 5, 6, 7, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 1, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 1, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999993, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 0, 0, 0, 1, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 1, 9, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 1 rows and 5 columns.
MIP Presolve modified 92 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 73 rows, 73 columns, and 337 nonzeros.
Reduced MIP has 60 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.72 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.01 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.02 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.02 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [2, 3, 4, 5, 6, 7, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 5, 1, 1, 0, 1, 0, 1, 2]
pattern good
排序前[2, 3, 4, 5, 6, 7, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
112
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 1, 0, 0, 1, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 1, 2, 9, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 1 rows and 5 columns.
MIP Presolve modified 227 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 110 rows, 109 columns, and 484 nonzeros.
Reduced MIP has 93 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.19 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.61 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.62 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.62 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [3, 4, 5, 6, 7, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 4, 1, 1, 0, 1, 0, 1, 2]
pattern good
排序前[3, 4, 5, 6, 7, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
112
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 7.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 7, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 0, 1, 0, 1, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 7, 9, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 1 rows and 6 columns.
MIP Presolve modified 89 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 76 rows, 75 columns, and 360 nonzeros.
Reduced MIP has 62 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.63 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.96 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.96 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.96 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 0, 1, 0, 1, 0, 1, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 8, 1, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 7, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 1, 1, 0, 1, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 2, 7, 9, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 1 rows and 6 columns.
MIP Presolve modified 224 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 113 rows, 111 columns, and 512 nonzeros.
Reduced MIP has 95 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.06 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.56 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.57 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.57 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 3, 4, 5, 6, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 4, 0, 1, 0, 1, 0, 1, 2]
pattern good
排序前[1, 3, 4, 5, 6, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 1, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 7.0*n_8) <= 0.0无法将物品 [10, 12, 8, 1, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 7, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 0, 1, 0, 1, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 1, 7, 9, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 2 rows and 9 columns.
MIP Presolve modified 136 coefficients.
Aggregator did 11 substitutions.
Reduced MIP has 107 rows, 103 columns, and 504 nonzeros.
Reduced MIP has 87 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.17 ticks)
Probing fixed 1 vars, tightened 0 bounds.
Probing time = 0.02 sec. (0.18 ticks)
Cover probing fixed 0 vars, tightened 10 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 1 columns.
MIP Presolve modified 43 coefficients.
Reduced MIP has 106 rows, 102 columns, and 497 nonzeros.
Reduced MIP has 86 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.45 ticks)
Probing time = 0.00 sec. (0.19 ticks)
Clique table members: 267.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.22 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    24                      0.0000       43         
      0     0        0.0000    24                    Fract: 1       44         
      0     0        0.0000    24                    Cuts: 11       54         
      0     0        0.0000    24                    Cuts: 13       70         
Detecting symmetries...
      0     2        0.0000     6                      0.0000       70         
Elapsed time = 0.05 sec. (11.43 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  1
Clique cuts applied:  1
Cover cuts applied:  23
Implied bound cuts applied:  67
Flow cuts applied:  7
Mixed integer rounding cuts applied:  4
Gomory fractional cuts applied:  6

Root node processing (before b&c):
  Real time             =    0.03 sec. (11.38 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.06 sec. (16.40 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.09 sec. (27.78 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,5 + 1.0*s_1,5 + 1.0*s_7,5 + 1.0*s_9,5 + 1.0*s_11,5 - 4.0*n_5) <= 0.0无法将物品 [0, 1, 7, 9, 11]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [2, 3, 4, 5, 6, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 5, 0, 1, 0, 1, 0, 1, 2]
pattern good
排序前[2, 3, 4, 5, 6, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 7.0*n_8) <= 0.0无法将物品 [10, 12, 8, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 7, 9, 11]  放进袋子  5  袋子种类为1
patten : [0, 1, 1, 1, 0, 1, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1, 2, 7, 9, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 3 rows and 9 columns.
MIP Presolve modified 215 coefficients.
Aggregator did 11 substitutions.
Reduced MIP has 106 rows, 103 columns, and 449 nonzeros.
Reduced MIP has 87 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.17 ticks)
Probing fixed 3 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.17 ticks)
Cover probing fixed 0 vars, tightened 7 bounds.
Tried aggregator 1 time.
MIP Presolve eliminated 6 rows and 12 columns.
MIP Presolve modified 30 coefficients.
Reduced MIP has 100 rows, 91 columns, and 420 nonzeros.
Reduced MIP has 75 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.29 ticks)
Probing fixed 1 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.17 ticks)
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 2 coefficients.
Reduced MIP has 100 rows, 90 columns, and 418 nonzeros.
Reduced MIP has 74 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.25 ticks)
Probing time = 0.00 sec. (0.16 ticks)
Clique table members: 210.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.17 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    26                      0.0000       35         
      0     0        0.0000    26                     Cuts: 3       38         
      0     0        0.0000    26                    Cuts: 11       49         
      0     0        0.0000    26                    Cuts: 23       70         
      0     0        cutoff                                         70         
Elapsed time = 0.03 sec. (12.04 ticks, tree = 0.01 MB, solutions = 0)

GUB cover cuts applied:  1
Clique cuts applied:  2
Implied bound cuts applied:  2
Flow cuts applied:  1

Root node processing (before b&c):
  Real time             =    0.03 sec. (12.04 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.03 sec. (12.04 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,5 + 1.0*s_2,5 + 1.0*s_7,5 + 1.0*s_9,5 + 1.0*s_11,5 - 4.0*n_5) <= 0.0无法将物品 [1, 2, 7, 9, 11]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 3, 4, 5, 6, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 4, 0, 1, 0, 1, 0, 1, 2]
pattern good
排序前[0, 3, 4, 5, 6, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 0, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
368
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 7.0*n_8) <= 0.0无法将物品 [10, 12, 8, 0, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0000000000000004, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 3, 0, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 2, 3, 4, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 9 rows and 11 columns.
MIP Presolve modified 340 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 107 rows, 108 columns, and 411 nonzeros.
Reduced MIP has 92 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.74 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.11 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.12 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.12 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 5, 6, 7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 2, 1, 1, 1, 1, 0, 1, 2]
pattern good
排序前[1, 5, 6, 7, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 1, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
282
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_5,8 + 1.0*s_6,8 - 7.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 1, 9, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 3, 0, 0, 0, 0, 1, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 1, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
260
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=1, x=0, y=160, z=0, lx=230, ly=80, lz=80}
Position{type=0, x=230, y=160, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=250, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=260, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=250, y=10, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [5, 6, 7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 1, 1, 1, 1, 0, 1, 2]
pattern good
排序前[5, 6, 7, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 9, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 7, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 3, 1, 0, 0, 0, 1, 0, 1]
pattern good
排序前[0, 2, 3, 4, 7, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
106
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=3, x=0, y=160, z=0, lx=200, ly=140, lz=100}
Position{type=0, x=200, y=160, z=0, lx=50, ly=60, lz=40}
Position{type=2, x=200, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=220, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 5, 6, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 2, 0, 1, 1, 1, 0, 1, 2]
pattern good
排序前[1, 5, 6, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 1, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
412
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 12, 8, 1, 9, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 7, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 3, 1, 0, 0, 0, 1, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 7, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 1, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
88
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 6.0*n_5) <= 0.0无法将物品 [11, 7, 1, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [5, 6, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 0, 1, 1, 1, 0, 1, 2]
pattern good
排序前[5, 6, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
74
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_5,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 8, 9, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 0, 0, 0, 0, 1, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
48
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=0, x=250, y=0, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=250, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=260, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=270, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=280, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=250, y=70, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 1, 1, 1, 1, 0, 1, 2]
pattern good
排序前[1, 7, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
排序后[10, 12, 8, 7, 1, 9]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
78
——————————————————————————————————————————第5层——————————————————————————————————————
28
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 1, 9]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 5, 0, 0, 0, 0, 1, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 1, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
260
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=1, x=0, y=160, z=0, lx=230, ly=80, lz=80}
Position{type=0, x=230, y=160, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=250, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=260, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=250, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=260, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=250, y=20, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 0, 1, 1, 1, 1, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[7, 8, 9, 10, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 76 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 116 rows, 118 columns, and 584 nonzeros.
Reduced MIP has 102 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.78 ticks)
Probing fixed 2 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.14 ticks)
Cover probing fixed 0 vars, tightened 21 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 65 coefficients.
Reduced MIP has 116 rows, 116 columns, and 577 nonzeros.
Reduced MIP has 100 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.53 ticks)
Probing fixed 1 vars, tightened 4 bounds.
Probing time = 0.00 sec. (0.14 ticks)
Cover probing fixed 0 vars, tightened 8 bounds.
Clique table members: 130.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.34 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    20                      0.0000       44         
      0     0        0.0000    20                     Cuts: 7       49         
      0     0        0.0000    20                    Cuts: 38       67         
      0     0        0.0000    20                    Cuts: 18       89         
      0     0        0.0000    20                     Cuts: 7       99         
      0     0        0.0000    20                    Cuts: 21      115         
      0     2        0.0000    11                      0.0000      115         
Elapsed time = 0.05 sec. (19.76 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  3
Clique cuts applied:  6
Cover cuts applied:  27
Implied bound cuts applied:  29
Flow cuts applied:  15
Mixed integer rounding cuts applied:  20
Zero-half cuts applied:  2
Gomory fractional cuts applied:  6

Root node processing (before b&c):
  Real time             =    0.05 sec. (19.69 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.05 sec. (19.78 ticks)
  Sync time (average)   =    0.02 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.09 sec. (39.46 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,8 + 1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_10,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [7, 8, 9, 10, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999999998, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 0, 0, 1, 0, 1, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
18
——————————————————————————————————————————第3层——————————————————————————————————————
324
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=5, x=0, y=160, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=180, y=160, z=0, lx=60, ly=50, lz=40}
Position{type=2, x=240, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=170, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=180, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=190, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=200, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 7, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 1, 1, 0, 1, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 7, 8, 10, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 89 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 116 rows, 118 columns, and 584 nonzeros.
Reduced MIP has 102 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.78 ticks)
Probing fixed 3 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.15 ticks)
Cover probing fixed 0 vars, tightened 32 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 3 columns.
MIP Presolve modified 71 coefficients.
Reduced MIP has 116 rows, 115 columns, and 572 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.55 ticks)
Probing fixed 0 vars, tightened 4 bounds.
Probing time = 0.00 sec. (0.12 ticks)
Cover probing fixed 0 vars, tightened 8 bounds.
Clique table members: 97.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.31 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    23                      0.0000       25         
      0     0        0.0000    23                     Cuts: 8       33         
      0     0        0.0000    23                    Cuts: 36       53         
      0     0        0.0000    23                    Cuts: 40       79         
      0     2        0.0000     6                      0.0000       79         
Elapsed time = 0.08 sec. (14.77 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  6
Clique cuts applied:  15
Cover cuts applied:  56
Implied bound cuts applied:  42
Flow cuts applied:  9
Mixed integer rounding cuts applied:  22
Zero-half cuts applied:  2
Gomory fractional cuts applied:  15

Root node processing (before b&c):
  Real time             =    0.09 sec. (14.70 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.13 sec. (54.25 ticks)
  Sync time (average)   =    0.03 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.22 sec. (68.95 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,8 + 1.0*s_7,8 + 1.0*s_8,8 + 1.0*s_10,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [1, 7, 8, 10, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 5, 0, 0, 1, 0, 1, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
50
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=1, x=250, y=0, z=0, lx=80, ly=230, lz=80}
Position{type=5, x=0, y=160, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=180, y=160, z=0, lx=60, ly=50, lz=40}
Position{type=2, x=240, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=170, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=180, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=190, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=200, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [7, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 0, 1, 1, 0, 1, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[7, 8, 10, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 54 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 79 rows, 82 columns, and 385 nonzeros.
Reduced MIP has 69 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.51 ticks)
Probing fixed 2 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.10 ticks)
Cover probing fixed 0 vars, tightened 19 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 49 coefficients.
Reduced MIP has 79 rows, 80 columns, and 378 nonzeros.
Reduced MIP has 67 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.34 ticks)
Probing fixed 1 vars, tightened 4 bounds.
Probing time = 0.00 sec. (0.09 ticks)
Cover probing fixed 0 vars, tightened 6 bounds.
Clique table members: 89.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.22 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    12                      0.0000       30         
      0     0        0.0000    12                  MIRcuts: 1       32         
      0     0        0.0000    12                    Cuts: 17       41         
      0     0        0.0000    12                    Cuts: 10       54         
      0     0        0.0000    12                     Cuts: 4       57         
      0     0        0.0000    12                  MIRcuts: 4       64         
      0     2        0.0000     2                      0.0000       64         
Elapsed time = 0.03 sec. (10.18 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  1
Clique cuts applied:  3
Cover cuts applied:  30
Implied bound cuts applied:  35
Flow cuts applied:  5
Mixed integer rounding cuts applied:  9
Gomory fractional cuts applied:  5

Root node processing (before b&c):
  Real time             =    0.03 sec. (10.15 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.03 sec. (11.22 ticks)
  Sync time (average)   =    0.01 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (21.37 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,8 + 1.0*s_8,8 + 1.0*s_10,8 + 1.0*s_12,8 - 3.0*n_8) <= 0.0无法将物品 [7, 8, 10, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 7, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 1, 0, 0, 0, 1, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
106
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=3, x=0, y=160, z=0, lx=200, ly=140, lz=100}
Position{type=0, x=200, y=160, z=0, lx=50, ly=60, lz=40}
Position{type=2, x=200, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=220, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 0, 1, 1, 1, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 8, 9, 10, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 87 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 116 rows, 118 columns, and 584 nonzeros.
Reduced MIP has 102 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.78 ticks)
Probing fixed 2 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.14 ticks)
Cover probing fixed 0 vars, tightened 19 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 64 coefficients.
Reduced MIP has 116 rows, 116 columns, and 575 nonzeros.
Reduced MIP has 100 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.55 ticks)
Probing fixed 0 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.12 ticks)
Cover probing fixed 0 vars, tightened 8 bounds.
Clique table members: 105.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.30 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    20                      0.0000       22         
      0     2        0.0000    10                      0.0000       22         
Elapsed time = 0.03 sec. (10.90 ticks, tree = 0.02 MB, solutions = 0)

Cover cuts applied:  31
Implied bound cuts applied:  25
Flow cuts applied:  3
Mixed integer rounding cuts applied:  3
Gomory fractional cuts applied:  5

Root node processing (before b&c):
  Real time             =    0.03 sec. (10.85 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.03 sec. (13.22 ticks)
  Sync time (average)   =    0.02 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (24.07 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,8 + 1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_10,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [1, 8, 9, 10, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 7, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 1, 0, 1, 0, 1, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
59
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_7,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 8.0*n_5) <= 0.0无法将物品 [11, 7, 9, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 0, 1, 0, 1, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 8, 10, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 63 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 79 rows, 82 columns, and 385 nonzeros.
Reduced MIP has 69 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.51 ticks)
Probing fixed 2 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.10 ticks)
Cover probing fixed 0 vars, tightened 17 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 49 coefficients.
Reduced MIP has 79 rows, 80 columns, and 376 nonzeros.
Reduced MIP has 67 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.35 ticks)
Probing fixed 0 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.08 ticks)
Cover probing fixed 0 vars, tightened 6 bounds.
Clique table members: 74.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.22 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    12                      0.0000       29         
      0     0        0.0000    12                     Cuts: 4       33         
      0     0        0.0000    12                     Cuts: 9       43         
      0     0        0.0000    12                     Cuts: 8       54         
      0     2        0.0000     7                      0.0000       55         
Elapsed time = 0.02 sec. (6.98 ticks, tree = 0.02 MB, solutions = 0)
*   383+   20                            0.0000        0.0000             0.00%

GUB cover cuts applied:  1
Cover cuts applied:  14
Implied bound cuts applied:  22
Flow cuts applied:  6
Mixed integer rounding cuts applied:  3
Zero-half cuts applied:  1
Gomory fractional cuts applied:  7

Root node processing (before b&c):
  Real time             =    0.02 sec. (6.94 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.02 sec. (6.37 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.03 sec. (13.31 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0000000000000002, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 7, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 3, 1, 0, 1, 0, 1, 0, 1]
pattern good
排序前[0, 2, 3, 4, 7, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 9, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
59
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_7,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 6.0*n_5) <= 0.0无法将物品 [11, 7, 9, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 5, 6, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 2, 0, 1, 0, 1, 0, 1, 2]
pattern good
排序前[1, 5, 6, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 1, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_5,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 8, 1, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6, 7, 9, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 5, 1, 0, 1, 0, 1, 0, 1]
pattern good
排序前[2, 3, 4, 5, 6, 7, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
125
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_7,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 7.0*n_5) <= 0.0无法将物品 [11, 7, 9, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 0, 1, 0, 1, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[0, 1, 8, 10, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 107 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 116 rows, 118 columns, and 584 nonzeros.
Reduced MIP has 102 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.78 ticks)
Probing fixed 1 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.14 ticks)
Cover probing fixed 0 vars, tightened 30 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 64 coefficients.
Reduced MIP has 116 rows, 117 columns, and 579 nonzeros.
Reduced MIP has 101 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.53 ticks)
Probing fixed 0 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.13 ticks)
Cover probing fixed 0 vars, tightened 8 bounds.
Clique table members: 101.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.31 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    24                      0.0000       25         
      0     0        0.0000    24                     Cuts: 3       29         
      0     0        0.0000    24                    Cuts: 25       45         
      0     0        0.0000    24                     Cuts: 3       53         
      0     0        0.0000    24                    Cuts: 21       66         
*     0+    0                            0.0000        0.0000             0.00%
      0     0        cutoff              0.0000        0.0000       66    0.00%
Elapsed time = 0.03 sec. (15.04 ticks, tree = 0.01 MB, solutions = 1)

GUB cover cuts applied:  2
Clique cuts applied:  2
Cover cuts applied:  3
Implied bound cuts applied:  1
Flow cuts applied:  8
Mixed integer rounding cuts applied:  8
Gomory fractional cuts applied:  5

Root node processing (before b&c):
  Real time             =    0.03 sec. (15.04 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.03 sec. (15.04 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 7, 9, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 4, 1, 0, 1, 0, 1, 0, 1]
pattern good
排序前[2, 3, 4, 5, 7, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 9, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
125
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_7,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 - 6.0*n_5) <= 0.0无法将物品 [11, 7, 9, 2, 3, 4, 5]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 6, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 1, 0, 1, 0, 1, 0, 1, 2]
pattern good
排序前[0, 1, 6, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 1, 0, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_0,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 8, 1, 0, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 8, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 0, 1, 0, 0, 1, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 8, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 8, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
23
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_8,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 7.0*n_5) <= 0.0无法将物品 [11, 8, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 7, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 1, 0, 1, 1, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 7, 9, 10, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 87 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 116 rows, 118 columns, and 584 nonzeros.
Reduced MIP has 102 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.78 ticks)
Probing fixed 2 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.14 ticks)
Cover probing fixed 0 vars, tightened 19 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 64 coefficients.
Reduced MIP has 116 rows, 116 columns, and 575 nonzeros.
Reduced MIP has 100 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.55 ticks)
Probing fixed 0 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.12 ticks)
Cover probing fixed 0 vars, tightened 8 bounds.
Clique table members: 101.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.30 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    20                      0.0000       22         
      0     0        0.0000    20                     Cuts: 8       34         
      0     0        0.0000    20                    Cuts: 58       62         
      0     0        0.0000    20                     Cuts: 3       68         
      0     0        0.0000    20                     Cuts: 5       76         
*     0+    0                            0.0000        0.0000             0.00%
      0     0        cutoff              0.0000        0.0000       76    0.00%
Elapsed time = 0.01 sec. (12.55 ticks, tree = 0.01 MB, solutions = 1)

GUB cover cuts applied:  2
Clique cuts applied:  2
Cover cuts applied:  3
Implied bound cuts applied:  1
Flow cuts applied:  4
Mixed integer rounding cuts applied:  7
Gomory fractional cuts applied:  4

Root node processing (before b&c):
  Real time             =    0.01 sec. (12.55 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.01 sec. (12.55 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6, 8, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 5, 0, 1, 0, 0, 1, 0, 1]
pattern good
排序前[2, 3, 4, 5, 6, 8, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 8, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
23
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_8,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 6.0*n_5) <= 0.0无法将物品 [11, 8, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 7, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 1, 0, 1, 1, 0, 1, 2]
pattern good
排序前[0, 1, 7, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[10, 12, 7, 1, 9, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=200, ly=150, lz=150}
Position{type=8, x=0, y=0, z=150, lx=280, ly=220, lz=70}
Position{type=3, x=0, y=150, z=0, lx=200, ly=100, lz=140}
Position{type=1, x=200, y=0, z=0, lx=80, ly=230, lz=80}
Position{type=5, x=200, y=0, z=80, lx=100, ly=180, lz=70}
Position{type=0, x=200, y=180, z=80, lx=60, ly=50, lz=40}
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.000000000000001, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 8, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 4, 0, 1, 0, 0, 1, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 8, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 8, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
23
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_8,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 - 6.0*n_5) <= 0.0无法将物品 [11, 8, 0, 2, 3, 4, 5]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 6, 7, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 1, 1, 0, 1, 1, 0, 1, 2]
pattern good
排序前[1, 6, 7, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 7, 1, 9, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
300
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=200, ly=150, lz=150}
Position{type=8, x=0, y=0, z=150, lx=280, ly=220, lz=70}
Position{type=3, x=0, y=150, z=0, lx=200, ly=100, lz=140}
Position{type=1, x=200, y=0, z=0, lx=80, ly=230, lz=80}
Position{type=5, x=200, y=0, z=80, lx=100, ly=180, lz=70}
Position{type=2, x=280, y=0, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 8, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 4, 0, 1, 0, 0, 1, 0, 1]
pattern good
排序前[2, 3, 4, 5, 8, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 8, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
23
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_8,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 - 5.0*n_5) <= 0.0无法将物品 [11, 8, 2, 3, 4, 5]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 6, 7, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 1, 1, 0, 1, 1, 0, 1, 2]
pattern good
排序前[0, 1, 6, 7, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 7, 1, 9, 0, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 12, 7, 1, 9, 0, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, -0.0, 0.0, 0.0]
将物品  [0, 1, 8, 9, 12]  放进袋子  5  袋子种类为1
patten : [1, 1, 0, 0, 1, 1, 0, 0, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 1, 8, 9, 12],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 12 rows and 19 columns.
MIP Presolve modified 204 coefficients.
Aggregator did 14 substitutions.
Reduced MIP has 94 rows, 90 columns, and 422 nonzeros.
Reduced MIP has 74 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (1.11 ticks)

Root node processing (before b&c):
  Real time             =    0.01 sec. (1.64 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.01 sec. (1.64 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,5 + 1.0*s_1,5 + 1.0*s_8,5 + 1.0*s_9,5 + 1.0*s_12,5 - 4.0*n_5) <= 0.0无法将物品 [0, 1, 8, 9, 12]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [2, 3, 4, 5, 6, 7, 10, 11]  放进袋子  6  袋子种类为1
patten : [0, 0, 5, 1, 0, 0, 1, 1, 0, 1]
pattern good
排序前[2, 3, 4, 5, 6, 7, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 7, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,6 + 1.0*s_11,6 + 1.0*s_7,6 + 1.0*s_2,6 + 1.0*s_3,6 + 1.0*s_4,6 + 1.0*s_5,6 + 1.0*s_6,6 - 7.0*n_6) <= 0.0无法将物品 [10, 11, 7, 2, 3, 4, 5, 6]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
将物品  [2, 3, 9, 10]  放进袋子  0  袋子种类为0
patten : [0, 0, 2, 0, 0, 1, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2, 3, 9, 10],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 13 rows and 14 columns.
MIP Presolve modified 209 coefficients.
Aggregator did 8 substitutions.
Reduced MIP has 62 rows, 65 columns, and 211 nonzeros.
Reduced MIP has 52 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.47 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.80 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.80 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_9,0 + 1.0*s_10,0 - 3.0*n_0) <= 0.0无法将物品 [2, 3, 9, 10]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 1, 4, 5, 6, 12]  放进袋子  1  袋子种类为0
patten : [1, 1, 3, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 1, 4, 5, 6, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 1, 0, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,1 + 1.0*s_1,1 + 1.0*s_0,1 + 1.0*s_4,1 + 1.0*s_5,1 + 1.0*s_6,1 - 5.0*n_1) <= 0.0无法将物品 [12, 1, 0, 4, 5, 6]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [7, 8, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 1, 1, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[7, 8, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 2 rows and 9 columns.
MIP Presolve modified 50 coefficients.
Aggregator did 8 substitutions.
Reduced MIP has 43 rows, 40 columns, and 184 nonzeros.
Reduced MIP has 30 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.36 ticks)
Probing fixed 2 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.05 ticks)
Cover probing fixed 0 vars, tightened 6 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 4 rows and 4 columns.
MIP Presolve modified 30 coefficients.
Reduced MIP has 39 rows, 36 columns, and 158 nonzeros.
Reduced MIP has 28 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.15 ticks)
Probing fixed 2 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.06 ticks)
Clique table members: 93.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.10 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000     8                      0.0000       17         
      0     0        0.0000     8                    Cuts: 46       40         
      0     0        0.0000     8                    Cuts: 16       57         
      0     0        cutoff                                         64         
Elapsed time = 0.00 sec. (1.90 ticks, tree = 0.01 MB, solutions = 0)

GUB cover cuts applied:  2
Clique cuts applied:  10
Cover cuts applied:  1
Flow cuts applied:  1
Mixed integer rounding cuts applied:  1
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.90 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.90 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,5 + 1.0*s_8,5 + 1.0*s_11,5 - 2.0*n_5) <= 0.0无法将物品 [7, 8, 11]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, -0.0, 0.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 9, 11, 12]  放进袋子  5  袋子种类为1
patten : [1, 1, 5, 0, 0, 1, 0, 1, 1, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
10
——————————————————————————————————————————第3层——————————————————————————————————————
100
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_12,5 + 1.0*s_11,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 9.0*n_5) <= 0.0无法将物品 [12, 11, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [7, 8, 10]  放进袋子  6  袋子种类为1
patten : [0, 0, 0, 1, 1, 0, 1, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[7, 8, 10],6
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 33 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 49 rows, 52 columns, and 228 nonzeros.
Reduced MIP has 42 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.30 ticks)
Probing fixed 5 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.06 ticks)
Cover probing fixed 0 vars, tightened 9 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 5 columns.
MIP Presolve modified 43 coefficients.
Reduced MIP has 48 rows, 47 columns, and 209 nonzeros.
Reduced MIP has 37 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.21 ticks)
Probing fixed 1 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.04 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Clique table members: 45.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.14 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    15                      0.0000       23         
      0     0        0.0000    15                  MIRcuts: 1       27         
      0     0        0.0000    15                    Cuts: 15       45         
      0     0        0.0000    15                   Covers: 1       55         
      0     0        0.0000    15                     Cuts: 9       60         
      0     0        cutoff                                         60         
Elapsed time = 0.02 sec. (4.62 ticks, tree = 0.01 MB, solutions = 0)

Flow cuts applied:  4
Mixed integer rounding cuts applied:  2
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =    0.02 sec. (4.62 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.02 sec. (4.62 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,6 + 1.0*s_8,6 + 1.0*s_10,6 - 2.0*n_6) <= 0.0无法将物品 [7, 8, 10]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 7, 9]  放进袋子  0  袋子种类为0
patten : [1, 1, 4, 1, 0, 1, 0, 0, 0, 0]
pattern good
排序前[0, 1, 2, 3, 4, 5, 7, 9]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 1, 9, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
6
——————————————————————————————————————————第3层——————————————————————————————————————
40
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_7,0 + 1.0*s_1,0 + 1.0*s_9,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 - 7.0*n_0) <= 0.0无法将物品 [7, 1, 9, 0, 2, 3, 4, 5]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [6, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 1, 0, 1, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[6, 8, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 3 rows and 2 columns.
MIP Presolve modified 234 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 111 rows, 115 columns, and 508 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.05 ticks)
Probing fixed 3 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.16 ticks)
Cover probing fixed 0 vars, tightened 20 bounds.
Tried aggregator 1 time.
MIP Presolve eliminated 7 rows and 12 columns.
MIP Presolve modified 63 coefficients.
Reduced MIP has 104 rows, 103 columns, and 477 nonzeros.
Reduced MIP has 87 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.34 ticks)
Probing fixed 2 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.15 ticks)
Cover probing fixed 0 vars, tightened 2 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 23 coefficients.
Reduced MIP has 104 rows, 101 columns, and 470 nonzeros.
Reduced MIP has 85 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.39 ticks)
Probing time = 0.01 sec. (0.14 ticks)
Clique table members: 181.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.19 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    23                      0.0000       36         
      0     0        0.0000    23                     Cuts: 6       40         
      0     0        0.0000    23                    Cuts: 31       61         
      0     0        0.0000    23                     Cuts: 7       67         
      0     2        0.0000     4                      0.0000       67         
Elapsed time = 0.06 sec. (12.63 ticks, tree = 0.02 MB, solutions = 0)

Cover cuts applied:  24
Implied bound cuts applied:  42
Flow cuts applied:  5
Mixed integer rounding cuts applied:  4
Gomory fractional cuts applied:  1

Root node processing (before b&c):
  Real time             =    0.06 sec. (12.58 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.03 sec. (10.63 ticks)
  Sync time (average)   =    0.02 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.09 sec. (23.21 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_6,8 + 1.0*s_8,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [6, 8, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 6, 7, 9]  放进袋子  0  袋子种类为0
patten : [0, 1, 5, 1, 0, 1, 0, 0, 0, 0]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 9]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
6
——————————————————————————————————————————第3层——————————————————————————————————————
144
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_7,0 + 1.0*s_1,0 + 1.0*s_9,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 + 1.0*s_6,0 - 7.0*n_0) <= 0.0无法将物品 [7, 1, 9, 2, 3, 4, 5, 6]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 0, 0, 1, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[0, 8, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 143 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 114 rows, 115 columns, and 568 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (1.10 ticks)
Probing fixed 3 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.17 ticks)
Cover probing fixed 0 vars, tightened 20 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 3 columns.
MIP Presolve modified 70 coefficients.
Reduced MIP has 113 rows, 112 columns, and 554 nonzeros.
Reduced MIP has 96 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.51 ticks)
Probing fixed 0 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.16 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Clique table members: 180.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.34 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    23                      0.0000       44         
      0     0        0.0000    23                    Cuts: 18       60         
      0     0        0.0000    23                    Cuts: 38       87         
      0     0        0.0000    23                    Cuts: 25      112         
      0     2        0.0000     9                      0.0000      112         
Elapsed time = 0.05 sec. (14.77 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  2
Clique cuts applied:  4
Cover cuts applied:  28
Implied bound cuts applied:  31
Flow cuts applied:  8
Mixed integer rounding cuts applied:  9
Zero-half cuts applied:  1
Gomory fractional cuts applied:  6

Root node processing (before b&c):
  Real time             =    0.03 sec. (14.70 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.05 sec. (15.73 ticks)
  Sync time (average)   =    0.01 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.08 sec. (30.44 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,8 + 1.0*s_8,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [0, 8, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7]  放进袋子  0  袋子种类为0
patten : [1, 1, 5, 1, 0, 0, 0, 0, 0, 0]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 1, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
6
——————————————————————————————————————————第3层——————————————————————————————————————
40
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=3, x=0, y=0, z=0, lx=200, ly=140, lz=100}
Position{type=1, x=0, y=140, z=0, lx=230, ly=80, lz=80}
Position{type=0, x=200, y=0, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=200, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=70, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [8, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 0, 0, 1, 1, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[8, 9, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 108 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 114 rows, 115 columns, and 568 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.10 ticks)
Probing fixed 4 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.16 ticks)
Cover probing fixed 0 vars, tightened 22 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 4 columns.
MIP Presolve modified 66 coefficients.
Reduced MIP has 113 rows, 111 columns, and 553 nonzeros.
Reduced MIP has 95 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.51 ticks)
Probing fixed 2 vars, tightened 4 bounds.
Probing time = 0.00 sec. (0.17 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Clique table members: 206.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.02 sec. (0.36 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    24                      0.0000       45         
      0     0        0.0000    24                     Cuts: 9       54         
      0     0        0.0000    24                    Cuts: 52       78         
      0     0        0.0000    24                     Cuts: 8       88         
      0     0        0.0000    24                    Cuts: 40      110         
      0     2        0.0000     8                      0.0000      110         
Elapsed time = 0.03 sec. (15.37 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  3
Clique cuts applied:  3
Cover cuts applied:  22
Implied bound cuts applied:  35
Flow cuts applied:  16
Mixed integer rounding cuts applied:  16
Zero-half cuts applied:  1
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =    0.03 sec. (15.30 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.03 sec. (10.20 ticks)
  Sync time (average)   =    0.02 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.06 sec. (25.50 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [8, 9, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0000000000000004, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, -0.0, 0.0, 0.0]
将物品  [1, 2, 3, 4, 8, 9, 10]  放进袋子  5  袋子种类为1
patten : [0, 1, 3, 0, 1, 1, 1, 0, 0, 1]
pattern good
排序前[1, 2, 3, 4, 8, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 1, 9, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
194
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 6.0*n_5) <= 0.0无法将物品 [10, 8, 1, 9, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 5, 6, 7, 11, 12]  放进袋子  6  袋子种类为1
patten : [1, 0, 2, 1, 0, 0, 0, 1, 1, 1]
pattern good
排序前[0, 5, 6, 7, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 7, 0, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_12,6 + 1.0*s_11,6 + 1.0*s_7,6 + 1.0*s_0,6 + 1.0*s_5,6 + 1.0*s_6,6 - 5.0*n_6) <= 0.0无法将物品 [12, 11, 7, 0, 5, 6]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, -0.0, 0.0, 0.0]
将物品  [0, 1, 8, 9, 10]  放进袋子  5  袋子种类为1
patten : [1, 1, 0, 0, 1, 1, 1, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 1, 8, 9, 10],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 1 rows and 4 columns.
MIP Presolve modified 106 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 110 rows, 110 columns, and 531 nonzeros.
Reduced MIP has 94 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.08 ticks)
Probing fixed 6 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.13 ticks)
Cover probing fixed 0 vars, tightened 19 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 2 rows and 6 columns.
MIP Presolve modified 75 coefficients.
Reduced MIP has 108 rows, 104 columns, and 507 nonzeros.
Reduced MIP has 88 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.47 ticks)
Probing fixed 0 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.13 ticks)
Cover probing fixed 0 vars, tightened 6 bounds.
Clique table members: 158.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.32 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    30                      0.0000       47         
      0     0        0.0000    30                    Cuts: 16       76         
      0     0        0.0000    30                    Cuts: 42      106         
      0     0        0.0000    30                    Cuts: 32      136         
      0     0        0.0000    30                     Cuts: 3      142         
      0     0        cutoff                                        142         
Elapsed time = 0.02 sec. (13.80 ticks, tree = 0.01 MB, solutions = 0)

GUB cover cuts applied:  3
Clique cuts applied:  1
Cover cuts applied:  2
Implied bound cuts applied:  2
Flow cuts applied:  1
Mixed integer rounding cuts applied:  2
Zero-half cuts applied:  1
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =    0.02 sec. (13.81 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.02 sec. (13.81 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,5 + 1.0*s_1,5 + 1.0*s_8,5 + 1.0*s_9,5 + 1.0*s_10,5 - 4.0*n_5) <= 0.0无法将物品 [0, 1, 8, 9, 10]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [2, 3, 4, 5, 6, 7, 11, 12]  放进袋子  6  袋子种类为1
patten : [0, 0, 5, 1, 0, 0, 0, 1, 1, 1]
pattern good
排序前[2, 3, 4, 5, 6, 7, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 7, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,6 + 1.0*s_11,6 + 1.0*s_7,6 + 1.0*s_2,6 + 1.0*s_3,6 + 1.0*s_4,6 + 1.0*s_5,6 + 1.0*s_6,6 - 7.0*n_6) <= 0.0无法将物品 [12, 11, 7, 2, 3, 4, 5, 6]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0000000000000004, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, -0.0, 0.0, 0.0]
将物品  [2, 3, 4, 7, 8, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 3, 1, 1, 0, 1, 0, 0, 1]
pattern good
排序前[2, 3, 4, 7, 8, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 7, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 5.0*n_5) <= 0.0无法将物品 [10, 8, 7, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 5, 6, 9, 11, 12]  放进袋子  6  袋子种类为1
patten : [1, 1, 2, 0, 0, 1, 0, 1, 1, 1]
pattern good
排序前[0, 1, 5, 6, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 1, 9, 0, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
10
——————————————————————————————————————————第3层——————————————————————————————————————
100
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,6 + 1.0*s_11,6 + 1.0*s_1,6 + 1.0*s_9,6 + 1.0*s_0,6 + 1.0*s_5,6 + 1.0*s_6,6 - 6.0*n_6) <= 0.0无法将物品 [12, 11, 1, 9, 0, 5, 6]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, -0.0, 0.0, 0.0]
将物品  [0, 2, 3, 7, 8, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 2, 1, 1, 0, 1, 0, 0, 1]
pattern good
排序前[0, 2, 3, 7, 8, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 7, 0, 2, 3]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 - 5.0*n_5) <= 0.0无法将物品 [10, 8, 7, 0, 2, 3]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 4, 5, 6, 9, 11, 12]  放进袋子  6  袋子种类为1
patten : [0, 1, 3, 0, 0, 1, 0, 1, 1, 1]
pattern good
排序前[1, 4, 5, 6, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 1, 9, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
10
——————————————————————————————————————————第3层——————————————————————————————————————
156
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,6 + 1.0*s_11,6 + 1.0*s_1,6 + 1.0*s_9,6 + 1.0*s_4,6 + 1.0*s_5,6 + 1.0*s_6,6 - 6.0*n_6) <= 0.0无法将物品 [12, 11, 1, 9, 4, 5, 6]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 5, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=0, x=0, y=220, z=0, lx=60, ly=40, lz=50}
Position{type=2, x=60, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=70, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=80, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=90, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=100, y=220, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[1, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
排序后[10, 11, 8, 7, 1, 9]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
84
——————————————————————————————————————————第5层——————————————————————————————————————
16
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 - 5.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 12]  放进袋子  0  袋子种类为0
patten : [1, 1, 5, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 1, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_12,0 + 1.0*s_1,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 + 1.0*s_6,0 - 7.0*n_0) <= 0.0无法将物品 [12, 1, 0, 2, 3, 4, 5, 6]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 0, 0, 1, 1, 1, 1, 1, 0, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[7, 8, 9, 10, 11],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve modified 33 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 118 rows, 121 columns, and 600 nonzeros.
Reduced MIP has 105 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (0.61 ticks)
Probing fixed 3 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.13 ticks)
Cover probing fixed 0 vars, tightened 16 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 3 columns.
MIP Presolve modified 50 coefficients.
Reduced MIP has 118 rows, 118 columns, and 590 nonzeros.
Reduced MIP has 102 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.54 ticks)
Probing time = 0.00 sec. (0.12 ticks)
Cover probing fixed 0 vars, tightened 10 bounds.
Clique table members: 101.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.21 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    24                      0.0000       24         
      0     0        0.0000    24                    Fract: 1       27         
      0     0        0.0000    24                    Cuts: 14       37         
      0     0        0.0000    24                     Cuts: 9       46         
      0     2        0.0000    10                      0.0000       46         
Elapsed time = 0.05 sec. (14.88 ticks, tree = 0.02 MB, solutions = 0)
*  3982+  404                            0.0000        0.0000             0.00%

Clique cuts applied:  1
Cover cuts applied:  59
Implied bound cuts applied:  35
Flow cuts applied:  8
Mixed integer rounding cuts applied:  20
Lift and project cuts applied:  2
Gomory fractional cuts applied:  11

Root node processing (before b&c):
  Real time             =    0.03 sec. (14.83 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.14 sec. (59.09 ticks)
  Sync time (average)   =    0.05 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.17 sec. (73.91 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 12]  放进袋子  0  袋子种类为0
patten : [1, 1, 4, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 1, 2, 3, 4, 5, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 1, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,0 + 1.0*s_1,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 - 6.0*n_0) <= 0.0无法将物品 [12, 1, 0, 2, 3, 4, 5]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 0, 1, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 9, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
334
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=150, ly=150, lz=200}
Position{type=7, x=150, y=0, z=0, lx=160, ly=250, lz=100}
Position{type=4, x=150, y=0, z=100, lx=160, ly=210, lz=100}
Position{type=3, x=0, y=150, z=0, lx=140, ly=100, lz=200}
Position{type=2, x=150, y=210, z=100, lx=10, ly=10, lz=10}
Position{type=5, x=140, y=220, z=100, lx=180, ly=70, lz=100}
needToSolve=true needToAddCut=false
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 12]  放进袋子  0  袋子种类为0
patten : [1, 1, 3, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 1, 2, 3, 4, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 1, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,0 + 1.0*s_1,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 - 5.0*n_0) <= 0.0无法将物品 [12, 1, 0, 2, 3, 4]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
334
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 9, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0000000000000004, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0000000000000004, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 6, 12]  放进袋子  0  袋子种类为0
patten : [0, 1, 5, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[1, 2, 3, 4, 5, 6, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
18
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,0 + 1.0*s_1,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 + 1.0*s_6,0 - 6.0*n_0) <= 0.0无法将物品 [12, 1, 2, 3, 4, 5, 6]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 0, 0, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[10, 11, 8, 7, 9, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
234
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_0,8 - 5.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 9, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 9, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 0, 0, 0, 1, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 9, 12],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_1,2':  0  = 1.
Presolve time = 0.00 sec. (0.13 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.14 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.14 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,0 + 1.0*s_9,0 + 1.0*s_12,0 - 2.0*n_0) <= 0.0无法将物品 [0, 9, 12]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [1, 2, 3, 4, 5, 6, 7, 8, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 1, 1, 0, 1, 1, 0, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 8, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 9.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 9, 12]  放进袋子  0  袋子种类为0
patten : [0, 0, 2, 0, 0, 1, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2, 3, 9, 12],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_2,3':  0  = 1.
Presolve time = 0.00 sec. (0.21 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.23 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.23 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_9,0 + 1.0*s_12,0 - 3.0*n_0) <= 0.0无法将物品 [2, 3, 9, 12]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 1, 4, 5, 6, 7, 8, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 3, 1, 1, 0, 1, 1, 0, 2]
pattern good
排序前[0, 1, 4, 5, 6, 7, 8, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 0, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
398
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_0,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 0, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
将物品  [0, 2, 11]  放进袋子  0  袋子种类为0
patten : [1, 0, 1, 0, 0, 0, 0, 1, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 2, 11],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 8 rows and 10 columns.
MIP Presolve modified 113 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 41 rows, 43 columns, and 151 nonzeros.
Reduced MIP has 33 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (0.31 ticks)
Found incumbent of value 0.000000 after 0.02 sec. (0.45 ticks)

Root node processing (before b&c):
  Real time             =    0.02 sec. (0.46 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.02 sec. (0.46 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 3, 4, 5, 10]  放进袋子  1  袋子种类为0
patten : [0, 1, 3, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 3, 4, 5, 10],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Row 'width_0,1' infeasible, all entries at implied bounds.
Presolve time = 0.00 sec. (0.38 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.41 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.41 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,1 + 1.0*s_3,1 + 1.0*s_4,1 + 1.0*s_5,1 + 1.0*s_10,1 - 4.0*n_1) <= 0.0无法将物品 [1, 3, 4, 5, 10]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [7, 8]  放进袋子  2  袋子种类为0
patten : [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_7,2 + 1.0*s_8,2 - 1.0*n_2) <= 0.0无法将物品 [7, 8]  放进袋子 2 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [6, 9, 12]  放进袋子  3  袋子种类为0
patten : [0, 0, 1, 0, 0, 1, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[6, 9, 12],3
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_1,2':  0  = 1.
Presolve time = 0.00 sec. (0.12 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.13 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.13 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_6,3 + 1.0*s_9,3 + 1.0*s_12,3 - 2.0*n_3) <= 0.0无法将物品 [6, 9, 12]  放进袋子 3 袋子种类为0
needToSolve=true needToAddCut=true
print s[i]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
将物品  [2, 3, 10]  放进袋子  0  袋子种类为0
patten : [0, 0, 2, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2, 3, 10],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 14 rows and 14 columns.
MIP Presolve modified 141 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 33 rows, 37 columns, and 90 nonzeros.
Reduced MIP has 30 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.25 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.35 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.35 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.35 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 4, 5, 12]  放进袋子  1  袋子种类为0
patten : [1, 1, 2, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 1, 4, 5, 12],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_1,4':  0  = 1.
Presolve time = 0.01 sec. (0.86 ticks)

Root node processing (before b&c):
  Real time             =    0.01 sec. (0.88 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.01 sec. (0.88 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,1 + 1.0*s_1,1 + 1.0*s_4,1 + 1.0*s_5,1 + 1.0*s_12,1 - 4.0*n_1) <= 0.0无法将物品 [0, 1, 4, 5, 12]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [6, 9, 11]  放进袋子  2  袋子种类为0
patten : [0, 0, 1, 0, 0, 1, 0, 1, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[6, 9, 11],2
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 14 rows and 15 columns.
MIP Presolve modified 120 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 30 rows, 33 columns, and 106 nonzeros.
Reduced MIP has 26 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.32 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.43 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.43 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.43 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [7, 8]  放进袋子  3  袋子种类为0
patten : [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_7,3 + 1.0*s_8,3 - 1.0*n_3) <= 0.0无法将物品 [7, 8]  放进袋子 3 袋子种类为0
needToSolve=false needToAddCut=true
print s[i]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
将物品  [0, 2, 3, 9, 11]  放进袋子  0  袋子种类为0
patten : [1, 0, 2, 0, 0, 1, 0, 1, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 2, 3, 9, 11],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 14 rows and 17 columns.
MIP Presolve modified 316 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 100 rows, 100 columns, and 388 nonzeros.
Reduced MIP has 84 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.76 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.11 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.12 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.12 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 4, 5, 6, 12]  放进袋子  1  袋子种类为0
patten : [0, 1, 3, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 4, 5, 6, 12],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Row 'xi_0,4' infeasible, all entries at implied bounds.
Presolve time = 0.00 sec. (0.56 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.59 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.59 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,1 + 1.0*s_4,1 + 1.0*s_5,1 + 1.0*s_6,1 + 1.0*s_12,1 - 4.0*n_1) <= 0.0无法将物品 [1, 4, 5, 6, 12]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [7, 8, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 1, 1, 0, 1, 0, 0, 1]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_7,5 + 1.0*s_8,5 + 1.0*s_10,5 - 2.0*n_5) <= 0.0无法将物品 [7, 8, 10]  放进袋子 5 袋子种类为1
needToSolve=false needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 8, 9]  放进袋子  5  袋子种类为1
patten : [1, 1, 5, 0, 1, 1, 0, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 8, 9]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
20
——————————————————————————————————————————第3层——————————————————————————————————————
98
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
haha
Position{type=4, x=0, y=0, z=0, lx=210, ly=160, lz=100}
Position{type=1, x=0, y=160, z=0, lx=230, ly=80, lz=80}
Position{type=5, x=0, y=240, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=180, y=240, z=0, lx=50, ly=60, lz=40}
Position{type=2, x=210, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=20, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 0, 1, 0, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[7, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 80 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 77 rows, 79 columns, and 371 nonzeros.
Reduced MIP has 66 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.72 ticks)
Probing fixed 4 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.11 ticks)
Cover probing fixed 0 vars, tightened 13 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 4 columns.
MIP Presolve modified 50 coefficients.
Reduced MIP has 76 rows, 75 columns, and 356 nonzeros.
Reduced MIP has 62 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.32 ticks)
Probing fixed 2 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.10 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Clique table members: 126.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.22 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    15                      0.0000       29         
      0     0        0.0000    15                     Cuts: 5       35         
      0     0        0.0000    15                    Cuts: 10       45         
      0     0        0.0000    15                    Cuts: 11       53         
      0     2        0.0000     7                      0.0000       53         
Elapsed time = 0.03 sec. (7.57 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  1
Cover cuts applied:  21
Implied bound cuts applied:  24
Flow cuts applied:  4
Mixed integer rounding cuts applied:  5
Zero-half cuts applied:  1
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =    0.03 sec. (7.53 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.01 sec. (6.20 ticks)
  Sync time (average)   =    0.01 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.05 sec. (13.73 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 3.0*n_8) <= 0.0无法将物品 [7, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 6, 7, 11]  放进袋子  5  袋子种类为1
patten : [0, 1, 5, 1, 0, 0, 0, 1, 0, 1]
pattern good
排序前[1, 2, 3, 4, 5, 6, 7, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
184
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 7.0*n_5) <= 0.0无法将物品 [11, 7, 1, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 0, 0, 1, 1, 1, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[0, 8, 9, 10, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 105 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 116 rows, 118 columns, and 584 nonzeros.
Reduced MIP has 102 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.78 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.36 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.37 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.37 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 7, 11]  放进袋子  5  袋子种类为1
patten : [0, 1, 4, 1, 0, 0, 0, 1, 0, 1]
pattern good
排序前[1, 2, 3, 4, 5, 7, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 1, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
184
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 - 6.0*n_5) <= 0.0无法将物品 [11, 7, 1, 2, 3, 4, 5]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 6, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 1, 0, 1, 1, 1, 0, 1, 2]
pattern good
排序前[0, 6, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 9, 0, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
74
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 8, 9, 0, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 8, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 3, 0, 1, 1, 0, 1, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 8, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 8, 1, 9, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
13
——————————————————————————————————————————第3层——————————————————————————————————————
58
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_8,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 7.0*n_5) <= 0.0无法将物品 [11, 8, 1, 9, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [5, 6, 7, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 1, 0, 0, 1, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[5, 6, 7, 10, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 6 rows and 4 columns.
MIP Presolve modified 269 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 110 rows, 115 columns, and 467 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.70 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.12 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.13 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.13 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 8, 9, 11]  放进袋子  5  袋子种类为1
patten : [0, 1, 3, 0, 1, 1, 0, 1, 0, 1]
pattern good
排序前[1, 2, 3, 4, 8, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 8, 1, 9, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
13
——————————————————————————————————————————第3层——————————————————————————————————————
98
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_8,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 6.0*n_5) <= 0.0无法将物品 [11, 8, 1, 9, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 5, 6, 7, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 2, 1, 0, 0, 1, 0, 1, 2]
pattern good
排序前[0, 5, 6, 7, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 7, 0, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
120
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_7,8 + 1.0*s_0,8 + 1.0*s_5,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 7, 0, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 8, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 3, 0, 1, 0, 0, 1, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 8, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 8, 1, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
13
——————————————————————————————————————————第3层——————————————————————————————————————
184
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_8,5 + 1.0*s_1,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 6.0*n_5) <= 0.0无法将物品 [11, 8, 1, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [5, 6, 7, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 1, 0, 1, 1, 0, 1, 2]
pattern good
排序前[5, 6, 7, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 7, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
52
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_5,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 7, 9, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 8, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 1, 2, 0, 1, 1, 0, 1, 0, 1]
pattern good
排序前[0, 1, 2, 3, 8, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 8, 1, 9, 0, 2, 3]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
13
——————————————————————————————————————————第3层——————————————————————————————————————
58
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_8,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 - 6.0*n_5) <= 0.0无法将物品 [11, 8, 1, 9, 0, 2, 3]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [4, 5, 6, 7, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 3, 1, 0, 0, 1, 0, 1, 2]
pattern good
排序前[4, 5, 6, 7, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 7, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
120
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=200, ly=150, lz=150}
Position{type=8, x=0, y=0, z=150, lx=220, ly=280, lz=70}
Position{type=3, x=0, y=150, z=0, lx=200, ly=100, lz=140}
Position{type=2, x=200, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=10, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 8, 9, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 3, 0, 1, 1, 0, 1, 0, 1]
pattern good
排序前[0, 2, 3, 4, 8, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 8, 9, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
11
——————————————————————————————————————————第3层——————————————————————————————————————
157
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_8,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 6.0*n_5) <= 0.0无法将物品 [11, 8, 9, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 5, 6, 7, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 2, 1, 0, 0, 1, 0, 1, 2]
pattern good
排序前[1, 5, 6, 7, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 7, 1, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_5,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 7, 1, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 7, 9, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 3, 1, 0, 1, 1, 0, 0, 1]
pattern good
排序前[2, 3, 4, 7, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 7, 9, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
10
——————————————————————————————————————————第3层——————————————————————————————————————
206
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_7,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 5.0*n_5) <= 0.0无法将物品 [10, 7, 9, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 5, 6, 8, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 2, 0, 1, 0, 0, 1, 1, 2]
pattern good
排序前[0, 1, 5, 6, 8, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 1, 0, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
29
——————————————————————————————————————————第4层——————————————————————————————————————
406
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_0,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [12, 11, 8, 1, 0, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6, 9, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 5, 0, 0, 1, 1, 0, 0, 1]
pattern good
排序前[2, 3, 4, 5, 6, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
20
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=200, ly=150, lz=150}
Position{type=5, x=0, y=150, z=0, lx=180, ly=70, lz=100}
Position{type=2, x=180, y=150, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=150, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=180, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=180, y=170, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [0, 1, 7, 8, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 1, 1, 0, 0, 1, 1, 2]
pattern good
排序前[0, 1, 7, 8, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[12, 11, 8, 7, 1, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
223
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_0,8 - 5.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 1, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 9, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 0, 0, 1, 1, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
20
——————————————————————————————————————————第3层——————————————————————————————————————
344
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=200, ly=150, lz=150}
Position{type=5, x=0, y=150, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=0, y=150, z=100, lx=60, ly=50, lz=40}
Position{type=2, x=180, y=150, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=150, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=180, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=180, y=170, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 7, 8, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 1, 1, 0, 0, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 7, 8, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 120 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 114 rows, 115 columns, and 568 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.10 ticks)
Probing fixed 3 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.16 ticks)
Cover probing fixed 0 vars, tightened 13 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 3 columns.
MIP Presolve modified 45 coefficients.
Reduced MIP has 114 rows, 112 columns, and 556 nonzeros.
Reduced MIP has 96 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.51 ticks)
Probing time = 0.00 sec. (0.14 ticks)
Clique table members: 147.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.24 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    26                      0.0000       43         
      0     0        0.0000    26                     Cuts: 4       47         
      0     0        0.0000    26                    Cuts: 13       51         
      0     0        0.0000    26                     Cuts: 6       58         
      0     0        0.0000    26                     Cuts: 4       76         
      0     2        0.0000     8                      0.0000       76         
Elapsed time = 0.05 sec. (17.65 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  1
Clique cuts applied:  1
Cover cuts applied:  38
Implied bound cuts applied:  49
Flow cuts applied:  9
Mixed integer rounding cuts applied:  15
Zero-half cuts applied:  1
Gomory fractional cuts applied:  7

Root node processing (before b&c):
  Real time             =    0.03 sec. (17.60 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.17 sec. (67.38 ticks)
  Sync time (average)   =    0.05 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.20 sec. (84.98 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,8 + 1.0*s_7,8 + 1.0*s_8,8 + 1.0*s_11,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [1, 7, 8, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 6, 9, 10]  放进袋子  5  袋子种类为1
patten : [0, 1, 5, 0, 0, 1, 1, 0, 0, 1]
pattern good
排序前[1, 2, 3, 4, 5, 6, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
16
——————————————————————————————————————————第3层——————————————————————————————————————
132
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 7.0*n_5) <= 0.0无法将物品 [10, 1, 9, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 7, 8, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 0, 1, 1, 0, 0, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[0, 7, 8, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 139 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 114 rows, 115 columns, and 568 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.09 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.99 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (2.00 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (2.00 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0000000000000004, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 9, 10]  放进袋子  5  袋子种类为1
patten : [0, 1, 3, 0, 0, 1, 1, 0, 0, 1]
pattern good
排序前[1, 2, 3, 4, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 1, 9, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
16
——————————————————————————————————————————第3层——————————————————————————————————————
132
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 5.0*n_5) <= 0.0无法将物品 [10, 1, 9, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 5, 6, 7, 8, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 2, 1, 1, 0, 0, 1, 1, 2]
pattern good
排序前[0, 5, 6, 7, 8, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 7, 0, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
381
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_0,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 0, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 6, 10]  放进袋子  5  袋子种类为1
patten : [0, 1, 5, 0, 0, 0, 1, 0, 0, 1]
pattern good
排序前[1, 2, 3, 4, 5, 6, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_1,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 6.0*n_5) <= 0.0无法将物品 [10, 1, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 0, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[0, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[12, 11, 8, 7, 9, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
60
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_0,8 - 5.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 9, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6, 10, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 5, 0, 0, 0, 1, 1, 0, 1]
pattern good
排序前[2, 3, 4, 5, 6, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_11,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 6.0*n_5) <= 0.0无法将物品 [10, 11, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 7, 8, 9, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 1, 1, 1, 0, 0, 1, 2]
pattern good
排序前[0, 1, 7, 8, 9, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[12, 8, 7, 1, 9, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
78
——————————————————————————————————————————第4层——————————————————————————————————————
275
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=4, x=0, y=0, z=70, lx=210, ly=160, lz=100}
Position{type=3, x=0, y=160, z=70, lx=200, ly=140, lz=100}
Position{type=1, x=210, y=0, z=70, lx=80, ly=230, lz=80}
Position{type=5, x=0, y=220, z=0, lx=180, ly=100, lz=70}
Position{type=0, x=180, y=220, z=0, lx=60, ly=50, lz=40}
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 7, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 3, 1, 0, 0, 1, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 7, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 7, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
30
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_7,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 5.0*n_5) <= 0.0无法将物品 [10, 7, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 5, 6, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 2, 0, 1, 1, 0, 1, 1, 2]
pattern good
排序前[1, 5, 6, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 1, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
29
——————————————————————————————————————————第4层——————————————————————————————————————
190
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [12, 11, 8, 1, 9, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 7, 10]  放进袋子  5  袋子种类为1
patten : [0, 1, 3, 1, 0, 0, 1, 0, 0, 1]
pattern good
排序前[1, 2, 3, 4, 7, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 7, 1, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
30
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 5.0*n_5) <= 0.0无法将物品 [10, 7, 1, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 5, 6, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 2, 0, 1, 1, 0, 1, 1, 2]
pattern good
排序前[0, 5, 6, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 9, 0, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
35
——————————————————————————————————————————第4层——————————————————————————————————————
301
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [12, 11, 8, 9, 0, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 10]  放进袋子  5  袋子种类为1
patten : [1, 1, 3, 0, 0, 0, 1, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 1, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_1,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 5.0*n_5) <= 0.0无法将物品 [10, 1, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [5, 6, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[5, 6, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 7, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
60
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 9, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 8, 9, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 3, 0, 1, 1, 1, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 8, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 9, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
70
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 6.0*n_5) <= 0.0无法将物品 [10, 8, 9, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 5, 6, 7, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 2, 1, 0, 0, 0, 1, 1, 2]
pattern good
排序前[1, 5, 6, 7, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 7, 1, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
31
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=7, x=0, y=220, z=0, lx=250, ly=100, lz=160}
Position{type=3, x=0, y=0, z=70, lx=200, ly=140, lz=100}
Position{type=1, x=0, y=140, z=70, lx=230, ly=80, lz=80}
Position{type=2, x=250, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=260, y=220, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 8, 10]  放进袋子  5  袋子种类为1
patten : [0, 1, 3, 0, 1, 0, 1, 0, 0, 1]
pattern good
排序前[1, 2, 3, 4, 8, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 1, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_1,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 5.0*n_5) <= 0.0无法将物品 [10, 8, 1, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 5, 6, 7, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 2, 1, 0, 1, 0, 1, 1, 2]
pattern good
排序前[0, 5, 6, 7, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 7, 9, 0, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
31
——————————————————————————————————————————第4层——————————————————————————————————————
147
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=7, x=0, y=0, z=70, lx=250, ly=160, lz=100}
Position{type=3, x=0, y=160, z=70, lx=200, ly=140, lz=100}
Position{type=5, x=0, y=220, z=0, lx=180, ly=100, lz=70}
Position{type=0, x=180, y=220, z=0, lx=60, ly=50, lz=40}
Position{type=2, x=240, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=250, y=220, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 8, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 3, 0, 1, 0, 1, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 8, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 - 5.0*n_5) <= 0.0无法将物品 [10, 8, 0, 2, 3, 4]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 5, 6, 7, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 2, 1, 0, 1, 0, 1, 1, 2]
pattern good
排序前[1, 5, 6, 7, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 7, 1, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
31
——————————————————————————————————————————第4层——————————————————————————————————————
181
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=7, x=0, y=220, z=0, lx=250, ly=100, lz=160}
Position{type=3, x=0, y=0, z=70, lx=140, ly=200, lz=100}
Position{type=5, x=140, y=0, z=70, lx=100, ly=180, lz=70}
Position{type=2, x=250, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=0, z=70, lx=10, ly=10, lz=10}
Position{type=1, x=250, y=0, z=70, lx=80, ly=230, lz=80}
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 8, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 3, 0, 1, 0, 1, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[2, 3, 4, 8, 10],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 13 rows and 11 columns.
MIP Presolve modified 301 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 103 rows, 108 columns, and 393 nonzeros.
Reduced MIP has 92 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.61 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.05 ticks)

Root node processing (before b&c):
  Real time             =    0.01 sec. (1.05 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.01 sec. (1.05 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 5, 6, 7, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 2, 1, 0, 1, 0, 1, 1, 2]
pattern good
排序前[0, 1, 5, 6, 7, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 7, 1, 9, 0, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
31
——————————————————————————————————————————第4层——————————————————————————————————————
127
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=7, x=0, y=220, z=0, lx=250, ly=100, lz=160}
Position{type=3, x=0, y=0, z=70, lx=140, ly=200, lz=100}
Position{type=5, x=140, y=0, z=70, lx=100, ly=180, lz=70}
Position{type=0, x=140, y=180, z=70, lx=60, ly=40, lz=50}
Position{type=2, x=250, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=0, z=70, lx=10, ly=10, lz=10}
Position{type=1, x=250, y=0, z=70, lx=80, ly=230, lz=80}
needToSolve=true needToAddCut=false
*   194     1      integral     0        1.7000        1.7000     2404    0.00%

Clique cuts applied:  5
Cover cuts applied:  6
Implied bound cuts applied:  4
Flow cuts applied:  2
Mixed integer rounding cuts applied:  20
Zero-half cuts applied:  10
User cuts applied:  172

Root node processing (before b&c):
  Real time             =   11.02 sec. (55.40 ticks)
Sequential b&c:
  Real time             =   16.00 sec. (54.14 ticks)
                          ------------
Total (root+branch&cut) =   27.02 sec. (109.55 ticks)
!!Thread down
1.7
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
Total time =27.081s
——————————————————————————————————————————————————
