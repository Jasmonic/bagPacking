[5, 3, 2]
[Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}, Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}, Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}, Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}, Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}, Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}, Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}, Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}, Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}, Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}, Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}, Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}, Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}]
[Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=5}, Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=3}, Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=2}]
Instance{bagTypeCount=3, itemTypeCount=9, bagCount=10, itemCount=13}
[Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=5}, Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=3}, Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=2}]
3
0,1
1,2
2,7
7,8
8,9
9,10
10,11
11,12
12,13
IloModel  {
IloMinimize  : (0.4*n_0 + 0.4*n_1 + 0.4*n_2 + 0.4*n_3 + 0.4*n_4 + 0.7*n_5 + 0.7*n_6 + 0.7*n_7 + 1.0*n_8 + 1.0*n_9)
IloRange bag_and_box0 : 1.0 <= (1.0*s_0,0 + 1.0*s_0,1 + 1.0*s_0,2 + 1.0*s_0,3 + 1.0*s_0,4 + 1.0*s_0,5 + 1.0*s_0,6 + 1.0*s_0,7 + 1.0*s_0,8 + 1.0*s_0,9) <= 1.0
IloRange bag_and_box1 : 1.0 <= (1.0*s_1,0 + 1.0*s_1,1 + 1.0*s_1,2 + 1.0*s_1,3 + 1.0*s_1,4 + 1.0*s_1,5 + 1.0*s_1,6 + 1.0*s_1,7 + 1.0*s_1,8 + 1.0*s_1,9) <= 1.0
IloRange bag_and_box2 : 1.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 + 1.0*s_2,7 + 1.0*s_2,8 + 1.0*s_2,9) <= 1.0
IloRange bag_and_box3 : 1.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 + 1.0*s_3,7 + 1.0*s_3,8 + 1.0*s_3,9) <= 1.0
IloRange bag_and_box4 : 1.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 + 1.0*s_4,7 + 1.0*s_4,8 + 1.0*s_4,9) <= 1.0
IloRange bag_and_box5 : 1.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 + 1.0*s_5,7 + 1.0*s_5,8 + 1.0*s_5,9) <= 1.0
IloRange bag_and_box6 : 1.0 <= (1.0*s_6,0 + 1.0*s_6,1 + 1.0*s_6,2 + 1.0*s_6,3 + 1.0*s_6,4 + 1.0*s_6,5 + 1.0*s_6,6 + 1.0*s_6,7 + 1.0*s_6,8 + 1.0*s_6,9) <= 1.0
IloRange bag_and_box7 : 1.0 <= (1.0*s_7,0 + 1.0*s_7,1 + 1.0*s_7,2 + 1.0*s_7,3 + 1.0*s_7,4 + 1.0*s_7,5 + 1.0*s_7,6 + 1.0*s_7,7 + 1.0*s_7,8 + 1.0*s_7,9) <= 1.0
IloRange bag_and_box8 : 1.0 <= (1.0*s_8,0 + 1.0*s_8,1 + 1.0*s_8,2 + 1.0*s_8,3 + 1.0*s_8,4 + 1.0*s_8,5 + 1.0*s_8,6 + 1.0*s_8,7 + 1.0*s_8,8 + 1.0*s_8,9) <= 1.0
IloRange bag_and_box9 : 1.0 <= (1.0*s_9,0 + 1.0*s_9,1 + 1.0*s_9,2 + 1.0*s_9,3 + 1.0*s_9,4 + 1.0*s_9,5 + 1.0*s_9,6 + 1.0*s_9,7 + 1.0*s_9,8 + 1.0*s_9,9) <= 1.0
IloRange bag_and_box10 : 1.0 <= (1.0*s_10,0 + 1.0*s_10,1 + 1.0*s_10,2 + 1.0*s_10,3 + 1.0*s_10,4 + 1.0*s_10,5 + 1.0*s_10,6 + 1.0*s_10,7 + 1.0*s_10,8 + 1.0*s_10,9) <= 1.0
IloRange bag_and_box11 : 1.0 <= (1.0*s_11,0 + 1.0*s_11,1 + 1.0*s_11,2 + 1.0*s_11,3 + 1.0*s_11,4 + 1.0*s_11,5 + 1.0*s_11,6 + 1.0*s_11,7 + 1.0*s_11,8 + 1.0*s_11,9) <= 1.0
IloRange bag_and_box12 : 1.0 <= (1.0*s_12,0 + 1.0*s_12,1 + 1.0*s_12,2 + 1.0*s_12,3 + 1.0*s_12,4 + 1.0*s_12,5 + 1.0*s_12,6 + 1.0*s_12,7 + 1.0*s_12,8 + 1.0*s_12,9) <= 1.0
IloRange Volume_0 : -infinity <= (120000.0*s_0,0 + 1472000.0*s_1,0 + 1000.0*s_2,0 + 1000.0*s_3,0 + 1000.0*s_4,0 + 1000.0*s_5,0 + 1000.0*s_6,0 + 2800000.0*s_7,0 + 3360000.0*s_8,0 + 1260000.0*s_9,0 + 4500000.0*s_10,0 + 4000000.0*s_11,0 + 4312000.0*s_12,0 - 6305299.284992639*n_0) <= 0.0
IloRange Volume_1 : -infinity <= (120000.0*s_0,1 + 1472000.0*s_1,1 + 1000.0*s_2,1 + 1000.0*s_3,1 + 1000.0*s_4,1 + 1000.0*s_5,1 + 1000.0*s_6,1 + 2800000.0*s_7,1 + 3360000.0*s_8,1 + 1260000.0*s_9,1 + 4500000.0*s_10,1 + 4000000.0*s_11,1 + 4312000.0*s_12,1 - 6305299.284992639*n_1) <= 0.0
IloRange Volume_2 : -infinity <= (120000.0*s_0,2 + 1472000.0*s_1,2 + 1000.0*s_2,2 + 1000.0*s_3,2 + 1000.0*s_4,2 + 1000.0*s_5,2 + 1000.0*s_6,2 + 2800000.0*s_7,2 + 3360000.0*s_8,2 + 1260000.0*s_9,2 + 4500000.0*s_10,2 + 4000000.0*s_11,2 + 4312000.0*s_12,2 - 6305299.284992639*n_2) <= 0.0
IloRange Volume_3 : -infinity <= (120000.0*s_0,3 + 1472000.0*s_1,3 + 1000.0*s_2,3 + 1000.0*s_3,3 + 1000.0*s_4,3 + 1000.0*s_5,3 + 1000.0*s_6,3 + 2800000.0*s_7,3 + 3360000.0*s_8,3 + 1260000.0*s_9,3 + 4500000.0*s_10,3 + 4000000.0*s_11,3 + 4312000.0*s_12,3 - 6305299.284992639*n_3) <= 0.0
IloRange Volume_4 : -infinity <= (120000.0*s_0,4 + 1472000.0*s_1,4 + 1000.0*s_2,4 + 1000.0*s_3,4 + 1000.0*s_4,4 + 1000.0*s_5,4 + 1000.0*s_6,4 + 2800000.0*s_7,4 + 3360000.0*s_8,4 + 1260000.0*s_9,4 + 4500000.0*s_10,4 + 4000000.0*s_11,4 + 4312000.0*s_12,4 - 6305299.284992639*n_4) <= 0.0
IloRange Volume_5 : -infinity <= (120000.0*s_0,5 + 1472000.0*s_1,5 + 1000.0*s_2,5 + 1000.0*s_3,5 + 1000.0*s_4,5 + 1000.0*s_5,5 + 1000.0*s_6,5 + 2800000.0*s_7,5 + 3360000.0*s_8,5 + 1260000.0*s_9,5 + 4500000.0*s_10,5 + 4000000.0*s_11,5 + 4312000.0*s_12,5 - 1.1340839946075162E7*n_5) <= 0.0
IloRange Volume_6 : -infinity <= (120000.0*s_0,6 + 1472000.0*s_1,6 + 1000.0*s_2,6 + 1000.0*s_3,6 + 1000.0*s_4,6 + 1000.0*s_5,6 + 1000.0*s_6,6 + 2800000.0*s_7,6 + 3360000.0*s_8,6 + 1260000.0*s_9,6 + 4500000.0*s_10,6 + 4000000.0*s_11,6 + 4312000.0*s_12,6 - 1.1340839946075162E7*n_6) <= 0.0
IloRange Volume_7 : -infinity <= (120000.0*s_0,7 + 1472000.0*s_1,7 + 1000.0*s_2,7 + 1000.0*s_3,7 + 1000.0*s_4,7 + 1000.0*s_5,7 + 1000.0*s_6,7 + 2800000.0*s_7,7 + 3360000.0*s_8,7 + 1260000.0*s_9,7 + 4500000.0*s_10,7 + 4000000.0*s_11,7 + 4312000.0*s_12,7 - 1.1340839946075162E7*n_7) <= 0.0
IloRange Volume_8 : -infinity <= (120000.0*s_0,8 + 1472000.0*s_1,8 + 1000.0*s_2,8 + 1000.0*s_3,8 + 1000.0*s_4,8 + 1000.0*s_5,8 + 1000.0*s_6,8 + 2800000.0*s_7,8 + 3360000.0*s_8,8 + 1260000.0*s_9,8 + 4500000.0*s_10,8 + 4000000.0*s_11,8 + 4312000.0*s_12,8 - 1.9635004901018865E7*n_8) <= 0.0
IloRange Volume_9 : -infinity <= (120000.0*s_0,9 + 1472000.0*s_1,9 + 1000.0*s_2,9 + 1000.0*s_3,9 + 1000.0*s_4,9 + 1000.0*s_5,9 + 1000.0*s_6,9 + 2800000.0*s_7,9 + 3360000.0*s_8,9 + 1260000.0*s_9,9 + 4500000.0*s_10,9 + 4000000.0*s_11,9 + 4312000.0*s_12,9 - 1.9635004901018865E7*n_9) <= 0.0
IloRange boxCut2,0 : 0.0 <= (1.0*s_2,0 - 1.0*s_3,0) <= infinity
IloRange boxCut2,1 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 - 1.0*s_3,1) <= infinity
IloRange boxCut2,2 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 - 1.0*s_3,2) <= infinity
IloRange boxCut2,3 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 - 1.0*s_3,3) <= infinity
IloRange boxCut2,4 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 - 1.0*s_3,4) <= infinity
IloRange boxCut2,5 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 - 1.0*s_3,5) <= infinity
IloRange boxCut2,6 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 - 1.0*s_3,6) <= infinity
IloRange boxCut2,7 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 + 1.0*s_2,7 - 1.0*s_3,7) <= infinity
IloRange boxCut2,8 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 + 1.0*s_2,7 + 1.0*s_2,8 - 1.0*s_3,8) <= infinity
IloRange boxCut2,9 : 0.0 <= (1.0*s_2,0 + 1.0*s_2,1 + 1.0*s_2,2 + 1.0*s_2,3 + 1.0*s_2,4 + 1.0*s_2,5 + 1.0*s_2,6 + 1.0*s_2,7 + 1.0*s_2,8 + 1.0*s_2,9 - 1.0*s_3,9) <= infinity
IloRange boxCut3,0 : 0.0 <= (1.0*s_3,0 - 1.0*s_4,0) <= infinity
IloRange boxCut3,1 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 - 1.0*s_4,1) <= infinity
IloRange boxCut3,2 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 - 1.0*s_4,2) <= infinity
IloRange boxCut3,3 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 - 1.0*s_4,3) <= infinity
IloRange boxCut3,4 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 - 1.0*s_4,4) <= infinity
IloRange boxCut3,5 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 - 1.0*s_4,5) <= infinity
IloRange boxCut3,6 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 - 1.0*s_4,6) <= infinity
IloRange boxCut3,7 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 + 1.0*s_3,7 - 1.0*s_4,7) <= infinity
IloRange boxCut3,8 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 + 1.0*s_3,7 + 1.0*s_3,8 - 1.0*s_4,8) <= infinity
IloRange boxCut3,9 : 0.0 <= (1.0*s_3,0 + 1.0*s_3,1 + 1.0*s_3,2 + 1.0*s_3,3 + 1.0*s_3,4 + 1.0*s_3,5 + 1.0*s_3,6 + 1.0*s_3,7 + 1.0*s_3,8 + 1.0*s_3,9 - 1.0*s_4,9) <= infinity
IloRange boxCut4,0 : 0.0 <= (1.0*s_4,0 - 1.0*s_5,0) <= infinity
IloRange boxCut4,1 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 - 1.0*s_5,1) <= infinity
IloRange boxCut4,2 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 - 1.0*s_5,2) <= infinity
IloRange boxCut4,3 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 - 1.0*s_5,3) <= infinity
IloRange boxCut4,4 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 - 1.0*s_5,4) <= infinity
IloRange boxCut4,5 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 - 1.0*s_5,5) <= infinity
IloRange boxCut4,6 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 - 1.0*s_5,6) <= infinity
IloRange boxCut4,7 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 + 1.0*s_4,7 - 1.0*s_5,7) <= infinity
IloRange boxCut4,8 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 + 1.0*s_4,7 + 1.0*s_4,8 - 1.0*s_5,8) <= infinity
IloRange boxCut4,9 : 0.0 <= (1.0*s_4,0 + 1.0*s_4,1 + 1.0*s_4,2 + 1.0*s_4,3 + 1.0*s_4,4 + 1.0*s_4,5 + 1.0*s_4,6 + 1.0*s_4,7 + 1.0*s_4,8 + 1.0*s_4,9 - 1.0*s_5,9) <= infinity
IloRange boxCut5,0 : 0.0 <= (1.0*s_5,0 - 1.0*s_6,0) <= infinity
IloRange boxCut5,1 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 - 1.0*s_6,1) <= infinity
IloRange boxCut5,2 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 - 1.0*s_6,2) <= infinity
IloRange boxCut5,3 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 - 1.0*s_6,3) <= infinity
IloRange boxCut5,4 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 - 1.0*s_6,4) <= infinity
IloRange boxCut5,5 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 - 1.0*s_6,5) <= infinity
IloRange boxCut5,6 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 - 1.0*s_6,6) <= infinity
IloRange boxCut5,7 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 + 1.0*s_5,7 - 1.0*s_6,7) <= infinity
IloRange boxCut5,8 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 + 1.0*s_5,7 + 1.0*s_5,8 - 1.0*s_6,8) <= infinity
IloRange boxCut5,9 : 0.0 <= (1.0*s_5,0 + 1.0*s_5,1 + 1.0*s_5,2 + 1.0*s_5,3 + 1.0*s_5,4 + 1.0*s_5,5 + 1.0*s_5,6 + 1.0*s_5,7 + 1.0*s_5,8 + 1.0*s_5,9 - 1.0*s_6,9) <= infinity
IloRange bagCut_0,1 : 0.0 <= (1.0*n_0 - 1.0*n_1) <= infinity
IloRange bagCut_1,2 : 0.0 <= (1.0*n_1 - 1.0*n_2) <= infinity
IloRange bagCut_2,3 : 0.0 <= (1.0*n_2 - 1.0*n_3) <= infinity
IloRange bagCut_3,4 : 0.0 <= (1.0*n_3 - 1.0*n_4) <= infinity
IloRange bagCut_5,6 : 0.0 <= (1.0*n_5 - 1.0*n_6) <= infinity
IloRange bagCut_6,7 : 0.0 <= (1.0*n_6 - 1.0*n_7) <= infinity
IloRange bagCut_8,9 : 0.0 <= (1.0*n_8 - 1.0*n_9) <= infinity

}
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
CPXPARAM_Threads                                 1
!!Thread UP
Lazy constraint(s) or lazy constraint/branch callback is present.
    Disabling dual reductions (CPX_PARAM_REDUCE) in presolve.
    Disabling presolve reductions that prevent crushing forms.
Tried aggregator 1 time.
MIP Presolve eliminated 4 rows and 0 columns.
MIP Presolve modified 601 coefficients.
Reduced MIP has 66 rows, 140 columns, and 500 nonzeros.
Reduced MIP has 140 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.60 ticks)
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0]
print n
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
将物品  [1, 8]  放进袋子  2  袋子种类为0
patten : [0, 1, 0, 0, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 8],2
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 7 rows and 12 columns.
MIP Presolve modified 24 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 14 rows, 12 columns, and 42 nonzeros.
Reduced MIP has 8 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.21 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.25 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.25 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.25 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [2]  放进袋子  3  袋子种类为0
patten : [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2],3
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 1 time.
MIP Presolve eliminated 8 rows and 6 columns.
Reduced MIP has 6 rows, 9 columns, and 18 nonzeros.
Reduced MIP has 9 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.02 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.04 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.04 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.04 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [12]  放进袋子  4  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[12],4
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 1 time.
MIP Presolve eliminated 14 rows and 15 columns.
MIP Presolve modified 4 coefficients.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.01 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.02 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.02 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [3, 4, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 2, 0, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[3, 4, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 8 rows and 6 columns.
MIP Presolve modified 128 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 41 rows, 47 columns, and 138 nonzeros.
Reduced MIP has 38 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.23 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.37 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.38 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.38 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [5, 9]  放进袋子  7  袋子种类为1
patten : [0, 0, 1, 0, 0, 1, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[5, 9],7
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 0 columns.
MIP Presolve modified 48 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 25 rows, 31 columns, and 90 nonzeros.
Reduced MIP has 24 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.13 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.23 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.24 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.24 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 6, 7, 10]  放进袋子  9  袋子种类为2
patten : [1, 0, 1, 1, 0, 0, 1, 0, 0, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[0, 6, 7, 10],9
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve modified 105 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 81 rows, 85 columns, and 363 nonzeros.
Reduced MIP has 72 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.48 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.79 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.80 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.80 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
Found incumbent of value 6.100000 after 0.05 sec. (1.09 ticks)
Probing time = 0.00 sec. (0.34 ticks)
Tried aggregator 1 time.
Reduced MIP has 66 rows, 140 columns, and 500 nonzeros.
Reduced MIP has 140 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.23 ticks)
Probing time = 0.01 sec. (0.34 ticks)
Clique table members: 373.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: none, using 1 thread.
Root relaxation solution time = 0.00 sec. (0.27 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

*     0+    0                            6.1000        0.0000           100.00%
      0     0        1.1117     3        6.1000        1.1117       48   81.77%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [8]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[8],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 7 rows and 8 columns.
MIP Presolve modified 12 coefficients.
Aggregator did 7 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.05 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.05 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.05 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [7]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 1, 0, 0, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[7],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 1 time.
MIP Presolve eliminated 8 rows and 6 columns.
MIP Presolve modified 10 coefficients.
Reduced MIP has 6 rows, 9 columns, and 18 nonzeros.
Reduced MIP has 9 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.03 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.05 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.05 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.05 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 0, 1, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
308
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.1551     3        6.1000       Cuts: 6       68   81.06%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.822282534710907E-13, -0.0, 0.9999999999998178, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
将物品  [8]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0]
将物品  [1, 7]  放进袋子  6  袋子种类为1
patten : [0, 1, 0, 1, 0, 0, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1, 7],6
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 2 rows and 3 columns.
MIP Presolve modified 22 coefficients.
Aggregator did 7 substitutions.
Reduced MIP has 21 rows, 23 columns, and 82 nonzeros.
Reduced MIP has 16 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.22 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.29 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.30 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.30 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 5, 0, 1, 1, 1, 1, 1, 2]
pattern good
排序前[0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
74
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.1633     3        6.1000      Cuts: 18       86   80.93%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 1.0, -0.0, 1.0, 1.0]
将物品  [0, 2, 3, 4, 5, 6, 7]  放进袋子  6  袋子种类为1
patten : [1, 0, 5, 1, 0, 0, 0, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
96
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=3, x=0, y=0, z=0, lx=200, ly=140, lz=100}
Position{type=0, x=200, y=0, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=200, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=70, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [8, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 0, 0, 1, 1, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[8, 9, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 108 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 114 rows, 115 columns, and 568 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.10 ticks)
Probing fixed 4 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.16 ticks)
Cover probing fixed 0 vars, tightened 22 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 4 columns.
MIP Presolve modified 66 coefficients.
Reduced MIP has 113 rows, 111 columns, and 553 nonzeros.
Reduced MIP has 95 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.51 ticks)
Probing fixed 2 vars, tightened 4 bounds.
Probing time = 0.00 sec. (0.17 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Clique table members: 206.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.36 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    24                      0.0000       45         
      0     0        0.0000    24                     Cuts: 9       54         
      0     0        0.0000    24                    Cuts: 52       78         
      0     0        0.0000    24                     Cuts: 8       88         
      0     0        0.0000    24                    Cuts: 40      110         
      0     2        0.0000     8                      0.0000      110         
Elapsed time = 0.05 sec. (15.37 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  3
Clique cuts applied:  3
Cover cuts applied:  22
Implied bound cuts applied:  35
Flow cuts applied:  16
Mixed integer rounding cuts applied:  16
Zero-half cuts applied:  1
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =    0.05 sec. (15.30 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.03 sec. (10.20 ticks)
  Sync time (average)   =    0.02 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.08 sec. (25.50 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_8,8 + 1.0*s_9,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [8, 9, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
将物品  [1]  放进袋子  9  袋子种类为2
patten : [0, 1, 0, 0, 0, 0, 0, 0, 0, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1],9
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 1 time.
MIP Presolve eliminated 8 rows and 6 columns.
MIP Presolve modified 21 coefficients.
Reduced MIP has 6 rows, 9 columns, and 18 nonzeros.
Reduced MIP has 9 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.03 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.05 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.05 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.05 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]
将物品  [11]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 8 rows and 9 columns.
MIP Presolve modified 6 coefficients.
Aggregator did 6 substitutions.
All rows and columns eliminated.
Presolve time = 0.01 sec. (0.04 ticks)

Root node processing (before b&c):
  Real time             =    0.01 sec. (0.04 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.01 sec. (0.04 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 2, 3, 4, 5, 6, 7]  放进袋子  6  袋子种类为1
patten : [1, 0, 5, 1, 0, 0, 0, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
96
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=3, x=0, y=0, z=0, lx=200, ly=140, lz=100}
Position{type=0, x=200, y=0, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=200, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=70, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 8, 10]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 0, 1, 0, 1, 0, 0, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 8, 10],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve modified 18 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 51 rows, 55 columns, and 240 nonzeros.
Reduced MIP has 45 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.24 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.44 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.45 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.45 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [9, 12]  放进袋子  9  袋子种类为2
patten : [0, 0, 0, 0, 0, 1, 0, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[9, 12],9
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 20 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 26 rows, 28 columns, and 113 nonzeros.
Reduced MIP has 21 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.15 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.25 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.25 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.25 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
*     0+    0                            3.4000        1.1633            65.79%
      0     0        1.1667     3        3.4000      Cuts: 36      182   65.69%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
print n
[1.0, 1.0, 1.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0, 0.0]
将物品  [1, 9]  放进袋子  2  袋子种类为0
patten : [0, 1, 0, 0, 0, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 9],2
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 5 rows and 8 columns.
MIP Presolve modified 32 coefficients.
Aggregator did 10 substitutions.
Reduced MIP has 15 rows, 15 columns, and 58 nonzeros.
Reduced MIP has 11 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (0.22 ticks)
Found incumbent of value 0.000000 after 0.02 sec. (0.23 ticks)

Root node processing (before b&c):
  Real time             =    0.02 sec. (0.24 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.02 sec. (0.24 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 5, 1, 1, 0, 1, 1, 1, 2]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
112
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 7, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2163     3        3.4000      Cuts: 34      235   64.23%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 0.0, 1.0, -0.0]
将物品  [8]  放进袋子  6  袋子种类为1
patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[8],6
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 8 rows and 9 columns.
MIP Presolve modified 5 coefficients.
Aggregator did 6 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.03 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.04 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.04 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2186     3        3.4000       Cuts: 7      244   64.16%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -1.2490009027032135E-13, 1.2490009027032135E-13, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -0.0]
将物品  [8]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
44
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.65566348336369E-12, 0.0, 0.9999999999943443, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1311326966727379E-12, 0.0, 1.000000000001131, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1311326966727379E-12, 0.0, 1.000000000001131, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1311326966727379E-12, 0.0, 1.000000000001131, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1311326966727379E-12, 0.0, 1.000000000001131, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1311326966727379E-12, 0.0, 1.000000000001131, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [1, 8]  放进袋子  5  袋子种类为1
patten : [0, 1, 0, 0, 1, 0, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1, 8],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 4 rows and 6 columns.
MIP Presolve modified 29 coefficients.
Aggregator did 10 substitutions.
Reduced MIP has 16 rows, 17 columns, and 62 nonzeros.
Reduced MIP has 12 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.20 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.22 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.22 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.22 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 5, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
52
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2197     3        3.4000      Cuts: 11      295   64.13%
      0     0        1.2207     3        3.4000      Cuts: 29      333   64.10%
      0     0        1.2219     3        3.4000      Cuts: 19      390   64.06%
print s[i]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-3.21778080541618E-13, -0.0, 1.7739316717313087E-13, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0000000000001774, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-1.4438491336848713E-13, -0.0, 1.8863862687785615E-13, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 1.7739316717313087E-13, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0000000000001774, 0.0]
[-0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 1.7739316717313087E-13, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.9999999999998226, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
print n
[-1.4438491336848713E-13, 1.7739316717313087E-13, 1.7739316717313087E-13, -0.0, -0.0, 1.0, -0.0, 0.0, 1.0, 0.0]
将物品  [12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[12],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 9 rows and 10 columns.
MIP Presolve modified 4 coefficients.
Aggregator did 5 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.02 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.02 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.02 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [2, 3, 8]  放进袋子  1  袋子种类为0
patten : [0, 0, 2, 0, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2, 3, 8],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 8 rows and 6 columns.
MIP Presolve modified 135 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 41 rows, 47 columns, and 138 nonzeros.
Reduced MIP has 38 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.26 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.39 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.40 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.40 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1]  放进袋子  5  袋子种类为1
patten : [0, 1, 0, 0, 0, 0, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 9 rows and 10 columns.
MIP Presolve modified 13 coefficients.
Aggregator did 5 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.03 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.03 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.03 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 4, 5, 6, 7, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 3, 1, 0, 1, 1, 1, 1, 2]
pattern good
排序前[0, 4, 5, 6, 7, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 9, 0, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
52
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 9, 0, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2259     3        3.4000      Cuts: 24      457   63.95%
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 3.8182772161443927E-13, -0.0, -0.0, 1.0, -3.8182772161443927E-13]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -1.2490009027032324E-13, 1.2490009027032324E-13, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0]
print n
[1.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [12]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2345     3        3.4000      Cuts: 13      481   63.69%
print s[i]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -1.2490009027032324E-13, 1.2490009027032324E-13, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [2, 12]  放进袋子  0  袋子种类为0
patten : [0, 0, 1, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2, 12],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 1 time.
MIP Presolve eliminated 24 rows and 24 columns.
MIP Presolve modified 46 coefficients.
Reduced MIP has 6 rows, 9 columns, and 18 nonzeros.
Reduced MIP has 9 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.06 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.08 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.08 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.08 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 4, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2353     3        3.4000      Cuts: 17      497   63.67%
      0     0        1.2360     3        3.4000      Cuts: 21      525   63.65%
print s[i]
[-1.8792026690453964E-12, 1.8792026690453964E-12, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-1.4225732401388854E-13, 6.812819343971217E-13, -0.0, -0.0, -0.0, -0.0, -5.390246103832332E-13, -0.0, -0.0, 1.0]
[6.812819343971217E-13, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -6.812819343971217E-13]
[6.812819343971217E-13, 6.812819343971217E-13, 6.812819343971217E-13, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -2.043845803191365E-12]
[6.812819343971217E-13, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.000000000002044, -2.725127737588487E-12]
[6.812819343971217E-13, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999993188, -0.0]
[6.812819343971217E-13, 6.812819343971217E-13, 6.812819343971217E-13, -0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999979562, -0.0]
[1.2911873142289007E-13, -0.0, 8.552521426449602E-13, -0.0, -0.0, -6.922384389585378E-13, -2.921324351093124E-13, -0.0, 1.0, -0.0]
[-5.653017955652298E-13, -0.0, 5.653017955652298E-13, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0]
[1.2465837299623517E-12, 6.812819343971217E-13, -0.0, -0.0, -0.0, -1.4067488653766425E-12, -5.211167989828306E-13, -0.0, -0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 5.390246103832332E-13, -5.390246103832332E-13, -0.0, 0.0, 1.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 1.0]
print n
[6.812819343971217E-13, 6.812819343971217E-13, 6.812819343971217E-13, 0.0, 0.0, -5.390246103832332E-13, -5.390246103832332E-13, 0.0, 1.0, 1.0]
将物品  [0, 2, 3, 4, 5, 6, 7]  放进袋子  8  袋子种类为2
patten : [1, 0, 5, 1, 0, 0, 0, 0, 0, 2]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
104
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=3, x=0, y=0, z=0, lx=200, ly=140, lz=100}
Position{type=0, x=200, y=0, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=200, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=60, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=70, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 8, 9, 10, 11, 12]  放进袋子  9  袋子种类为2
patten : [0, 1, 0, 0, 1, 1, 1, 1, 1, 2]
pattern good
排序前[1, 8, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
排序后[10, 12, 11, 8, 1, 9]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
196
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,9 + 1.0*s_12,9 + 1.0*s_11,9 + 1.0*s_8,9 + 1.0*s_1,9 + 1.0*s_9,9 - 5.0*n_9) <= 0.0无法将物品 [10, 12, 11, 8, 1, 9]  放进袋子 9 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2444     3        3.4000      Cuts: 28      561   63.40%
print s[i]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, 1.0, -0.0]
将物品  [0]  放进袋子  0  袋子种类为0
patten : [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 1 time.
MIP Presolve eliminated 8 rows and 6 columns.
Reduced MIP has 6 rows, 9 columns, and 18 nonzeros.
Reduced MIP has 9 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.02 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.04 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.04 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.04 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 9]  放进袋子  5  袋子种类为1
patten : [0, 1, 0, 0, 0, 1, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1, 9],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 2 rows and 3 columns.
MIP Presolve modified 21 coefficients.
Aggregator did 7 substitutions.
Reduced MIP has 21 rows, 23 columns, and 82 nonzeros.
Reduced MIP has 16 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.22 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.29 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.30 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.30 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [2, 3, 4, 5, 6, 7, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 5, 1, 1, 0, 1, 1, 1, 2]
pattern good
排序前[2, 3, 4, 5, 6, 7, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 7, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
112
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 9.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 7, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [9]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[9],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 9 rows and 10 columns.
MIP Presolve modified 9 coefficients.
Aggregator did 5 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.03 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.03 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.03 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 11]  放进袋子  5  袋子种类为1
patten : [0, 1, 0, 0, 0, 0, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 4 rows and 6 columns.
MIP Presolve modified 28 coefficients.
Aggregator did 10 substitutions.
Reduced MIP has 16 rows, 17 columns, and 62 nonzeros.
Reduced MIP has 12 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.19 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.22 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.22 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.22 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 2, 3, 4, 5, 6, 7, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 5, 1, 1, 0, 1, 0, 1, 2]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
112
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 9.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2447     3        3.4000      Cuts: 15      577   63.39%
print s[i]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-2.78332912273497E-13, 0.0, 2.78332912273497E-13, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.871058401408014E-13, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -1.871058401408014E-13]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
print n
[-0.0, -0.0, 1.113331649093988E-13, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2453     3        3.4000      Cuts: 16      589   63.37%
print s[i]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[0.9999999999998251, -0.0, 0.0, -0.0, -0.0, -0.0, 1.7486012637844022E-13, -0.0, -0.0, -0.0]
[1.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0]
将物品  [0, 1, 2, 3, 8, 9]  放进袋子  0  袋子种类为0
patten : [1, 1, 2, 0, 1, 1, 0, 0, 0, 0]
pattern good
排序前[0, 1, 2, 3, 8, 9]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 1, 9, 0, 2, 3]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
4
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_8,0 + 1.0*s_1,0 + 1.0*s_9,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 - 5.0*n_0) <= 0.0无法将物品 [8, 1, 9, 0, 2, 3]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [4, 5, 6, 7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 3, 1, 0, 0, 1, 1, 1, 2]
pattern good
排序前[4, 5, 6, 7, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 7, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
120
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_7,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 12, 11, 7, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 8]  放进袋子  0  袋子种类为0
patten : [1, 1, 5, 0, 1, 0, 0, 0, 0, 0]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 8]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 1, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
26
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_8,0 + 1.0*s_1,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 + 1.0*s_6,0 - 7.0*n_0) <= 0.0无法将物品 [8, 1, 0, 2, 3, 4, 5, 6]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [9]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 1, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[9],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 1 time.
MIP Presolve eliminated 8 rows and 6 columns.
MIP Presolve modified 21 coefficients.
Reduced MIP has 6 rows, 9 columns, and 18 nonzeros.
Reduced MIP has 9 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.03 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.05 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.05 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.05 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [7, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 0, 1, 0, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[7, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 80 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 77 rows, 79 columns, and 371 nonzeros.
Reduced MIP has 66 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.72 ticks)
Probing fixed 4 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.11 ticks)
Cover probing fixed 0 vars, tightened 13 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 4 columns.
MIP Presolve modified 50 coefficients.
Reduced MIP has 76 rows, 75 columns, and 356 nonzeros.
Reduced MIP has 62 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.32 ticks)
Probing fixed 2 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.10 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Clique table members: 126.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.22 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    15                      0.0000       29         
      0     0        0.0000    15                     Cuts: 5       35         
      0     0        0.0000    15                    Cuts: 10       45         
      0     0        0.0000    15                    Cuts: 11       53         
      0     2        0.0000     7                      0.0000       53         
Elapsed time = 0.05 sec. (7.57 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  1
Cover cuts applied:  21
Implied bound cuts applied:  24
Flow cuts applied:  4
Mixed integer rounding cuts applied:  5
Zero-half cuts applied:  1
Gomory fractional cuts applied:  3

Root node processing (before b&c):
  Real time             =    0.03 sec. (7.53 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.19 sec. (6.20 ticks)
  Sync time (average)   =    0.14 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.22 sec. (13.73 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 3.0*n_8) <= 0.0无法将物品 [7, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2561     3        3.4000      Cuts: 27      631   63.06%
print s[i]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-5.402759492299527E-13, 0.0, -0.0, -0.0, -0.0, -4.663564497847752E-13, 1.006632399014728E-12, -0.0, 1.0, -0.0]
[-1.430049427304793E-12, 0.0, 0.0, -0.0, -0.0, -0.0, 1.430049427304793E-12, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.3426750450935714E-12, -0.0, -0.0, -0.0, -0.0, -1.3426750450935714E-12, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.9058841982463355E-12, -1.9058841982463355E-12, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 1.0]
print n
[0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
将物品  [12]  放进袋子  9  袋子种类为2
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[12],9
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 8 rows and 9 columns.
MIP Presolve modified 6 coefficients.
Aggregator did 6 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.04 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.04 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.04 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[10],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 9 rows and 10 columns.
MIP Presolve modified 5 coefficients.
Aggregator did 5 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.03 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.03 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.03 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 0, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
35
——————————————————————————————————————————第3层——————————————————————————————————————
150
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2672     3        3.4000      Cuts: 17      661   62.73%
print s[i]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 1.0, 1.0, 1.0, 0.0]
将物品  [11]  放进袋子  7  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 1]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 0, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
126
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2752     3        3.4000      Cuts: 27      696   62.49%
print s[i]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-9.46131365553913E-13, -4.717085177579273E-13, -0.0, -0.0, -0.0, -0.0, 1.4178398833118402E-12, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0000000000005975, -5.976300548605591E-13]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[3.514202214914534E-13, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.9999999999997012, -0.0]
[1.216454612855031E-13, -5.838040611939399E-13, 0.0, -0.0, -0.0, 4.621585999084367E-13, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 2.988150274302796E-13, -0.0, -0.0, -0.0, 0.9999999999997012, -0.0]
[-0.0, 5.838040611939399E-13, -0.0, -0.0, -0.0, -0.0, -5.838040611939399E-13, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 1.6334357247815717E-13, -4.621585999084367E-13, -0.0, 0.0, 1.0000000000002989, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 1.0]
print n
[0.0, 0.0, 0.0, 0.0, 1.6334357247815717E-13, 0.0, 0.0, 0.0, 1.0, 1.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
将物品  [12]  放进袋子  9  袋子种类为2
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 2]
pattern good
needToSolve=false needToAddCut=false
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [8, 12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 1, 0, 0, 0, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[8, 12],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 13 rows and 14 columns.
MIP Presolve modified 32 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 8 rows, 10 columns, and 28 nonzeros.
Reduced MIP has 8 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.13 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.18 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.18 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_8,5 + 1.0*s_12,5 - 1.0*n_5) <= 0.0无法将物品 [8, 12]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 9, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 0, 1, 0, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
47
——————————————————————————————————————————第3层——————————————————————————————————————
330
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=100, lz=160}
Position{type=3, x=250, y=0, z=0, lx=100, ly=200, lz=140}
Position{type=1, x=0, y=100, z=0, lx=230, ly=80, lz=80}
Position{type=5, x=0, y=100, z=80, lx=180, ly=100, lz=70}
Position{type=0, x=180, y=100, z=80, lx=60, ly=50, lz=40}
Position{type=2, x=230, y=100, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=100, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=110, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=110, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=120, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
      0     0        1.2834     3        3.4000      Cuts: 27      744   62.25%
print s[i]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -4.1514422449714194E-13, 4.1514422449714194E-13, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -1.9117737700145134E-13, -1.9117737700145131E-13, 3.823547540029027E-13, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -2.417295484413735E-13, -0.0, 2.417295484413735E-13, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -1.2086477422068674E-13, -1.2086477422068674E-13, -0.0, 4.939983258036602E-13, -2.5226877736228676E-13, 0.0, 1.0]
print n
[0.0, -0.0, 0.0, -1.2086477422068674E-13, -1.2086477422068674E-13, 0.0, 2.417295484413735E-13, 0.0, 1.0, 1.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
将物品  [12]  放进袋子  9  袋子种类为2
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 2]
pattern good
needToSolve=false needToAddCut=false
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [9, 10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[9, 10],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'c12':  0  = 1.
Presolve time = 0.00 sec. (0.12 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.12 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.12 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_9,0 + 1.0*s_10,0 - 1.0*n_0) <= 0.0无法将物品 [9, 10]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [7]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 1, 0, 0, 0, 0, 0, 1]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 8, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 0, 1, 0, 0, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 8, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 1, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
29
——————————————————————————————————————————第4层——————————————————————————————————————
406
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 9.0*n_8) <= 0.0无法将物品 [12, 11, 8, 1, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.2850     3        3.4000      Cuts: 31      772   62.21%
print s[i]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -1.5438709574876111E-12, 1.5438709574876111E-12, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -5.050173443159475E-13, -0.0, -0.0, -0.0, 5.050173443159475E-13, 0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0]
[0.0, 5.050173443159475E-13, 0.0, -0.0, -0.0, -0.0, -5.050173443159475E-13, -0.0, 0.0, 1.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 1.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
236
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
将物品  [12]  放进袋子  9  袋子种类为2
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 2]
pattern good
needToSolve=false needToAddCut=false
      0     0        1.2913     3        3.4000      Cuts: 14      830   62.02%
print s[i]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
[-0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
print n
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 0, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
126
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 11.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
将物品  [11]  放进袋子  9  袋子种类为2
patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[11],9
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 1 time.
MIP Presolve eliminated 8 rows and 6 columns.
MIP Presolve modified 12 coefficients.
Reduced MIP has 6 rows, 9 columns, and 18 nonzeros.
Reduced MIP has 9 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.03 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.05 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.05 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.05 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
      0     0        1.2971     3        3.4000      Cuts: 29      896   61.85%
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0, -0.0, 1.0, -0.0]
将物品  [2, 3, 7, 9]  放进袋子  5  袋子种类为1
patten : [0, 0, 2, 1, 0, 1, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[2, 3, 7, 9],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 6 rows and 3 columns.
MIP Presolve modified 156 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 75 rows, 82 columns, and 300 nonzeros.
Reduced MIP has 69 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.41 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.68 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.69 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.69 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 4, 5, 6, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 3, 0, 1, 0, 1, 1, 1, 2]
pattern good
排序前[0, 1, 4, 5, 6, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 1, 0, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_0,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 0, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.3009     3        3.4000      Cuts: 26      946   61.74%
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0, 0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -0.0]
print n
[0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6, 7, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 5, 1, 0, 0, 0, 1, 0, 1]
pattern good
排序前[2, 3, 4, 5, 6, 7, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
228
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=3, x=0, y=160, z=0, lx=200, ly=140, lz=100}
Position{type=2, x=200, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=160, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [0, 1, 8, 9, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 0, 1, 1, 1, 0, 1, 2]
pattern good
排序前[0, 1, 8, 9, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[10, 12, 8, 1, 9, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
308
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 8, 1, 9, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 2, 3, 4, 5, 6, 7, 11]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 1, 0, 0, 0, 1, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
106
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=3, x=0, y=160, z=0, lx=200, ly=140, lz=100}
Position{type=0, x=200, y=160, z=0, lx=50, ly=60, lz=40}
Position{type=2, x=200, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=230, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=220, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 8, 9, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 0, 1, 1, 0, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 8, 9, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 59 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 79 rows, 82 columns, and 385 nonzeros.
Reduced MIP has 69 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.51 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.84 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.84 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.84 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
*     0+    0                            2.1000        1.3009            38.05%
      0     0        1.3050     3        2.1000      Cuts: 20      990   37.85%
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0, 0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, 0.0, -0.0, 0.0, 1.0, -0.0, 0.0, 1.0, -0.0]
将物品  [0, 7, 9, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 0, 1, 0, 1, 1, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 7, 9, 10],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve modified 40 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 81 rows, 85 columns, and 399 nonzeros.
Reduced MIP has 72 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (0.40 ticks)
Found incumbent of value 0.000000 after 0.01 sec. (0.89 ticks)

Root node processing (before b&c):
  Real time             =    0.01 sec. (0.90 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.01 sec. (0.90 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 2, 3, 4, 5, 6, 8, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 5, 0, 1, 0, 0, 1, 1, 2]
pattern good
排序前[1, 2, 3, 4, 5, 6, 8, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
29
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [12, 11, 8, 1, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.3074     3        2.1000      Cuts: 59     1034   37.75%
      0     0        1.3116     3        2.1000      Cuts: 18     1064   37.54%
      0     0        1.3140     3        2.1000      Cuts: 26     1090   37.43%
print s[i]
[-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0]
[0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
print n
[0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 1.0, 0.0]
将物品  [2, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 1, 0, 0, 0, 1, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[2, 10],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 0 columns.
MIP Presolve modified 50 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 25 rows, 31 columns, and 90 nonzeros.
Reduced MIP has 24 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.13 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.23 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.24 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.24 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 4, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 7, 1, 9, 0, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
48
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 1, 9, 0, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.3194     3        2.1000      Cuts: 25     1120   37.17%
print s[i]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 1.0, -0.0]
将物品  [2, 7, 9, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 1, 1, 0, 1, 0, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[2, 7, 9, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 5 rows and 6 columns.
MIP Presolve modified 155 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 72 rows, 75 columns, and 306 nonzeros.
Reduced MIP has 62 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.61 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.91 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.91 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.91 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 3, 4, 5, 6, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 4, 0, 1, 0, 1, 0, 1, 2]
pattern good
排序前[0, 1, 3, 4, 5, 6, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 8, 1, 0, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_0,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 8, 1, 0, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 2, 7, 9]  放进袋子  5  袋子种类为1
patten : [1, 0, 1, 1, 0, 1, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 2, 7, 9],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve modified 104 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 81 rows, 85 columns, and 363 nonzeros.
Reduced MIP has 72 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.48 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.79 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.80 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.80 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 3, 4, 5, 6, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 4, 0, 1, 0, 1, 1, 1, 2]
pattern good
排序前[1, 3, 4, 5, 6, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 1, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     0        1.3200     3        2.1000      Cuts: 18     1165   37.14%
print s[i]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, 0.0, 1.0, 4.84652705974636E-13, -4.308024053107876E-13, -0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -0.0, 0.0, -0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
print n
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 9, 10]  放进袋子  5  袋子种类为1
patten : [1, 1, 5, 1, 0, 1, 1, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
10
——————————————————————————————————————————第3层——————————————————————————————————————
124
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_7,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 9.0*n_5) <= 0.0无法将物品 [10, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [8, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 0, 0, 1, 0, 0, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[8, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 52 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 47 rows, 49 columns, and 216 nonzeros.
Reduced MIP has 39 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.42 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.64 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.64 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.64 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
      0     0        1.3205     3        2.1000      Cuts: 15     1216   37.12%
print s[i]
[0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 1.0, -0.0, 0.0, 0.0, 0.0, -0.0]
将物品  [1, 2, 7]  放进袋子  0  袋子种类为0
patten : [0, 1, 1, 1, 0, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 2, 7],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 3 rows and 6 columns.
MIP Presolve modified 95 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 41 rows, 42 columns, and 146 nonzeros.
Reduced MIP has 32 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.43 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.57 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.57 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.57 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [3, 4, 5, 12]  放进袋子  1  袋子种类为0
patten : [0, 0, 3, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[3, 4, 5, 12],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 24 rows and 24 columns.
MIP Presolve modified 216 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 57 rows, 61 columns, and 159 nonzeros.
Reduced MIP has 51 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.27 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.44 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.44 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.44 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [6, 8, 9]  放进袋子  2  袋子种类为0
patten : [0, 0, 1, 0, 1, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[6, 8, 9],2
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 6 rows and 5 columns.
MIP Presolve modified 107 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 41 rows, 46 columns, and 159 nonzeros.
Reduced MIP has 36 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.28 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.43 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.44 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.44 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 10]  放进袋子  3  袋子种类为0
patten : [1, 0, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 10],3
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 11 rows and 11 columns.
MIP Presolve modified 39 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 10 rows, 13 columns, and 36 nonzeros.
Reduced MIP has 12 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.17 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.25 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.25 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,3 + 1.0*s_10,3 - 1.0*n_3) <= 0.0无法将物品 [0, 10]  放进袋子 3 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [11]  放进袋子  4  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[11],4
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 10 rows and 11 columns.
MIP Presolve modified 9 coefficients.
Aggregator did 4 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.03 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.03 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.03 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
      0     0        1.3210     3        2.1000      Cuts: 26     1242   37.09%
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, 0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
print n
[-0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -0.0]
将物品  [1, 10, 11]  放进袋子  5  袋子种类为1
patten : [0, 1, 0, 0, 0, 0, 1, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1, 10, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 6 times.
MIP Presolve eliminated 10 rows and 16 columns.
MIP Presolve modified 77 coefficients.
Aggregator did 16 substitutions.
Reduced MIP has 27 rows, 25 columns, and 106 nonzeros.
Reduced MIP has 18 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.01 sec. (0.53 ticks)

Root node processing (before b&c):
  Real time             =    0.01 sec. (0.74 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.01 sec. (0.74 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,5 + 1.0*s_10,5 + 1.0*s_11,5 - 2.0*n_5) <= 0.0无法将物品 [1, 10, 11]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 2, 3, 4, 5, 6, 7, 8, 9, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 5, 1, 1, 1, 0, 0, 1, 2]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 8, 9, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 8, 7, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
78
——————————————————————————————————————————第4层——————————————————————————————————————
376
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=4, x=0, y=0, z=70, lx=210, ly=160, lz=100}
Position{type=3, x=210, y=0, z=70, lx=140, ly=200, lz=100}
Position{type=5, x=0, y=160, z=70, lx=180, ly=70, lz=100}
Position{type=0, x=280, y=0, z=0, lx=60, ly=50, lz=40}
Position{type=2, x=340, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=340, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=340, y=20, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=340, y=30, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=340, y=40, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
print n
[-0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -0.0]
将物品  [11, 12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[11, 12],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 13 rows and 14 columns.
MIP Presolve modified 29 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 8 rows, 10 columns, and 28 nonzeros.
Reduced MIP has 8 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.13 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.18 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.18 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_11,5 + 1.0*s_12,5 - 1.0*n_5) <= 0.0无法将物品 [11, 12]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 1, 1, 1, 1, 0, 0, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
46
——————————————————————————————————————————第3层——————————————————————————————————————
202
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
——————————————————————————————————————————第10层——————————————————————————————————————
500
装不完，装了10
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 8, 7, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0000000000000002, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, 0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -0.0]
将物品  [0, 2, 3, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 2, 0, 0, 0, 1, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 2, 3, 10],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 3 columns.
MIP Presolve modified 152 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 78 rows, 82 columns, and 315 nonzeros.
Reduced MIP has 69 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.44 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.72 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.73 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.73 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 4, 5, 6, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 3, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[1, 4, 5, 6, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 7, 1, 9, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
48
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 8.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 1, 9, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -0.0]
将物品  [0, 2, 3, 7, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 2, 1, 0, 0, 1, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 2, 3, 7, 10],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 3 columns.
MIP Presolve modified 205 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 115 rows, 118 columns, and 498 nonzeros.
Reduced MIP has 102 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.68 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.30 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.31 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.31 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 4, 5, 6, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 3, 0, 1, 1, 0, 1, 1, 2]
pattern good
排序前[1, 4, 5, 6, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 8, 1, 9, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
29
——————————————————————————————————————————第4层——————————————————————————————————————
190
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 7.0*n_8) <= 0.0无法将物品 [12, 11, 8, 1, 9, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -0.0]
将物品  [0, 2, 3, 7, 8]  放进袋子  5  袋子种类为1
patten : [1, 0, 2, 1, 1, 0, 0, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 2, 3, 7, 8],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 4 columns.
MIP Presolve modified 257 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 113 rows, 115 columns, and 482 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.80 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.22 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.23 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.23 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 4, 5, 6, 9, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 3, 0, 0, 1, 1, 1, 1, 2]
pattern good
排序前[1, 4, 5, 6, 9, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 1, 9, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
84
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 7.0*n_8) <= 0.0无法将物品 [10, 12, 11, 1, 9, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0000000000000002, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
print n
[0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 1.0, -0.0]
将物品  [0, 2, 3, 8, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 2, 0, 1, 0, 1, 0, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 2, 3, 8, 10],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 3 rows and 4 columns.
MIP Presolve modified 259 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 113 rows, 115 columns, and 482 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.80 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (1.52 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.53 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.53 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 4, 5, 6, 7, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 3, 1, 0, 1, 0, 1, 1, 2]
pattern good
排序前[1, 4, 5, 6, 7, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 11, 7, 1, 9, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
31
——————————————————————————————————————————第4层——————————————————————————————————————
181
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=7, x=0, y=220, z=0, lx=250, ly=100, lz=160}
Position{type=3, x=0, y=0, z=70, lx=140, ly=200, lz=100}
Position{type=5, x=140, y=0, z=70, lx=100, ly=180, lz=70}
Position{type=2, x=250, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=260, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=0, z=70, lx=10, ly=10, lz=10}
Position{type=1, x=250, y=0, z=70, lx=80, ly=230, lz=80}
needToSolve=true needToAddCut=false
*     0+    0                            1.7000        1.3210            22.29%
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
将物品  [7, 9]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[7, 9],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 4 rows and 8 columns.
MIP Presolve modified 26 coefficients.
Aggregator did 8 substitutions.
Reduced MIP has 18 rows, 17 columns, and 72 nonzeros.
Reduced MIP has 13 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.20 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.24 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.24 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.24 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 5, 0, 1, 0, 1, 1, 1, 2]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 1, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
——————————————————————————————————————————第9层——————————————————————————————————————
500
装不完，装了9
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_0,8 + 1.0*s_2,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 10.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 0, 2, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
      0     2        1.3210    49        1.7000        1.3210     1242   22.29%
Elapsed time = 13.26 sec. (80.42 ticks, tree = 0.01 MB, solutions = 4)
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6, 7, 9]  放进袋子  0  袋子种类为0
patten : [0, 0, 5, 1, 0, 1, 0, 0, 0, 0]
pattern good
排序前[2, 3, 4, 5, 6, 7, 9]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
5
——————————————————————————————————————————第3层——————————————————————————————————————
138
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=3, x=0, y=0, z=0, lx=200, ly=140, lz=100}
Position{type=5, x=0, y=140, z=0, lx=180, ly=70, lz=100}
Position{type=2, x=180, y=140, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=140, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=180, y=150, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=150, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=180, y=160, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [0, 1, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 0, 1, 0, 1, 1, 1, 2]
pattern good
排序前[0, 1, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[10, 12, 11, 8, 1, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_0,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 4, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 2, 3, 4, 5, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=0, x=0, y=220, z=0, lx=60, ly=40, lz=50}
Position{type=2, x=60, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=70, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=80, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=90, y=220, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 1, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[1, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 9, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
336
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
12
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 9, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 4, 0, 0, 1, 0, 0, 1, 0]
pattern good
排序前[0, 2, 3, 4, 5, 9, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 9, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,0 + 1.0*s_9,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 - 6.0*n_0) <= 0.0无法将物品 [12, 9, 0, 2, 3, 4, 5]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [1, 6, 7, 8, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 1, 1, 1, 0, 1, 1, 0, 2]
pattern good
排序前[1, 6, 7, 8, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 1, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 12]  放进袋子  0  袋子种类为0
patten : [1, 1, 4, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 1, 2, 3, 4, 5, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 1, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,0 + 1.0*s_1,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 - 6.0*n_0) <= 0.0无法将物品 [12, 1, 0, 2, 3, 4, 5]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 0, 1, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 9, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
334
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=150, ly=150, lz=200}
Position{type=7, x=150, y=0, z=0, lx=160, ly=250, lz=100}
Position{type=4, x=150, y=0, z=100, lx=160, ly=210, lz=100}
Position{type=3, x=0, y=150, z=0, lx=140, ly=100, lz=200}
Position{type=2, x=150, y=210, z=100, lx=10, ly=10, lz=10}
Position{type=5, x=140, y=220, z=100, lx=180, ly=70, lz=100}
needToSolve=true needToAddCut=false
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 5, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=8, x=0, y=0, z=0, lx=280, ly=220, lz=70}
Position{type=0, x=0, y=220, z=0, lx=60, ly=40, lz=50}
Position{type=2, x=60, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=70, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=80, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=90, y=220, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=100, y=220, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[1, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
排序后[10, 11, 8, 7, 1, 9]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
84
——————————————————————————————————————————第5层——————————————————————————————————————
16
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 - 5.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 9]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 12]  放进袋子  0  袋子种类为0
patten : [0, 1, 4, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[1, 2, 3, 4, 5, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 1, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
18
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,0 + 1.0*s_1,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 - 5.0*n_0) <= 0.0无法将物品 [12, 1, 2, 3, 4, 5]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 0, 1, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[0, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 9, 0, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
234
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_0,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 9, 0, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 1, 2, 3, 4, 12]  放进袋子  0  袋子种类为0
patten : [1, 1, 3, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 1, 2, 3, 4, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 1, 0, 2, 3, 4]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,0 + 1.0*s_1,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 - 5.0*n_0) <= 0.0无法将物品 [12, 1, 0, 2, 3, 4]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [5, 6, 7, 8, 9, 10, 11]  放进袋子  8  袋子种类为2
patten : [0, 0, 2, 1, 1, 1, 1, 1, 0, 2]
pattern good
排序前[5, 6, 7, 8, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 8, 7, 9, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
334
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_5,8 + 1.0*s_6,8 - 6.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 9, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6, 9, 12]  放进袋子  0  袋子种类为0
patten : [0, 0, 5, 0, 0, 1, 0, 0, 1, 0]
pattern good
排序前[2, 3, 4, 5, 6, 9, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
18
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_12,0 + 1.0*s_9,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 + 1.0*s_6,0 - 6.0*n_0) <= 0.0无法将物品 [12, 9, 2, 3, 4, 5, 6]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 1, 7, 8, 10, 11]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 1, 1, 0, 1, 1, 0, 2]
pattern good
排序前[0, 1, 7, 8, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[10, 11, 8, 7, 1, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
54
——————————————————————————————————————————第4层——————————————————————————————————————
398
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_0,8 - 5.0*n_8) <= 0.0无法将物品 [10, 11, 8, 7, 1, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, 1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
将物品  [9, 12]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[9, 12],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Row 'yi_0,1' infeasible, all entries at implied bounds.
Presolve time = 0.00 sec. (0.04 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.05 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.05 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_9,0 + 1.0*s_12,0 - 1.0*n_0) <= 0.0无法将物品 [9, 12]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 1, 11]  放进袋子  1  袋子种类为0
patten : [1, 1, 0, 0, 0, 0, 0, 1, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 1, 11],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_1,2':  0  = 1.
Presolve time = 0.00 sec. (0.31 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.32 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.32 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,1 + 1.0*s_1,1 + 1.0*s_11,1 - 2.0*n_1) <= 0.0无法将物品 [0, 1, 11]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [2, 3, 4, 5, 6, 10]  放进袋子  2  袋子种类为0
patten : [0, 0, 5, 0, 0, 0, 1, 0, 0, 0]
pattern good
排序前[2, 3, 4, 5, 6, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
haha
Position{type=6, x=0, y=0, z=0, lx=200, ly=150, lz=150}
Position{type=2, x=200, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=20, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=30, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=40, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [7, 8]  放进袋子  3  袋子种类为0
patten : [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[7, 8],3
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 3 rows and 6 columns.
MIP Presolve modified 18 coefficients.
Aggregator did 7 substitutions.
Reduced MIP has 20 rows, 20 columns, and 85 nonzeros.
Reduced MIP has 15 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.16 ticks)
Probing fixed 8 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.02 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.32 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.32 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,3 + 1.0*s_8,3 - 1.0*n_3) <= 0.0无法将物品 [7, 8]  放进袋子 3 袋子种类为0
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999996, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0]
将物品  [2, 3, 4, 5, 6, 9, 10]  放进袋子  0  袋子种类为0
patten : [0, 0, 5, 0, 0, 1, 1, 0, 0, 0]
pattern good
排序前[2, 3, 4, 5, 6, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,0 + 1.0*s_9,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 + 1.0*s_6,0 - 6.0*n_0) <= 0.0无法将物品 [10, 9, 2, 3, 4, 5, 6]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 1, 7, 8, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 1, 1, 0, 0, 1, 1, 2]
pattern good
排序前[0, 1, 7, 8, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[12, 11, 8, 7, 1, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
223
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_0,8 - 5.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 1, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0]
将物品  [0, 2, 3, 4, 5, 6, 10]  放进袋子  0  袋子种类为0
patten : [1, 0, 5, 0, 0, 0, 1, 0, 0, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,0 + 1.0*s_0,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 + 1.0*s_6,0 - 6.0*n_0) <= 0.0无法将物品 [10, 0, 2, 3, 4, 5, 6]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [1, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[1, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
排序后[12, 11, 8, 7, 1, 9]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
48
——————————————————————————————————————————第5层——————————————————————————————————————
16
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_9,8 - 5.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 1, 9]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999998, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0]
将物品  [1, 2, 3, 4, 5, 6, 10]  放进袋子  0  袋子种类为0
patten : [0, 1, 5, 0, 0, 0, 1, 0, 0, 0]
pattern good
排序前[1, 2, 3, 4, 5, 6, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,0 + 1.0*s_1,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 + 1.0*s_6,0 - 6.0*n_0) <= 0.0无法将物品 [10, 1, 2, 3, 4, 5, 6]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 7, 8, 9, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 0, 1, 1, 1, 0, 1, 1, 2]
pattern good
排序前[0, 7, 8, 9, 11, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[12, 11, 8, 7, 9, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
4
——————————————————————————————————————————第2层——————————————————————————————————————
14
——————————————————————————————————————————第3层——————————————————————————————————————
27
——————————————————————————————————————————第4层——————————————————————————————————————
60
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_9,8 + 1.0*s_0,8 - 5.0*n_8) <= 0.0无法将物品 [12, 11, 8, 7, 9, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 1.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0]
将物品  [1, 12]  放进袋子  0  袋子种类为0
patten : [0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 12],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_0,1':  0  = 1.
Presolve time = 0.00 sec. (0.08 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.08 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.08 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,0 + 1.0*s_12,0 - 1.0*n_0) <= 0.0无法将物品 [1, 12]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [9, 11]  放进袋子  1  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[9, 11],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 23 rows and 27 columns.
MIP Presolve modified 57 coefficients.
Aggregator did 6 substitutions.
All rows and columns eliminated.
Presolve time = 0.00 sec. (0.11 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.11 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.11 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 2, 3, 4, 5, 6, 7, 8, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 1, 1, 0, 1, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 8, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 8.0*n_5) <= 0.0无法将物品 [10, 8, 7, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, 1.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
将物品  [11]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [1, 12]  放进袋子  1  袋子种类为0
patten : [0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_1,1 + 1.0*s_12,1 - 1.0*n_1) <= 0.0无法将物品 [1, 12]  放进袋子 1 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [0, 2, 3, 4, 5, 7, 8]  放进袋子  2  袋子种类为0
patten : [1, 0, 4, 1, 1, 0, 0, 0, 0, 0]
pattern good
排序前[0, 2, 3, 4, 5, 7, 8]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 7, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
30
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_8,2 + 1.0*s_7,2 + 1.0*s_0,2 + 1.0*s_2,2 + 1.0*s_3,2 + 1.0*s_4,2 + 1.0*s_5,2 - 6.0*n_2) <= 0.0无法将物品 [8, 7, 0, 2, 3, 4, 5]  放进袋子 2 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [6, 9, 10]  放进袋子  3  袋子种类为0
patten : [0, 0, 1, 0, 0, 1, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[6, 9, 10],3
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 10 rows and 11 columns.
MIP Presolve modified 111 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 34 rows, 37 columns, and 118 nonzeros.
Reduced MIP has 28 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.31 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.50 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.50 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_6,3 + 1.0*s_9,3 + 1.0*s_10,3 - 2.0*n_3) <= 0.0无法将物品 [6, 9, 10]  放进袋子 3 袋子种类为0
needToSolve=true needToAddCut=true
print s[i]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, 1.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
将物品  [9, 11]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 12]  放进袋子  1  袋子种类为0
patten : [1, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 12],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 15 rows and 15 columns.
MIP Presolve modified 42 coefficients.
Aggregator did 5 substitutions.
Reduced MIP has 10 rows, 13 columns, and 36 nonzeros.
Reduced MIP has 12 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.02 sec. (0.08 ticks)
Found incumbent of value 0.000000 after 0.02 sec. (0.13 ticks)

Root node processing (before b&c):
  Real time             =    0.02 sec. (0.13 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.02 sec. (0.13 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [2, 3, 4, 5, 7, 8]  放进袋子  2  袋子种类为0
patten : [0, 0, 4, 1, 1, 0, 0, 0, 0, 0]
pattern good
排序前[2, 3, 4, 5, 7, 8]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 7, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
42
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_8,2 + 1.0*s_7,2 + 1.0*s_2,2 + 1.0*s_3,2 + 1.0*s_4,2 + 1.0*s_5,2 - 5.0*n_2) <= 0.0无法将物品 [8, 7, 2, 3, 4, 5]  放进袋子 2 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [1, 6, 10]  放进袋子  3  袋子种类为0
patten : [0, 1, 1, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 6, 10],3
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Row 'width_0,3' infeasible, all entries at implied bounds.
Presolve time = 0.00 sec. (0.17 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.19 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.19 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,3 + 1.0*s_6,3 + 1.0*s_10,3 - 2.0*n_3) <= 0.0无法将物品 [1, 6, 10]  放进袋子 3 袋子种类为0
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 1.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, -0.0, 1.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
将物品  [11]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [7, 8]  放进袋子  1  袋子种类为0
patten : [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_7,1 + 1.0*s_8,1 - 1.0*n_1) <= 0.0无法将物品 [7, 8]  放进袋子 1 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [0, 1, 2, 3, 4, 5, 6, 12]  放进袋子  2  袋子种类为0
patten : [1, 1, 5, 0, 0, 0, 0, 0, 1, 0]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 1, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
2
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_12,2 + 1.0*s_1,2 + 1.0*s_0,2 + 1.0*s_2,2 + 1.0*s_3,2 + 1.0*s_4,2 + 1.0*s_5,2 + 1.0*s_6,2 - 7.0*n_2) <= 0.0无法将物品 [12, 1, 0, 2, 3, 4, 5, 6]  放进袋子 2 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [9, 10]  放进袋子  3  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 1, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_9,3 + 1.0*s_10,3 - 1.0*n_3) <= 0.0无法将物品 [9, 10]  放进袋子 3 袋子种类为0
needToSolve=false needToAddCut=true
print s[i]
[-0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0]
[0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, -0.0, 1.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
将物品  [9, 11]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 0, 1, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [2, 12]  放进袋子  1  袋子种类为0
patten : [0, 0, 1, 0, 0, 0, 0, 0, 1, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 3, 4, 5, 6, 7, 8]  放进袋子  2  袋子种类为0
patten : [1, 0, 4, 1, 1, 0, 0, 0, 0, 0]
pattern good
排序前[0, 3, 4, 5, 6, 7, 8]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 7, 0, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
30
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_8,2 + 1.0*s_7,2 + 1.0*s_0,2 + 1.0*s_3,2 + 1.0*s_4,2 + 1.0*s_5,2 + 1.0*s_6,2 - 6.0*n_2) <= 0.0无法将物品 [8, 7, 0, 3, 4, 5, 6]  放进袋子 2 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [1, 10]  放进袋子  3  袋子种类为0
patten : [0, 1, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 10],3
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Row 'width_0,3' infeasible, all entries at implied bounds.
Presolve time = 0.00 sec. (0.07 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.08 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.08 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,3 + 1.0*s_10,3 - 1.0*n_3) <= 0.0无法将物品 [1, 10]  放进袋子 3 袋子种类为0
needToSolve=true needToAddCut=true
print s[i]
[-0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0]
[0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 1.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, -0.0, 1.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
将物品  [1, 11]  放进袋子  0  袋子种类为0
patten : [0, 1, 0, 0, 0, 0, 0, 1, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 11],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_0,1':  0  = 1.
Presolve time = 0.00 sec. (0.10 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.10 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.10 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,0 + 1.0*s_11,0 - 1.0*n_0) <= 0.0无法将物品 [1, 11]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [2, 9, 12]  放进袋子  1  袋子种类为0
patten : [0, 0, 1, 0, 0, 1, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2, 9, 12],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_1,2':  0  = 1.
Presolve time = 0.00 sec. (0.12 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.13 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.13 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_2,1 + 1.0*s_9,1 + 1.0*s_12,1 - 2.0*n_1) <= 0.0无法将物品 [2, 9, 12]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 3, 4, 5, 7, 8]  放进袋子  2  袋子种类为0
patten : [1, 0, 3, 1, 1, 0, 0, 0, 0, 0]
pattern good
排序前[0, 3, 4, 5, 7, 8]
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[8, 7, 0, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
30
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_8,2 + 1.0*s_7,2 + 1.0*s_0,2 + 1.0*s_3,2 + 1.0*s_4,2 + 1.0*s_5,2 - 5.0*n_2) <= 0.0无法将物品 [8, 7, 0, 3, 4, 5]  放进袋子 2 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [6, 10]  放进袋子  3  袋子种类为0
patten : [0, 0, 1, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[6, 10],3
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 16 rows and 16 columns.
MIP Presolve modified 61 coefficients.
Aggregator did 8 substitutions.
Reduced MIP has 6 rows, 9 columns, and 18 nonzeros.
Reduced MIP has 9 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.13 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.15 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.15 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.15 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0]
[-0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0]
将物品  [7, 8]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_7,0 + 1.0*s_8,0 - 1.0*n_0) <= 0.0无法将物品 [7, 8]  放进袋子 0 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [0, 1, 10]  放进袋子  1  袋子种类为0
patten : [1, 1, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 1, 10],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Row 'width_1,1' infeasible, all entries at implied bounds.
Presolve time = 0.00 sec. (0.15 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.16 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.16 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,1 + 1.0*s_1,1 + 1.0*s_10,1 - 2.0*n_1) <= 0.0无法将物品 [0, 1, 10]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [2, 3, 4, 5, 12]  放进袋子  2  袋子种类为0
patten : [0, 0, 4, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[2, 3, 4, 5, 12],2
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 33 rows and 33 columns.
MIP Presolve modified 337 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 85 rows, 88 columns, and 240 nonzeros.
Reduced MIP has 75 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.40 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.65 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.66 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.66 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [6, 9, 11]  放进袋子  3  袋子种类为0
patten : [0, 0, 1, 0, 0, 1, 0, 1, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[6, 9, 11],3
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 14 rows and 15 columns.
MIP Presolve modified 120 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 30 rows, 33 columns, and 106 nonzeros.
Reduced MIP has 26 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.32 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.43 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.43 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.43 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0000000000000009, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0, 0.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 8, 9, 10]  放进袋子  5  袋子种类为1
patten : [1, 1, 5, 0, 1, 1, 1, 0, 0, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 8, 9, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
70
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 9.0*n_5) <= 0.0无法将物品 [10, 8, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [7, 11, 12]  放进袋子  6  袋子种类为1
patten : [0, 0, 0, 1, 0, 0, 0, 1, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[7, 11, 12],6
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 13 rows and 18 columns.
MIP Presolve modified 58 coefficients.
Aggregator did 11 substitutions.
Reduced MIP has 29 rows, 28 columns, and 127 nonzeros.
Reduced MIP has 21 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.39 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.57 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.57 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,6 + 1.0*s_11,6 + 1.0*s_12,6 - 2.0*n_6) <= 0.0无法将物品 [7, 11, 12]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 1.0, -0.0, 0.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -0.0]
将物品  [1, 2, 3, 4, 5, 6, 9, 10, 11]  放进袋子  5  袋子种类为1
patten : [0, 1, 5, 0, 0, 1, 1, 1, 0, 1]
pattern good
排序前[1, 2, 3, 4, 5, 6, 9, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 1, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
8
——————————————————————————————————————————第3层——————————————————————————————————————
192
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_11,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 8.0*n_5) <= 0.0无法将物品 [10, 11, 1, 9, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 7, 8, 12]  放进袋子  6  袋子种类为1
patten : [1, 0, 0, 1, 1, 0, 0, 0, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 7, 8, 12],6
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 13 rows and 17 columns.
MIP Presolve modified 131 coefficients.
Aggregator did 9 substitutions.
Reduced MIP has 61 rows, 61 columns, and 277 nonzeros.
Reduced MIP has 48 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.63 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.98 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.98 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,6 + 1.0*s_7,6 + 1.0*s_8,6 + 1.0*s_12,6 - 3.0*n_6) <= 0.0无法将物品 [0, 7, 8, 12]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 1.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0]
将物品  [12]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [0, 1, 8, 9]  放进袋子  1  袋子种类为0
patten : [1, 1, 0, 0, 1, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 1, 8, 9],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 5 times.
MIP Presolve eliminated 12 rows and 20 columns.
MIP Presolve modified 110 coefficients.
Aggregator did 16 substitutions.
Reduced MIP has 55 rows, 51 columns, and 242 nonzeros.
Reduced MIP has 40 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.78 ticks)
Probing fixed 19 vars, tightened 10 bounds.
Probing time = 0.00 sec. (0.05 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Tried aggregator 2 times.
MIP Presolve eliminated 35 rows and 30 columns.
MIP Presolve modified 75 coefficients.
Aggregator did 3 substitutions.
Reduced MIP has 17 rows, 18 columns, and 58 nonzeros.
Reduced MIP has 14 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.13 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.35 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.35 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,1 + 1.0*s_1,1 + 1.0*s_8,1 + 1.0*s_9,1 - 3.0*n_1) <= 0.0无法将物品 [0, 1, 8, 9]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [2, 3, 4, 5, 6, 7, 10, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 5, 1, 0, 0, 1, 1, 0, 1]
pattern good
排序前[2, 3, 4, 5, 6, 7, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 7, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_11,5 + 1.0*s_7,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 7.0*n_5) <= 0.0无法将物品 [10, 11, 7, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 1.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0]
将物品  [0, 2, 3, 12]  放进袋子  0  袋子种类为0
patten : [1, 0, 2, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 2, 3, 12],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 12 rows and 15 columns.
MIP Presolve modified 227 coefficients.
Aggregator did 2 substitutions.
Reduced MIP has 69 rows, 70 columns, and 249 nonzeros.
Reduced MIP has 57 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.34 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.57 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.58 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.58 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [1, 8, 9]  放进袋子  1  袋子种类为0
patten : [0, 1, 0, 0, 1, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 8, 9],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 22 rows and 26 columns.
MIP Presolve modified 69 coefficients.
Aggregator did 15 substitutions.
Reduced MIP has 16 rows, 16 columns, and 52 nonzeros.
Reduced MIP has 11 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.39 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.50 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.50 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,1 + 1.0*s_8,1 + 1.0*s_9,1 - 2.0*n_1) <= 0.0无法将物品 [1, 8, 9]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [4, 5, 6, 7, 10, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 3, 1, 0, 0, 1, 1, 0, 1]
pattern good
排序前[4, 5, 6, 7, 10, 11]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 11, 7, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_11,5 + 1.0*s_7,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 5.0*n_5) <= 0.0无法将物品 [10, 11, 7, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 7, 8, 12]  放进袋子  5  袋子种类为1
patten : [1, 0, 5, 1, 1, 0, 0, 0, 1, 1]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 8, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 8, 7, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
36
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
装不完，装了7
addCuts——IloRange  : -infinity <= (1.0*s_12,5 + 1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 8.0*n_5) <= 0.0无法将物品 [12, 8, 7, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 9, 10, 11]  放进袋子  6  袋子种类为1
patten : [0, 1, 0, 0, 0, 1, 1, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1, 9, 10, 11],6
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 6 times.
MIP Presolve eliminated 8 rows and 14 columns.
MIP Presolve modified 119 coefficients.
Aggregator did 15 substitutions.
Reduced MIP has 60 rows, 58 columns, and 256 nonzeros.
Reduced MIP has 45 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.99 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.44 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.44 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,6 + 1.0*s_9,6 + 1.0*s_10,6 + 1.0*s_11,6 - 3.0*n_6) <= 0.0无法将物品 [1, 9, 10, 11]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0]
将物品  [1, 2, 3, 8]  放进袋子  0  袋子种类为0
patten : [0, 1, 2, 0, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[1, 2, 3, 8],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 6 times.
MIP Presolve eliminated 39 rows and 32 columns.
MIP Presolve added 2 rows and 0 columns.
MIP Presolve modified 226 coefficients.
Aggregator did 14 substitutions.
Reduced MIP has 32 rows, 41 columns, and 96 nonzeros.
Reduced MIP has 33 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.70 ticks)
Found incumbent of value 0.000000 after 0.00 sec. (0.81 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.82 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.82 ticks)
子问题求解完毕
子问题状态=Optimal
needToSolve=true needToAddCut=false
将物品  [0, 4, 5, 9, 12]  放进袋子  1  袋子种类为0
patten : [1, 0, 2, 0, 0, 1, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 4, 5, 9, 12],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_3,4':  0  = 1.
Presolve time = 0.00 sec. (0.37 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.40 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.40 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,1 + 1.0*s_4,1 + 1.0*s_5,1 + 1.0*s_9,1 + 1.0*s_12,1 - 4.0*n_1) <= 0.0无法将物品 [0, 4, 5, 9, 12]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [6, 7, 10, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 1, 1, 0, 0, 1, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[6, 7, 10, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 5 times.
MIP Presolve eliminated 12 rows and 16 columns.
MIP Presolve modified 198 coefficients.
Aggregator did 12 substitutions.
Reduced MIP has 59 rows, 59 columns, and 230 nonzeros.
Reduced MIP has 47 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.90 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.40 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.40 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_6,5 + 1.0*s_7,5 + 1.0*s_10,5 + 1.0*s_11,5 - 3.0*n_5) <= 0.0无法将物品 [6, 7, 10, 11]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0]
将物品  [0, 1, 2, 3, 8]  放进袋子  0  袋子种类为0
patten : [1, 1, 2, 0, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 1, 2, 3, 8],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 5 times.
MIP Presolve eliminated 11 rows and 18 columns.
MIP Presolve modified 318 coefficients.
Aggregator did 12 substitutions.
Reduced MIP has 97 rows, 93 columns, and 363 nonzeros.
Reduced MIP has 77 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.18 ticks)
Probing fixed 17 vars, tightened 11 bounds.
Probing time = 0.00 sec. (0.06 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Tried aggregator 1 time.
MIP Presolve eliminated 47 rows and 39 columns.
MIP Presolve modified 75 coefficients.
Reduced MIP has 50 rows, 54 columns, and 183 nonzeros.
Reduced MIP has 41 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.18 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (3.94 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (3.94 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,0 + 1.0*s_1,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_8,0 - 4.0*n_0) <= 0.0无法将物品 [0, 1, 2, 3, 8]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [4, 5, 6, 9, 12]  放进袋子  1  袋子种类为0
patten : [0, 0, 3, 0, 0, 1, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[4, 5, 6, 9, 12],1
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_3,4':  0  = 1.
Presolve time = 0.00 sec. (0.32 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.34 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.34 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_4,1 + 1.0*s_5,1 + 1.0*s_6,1 + 1.0*s_9,1 + 1.0*s_12,1 - 4.0*n_1) <= 0.0无法将物品 [4, 5, 6, 9, 12]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [7, 10, 11]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 1, 0, 0, 1, 1, 0, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[7, 10, 11],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 6 times.
MIP Presolve eliminated 7 rows and 14 columns.
MIP Presolve modified 77 coefficients.
Aggregator did 12 substitutions.
Reduced MIP has 34 rows, 31 columns, and 142 nonzeros.
Reduced MIP has 22 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.59 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.95 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.95 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,5 + 1.0*s_10,5 + 1.0*s_11,5 - 2.0*n_5) <= 0.0无法将物品 [7, 10, 11]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0, 0.0, -0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
将物品  [9, 10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 1, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_9,0 + 1.0*s_10,0 - 1.0*n_0) <= 0.0无法将物品 [9, 10]  放进袋子 0 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [1, 2, 3, 4, 5, 6, 11]  放进袋子  1  袋子种类为0
patten : [0, 1, 5, 0, 0, 0, 0, 1, 0, 0]
pattern good
排序前[1, 2, 3, 4, 5, 6, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 1, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
18
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_11,1 + 1.0*s_1,1 + 1.0*s_2,1 + 1.0*s_3,1 + 1.0*s_4,1 + 1.0*s_5,1 + 1.0*s_6,1 - 6.0*n_1) <= 0.0无法将物品 [11, 1, 2, 3, 4, 5, 6]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 7, 8, 12]  放进袋子  5  袋子种类为1
patten : [1, 0, 0, 1, 1, 0, 0, 0, 1, 1]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_0,5 + 1.0*s_7,5 + 1.0*s_8,5 + 1.0*s_12,5 - 3.0*n_5) <= 0.0无法将物品 [0, 7, 8, 12]  放进袋子 5 袋子种类为1
needToSolve=false needToAddCut=true
print s[i]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0, 0.0, -0.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 1.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0]
[1.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[-0.0, 1.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, 0.0]
print n
[1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
将物品  [1, 10]  放进袋子  0  袋子种类为0
patten : [0, 1, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_1,0 + 1.0*s_10,0 - 1.0*n_0) <= 0.0无法将物品 [1, 10]  放进袋子 0 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [0, 2, 3, 4, 5, 6, 9, 11]  放进袋子  1  袋子种类为0
patten : [1, 0, 5, 0, 0, 1, 0, 1, 0, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
1
——————————————————————————————————————————第3层——————————————————————————————————————
6
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=5, x=0, y=160, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=180, y=160, z=0, lx=60, ly=50, lz=40}
Position{type=2, x=240, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=170, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=180, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=190, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=200, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [7, 8, 12]  放进袋子  5  袋子种类为1
patten : [0, 0, 0, 1, 1, 0, 0, 0, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[7, 8, 12],5
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 13 rows and 18 columns.
MIP Presolve modified 58 coefficients.
Aggregator did 11 substitutions.
Reduced MIP has 29 rows, 28 columns, and 127 nonzeros.
Reduced MIP has 21 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.39 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.57 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.57 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_7,5 + 1.0*s_8,5 + 1.0*s_12,5 - 2.0*n_5) <= 0.0无法将物品 [7, 8, 12]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0000000000000002, 0.0]
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [1, 2, 3, 4, 5, 7, 9]  放进袋子  0  袋子种类为0
patten : [0, 1, 4, 1, 0, 1, 0, 0, 0, 0]
pattern good
排序前[1, 2, 3, 4, 5, 7, 9]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 1, 9, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
6
——————————————————————————————————————————第3层——————————————————————————————————————
144
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_7,0 + 1.0*s_1,0 + 1.0*s_9,0 + 1.0*s_2,0 + 1.0*s_3,0 + 1.0*s_4,0 + 1.0*s_5,0 - 6.0*n_0) <= 0.0无法将物品 [7, 1, 9, 2, 3, 4, 5]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [0, 6, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [1, 0, 1, 0, 1, 0, 1, 1, 1, 2]
pattern good
排序前[0, 6, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 0, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
368
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_0,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 0, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0000000000000002, 0.0]
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 7, 9]  放进袋子  0  袋子种类为0
patten : [1, 0, 4, 1, 0, 1, 0, 0, 0, 0]
pattern good
排序前[0, 2, 3, 4, 5, 7, 9]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 9, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
5
——————————————————————————————————————————第3层——————————————————————————————————————
56
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=3, x=0, y=0, z=0, lx=200, ly=140, lz=100}
Position{type=5, x=0, y=140, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=180, y=140, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=200, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=10, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 6, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 1, 0, 1, 0, 1, 1, 1, 2]
pattern good
排序前[1, 6, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 1, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
68
——————————————————————————————————————————第4层——————————————————————————————————————
500
装不完，装了4
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_1,8 + 1.0*s_6,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 1, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0000000000000002, 0.0]
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 7, 9]  放进袋子  0  袋子种类为0
patten : [1, 0, 5, 1, 0, 1, 0, 0, 0, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6, 7, 9]
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[7, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
3
——————————————————————————————————————————第2层——————————————————————————————————————
5
——————————————————————————————————————————第3层——————————————————————————————————————
56
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=3, x=0, y=0, z=0, lx=200, ly=140, lz=100}
Position{type=5, x=0, y=140, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=180, y=140, z=0, lx=40, ly=60, lz=50}
Position{type=2, x=200, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=0, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=10, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=20, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 0, 1, 0, 1, 1, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 8, 10, 11, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 0 rows and 2 columns.
MIP Presolve modified 124 coefficients.
Aggregator did 6 substitutions.
Reduced MIP has 114 rows, 115 columns, and 568 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.10 ticks)
Probing fixed 5 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.17 ticks)
Cover probing fixed 0 vars, tightened 22 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 1 rows and 5 columns.
MIP Presolve modified 71 coefficients.
Reduced MIP has 113 rows, 110 columns, and 548 nonzeros.
Reduced MIP has 94 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.53 ticks)
Probing fixed 0 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.14 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Clique table members: 158.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.33 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    23                      0.0000       41         
      0     0        0.0000    23                     Cuts: 6       46         
      0     0        0.0000    23                    Cuts: 36       64         
      0     0        0.0000    23                    Cuts: 28       87         
      0     2        0.0000     9                      0.0000       87         
Elapsed time = 0.05 sec. (14.86 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  2
Clique cuts applied:  3
Cover cuts applied:  38
Implied bound cuts applied:  44
Flow cuts applied:  12
Mixed integer rounding cuts applied:  12
Zero-half cuts applied:  1
Gomory fractional cuts applied:  10

Root node processing (before b&c):
  Real time             =    0.05 sec. (14.79 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.05 sec. (22.19 ticks)
  Sync time (average)   =    0.02 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.09 sec. (36.98 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,8 + 1.0*s_8,8 + 1.0*s_10,8 + 1.0*s_11,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [1, 8, 10, 11, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, 0.0, -0.0]
[0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0]
将物品  [0, 1, 2, 3, 4, 5, 6, 8, 9, 12]  放进袋子  5  袋子种类为1
patten : [1, 1, 5, 0, 1, 1, 0, 0, 1, 1]
pattern good
排序前[0, 1, 2, 3, 4, 5, 6, 8, 9, 12]
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[12, 8, 1, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
2
——————————————————————————————————————————第2层——————————————————————————————————————
10
——————————————————————————————————————————第3层——————————————————————————————————————
100
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
——————————————————————————————————————————第8层——————————————————————————————————————
500
装不完，装了8
addCuts——IloRange  : -infinity <= (1.0*s_12,5 + 1.0*s_8,5 + 1.0*s_1,5 + 1.0*s_9,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 9.0*n_5) <= 0.0无法将物品 [12, 8, 1, 9, 0, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [7, 10, 11]  放进袋子  6  袋子种类为1
patten : [0, 0, 0, 1, 0, 0, 1, 1, 0, 1]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_7,6 + 1.0*s_10,6 + 1.0*s_11,6 - 2.0*n_6) <= 0.0无法将物品 [7, 10, 11]  放进袋子 6 袋子种类为1
needToSolve=false needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -0.0]
将物品  [0, 2, 3, 4, 5, 7, 8, 10]  放进袋子  5  袋子种类为1
patten : [1, 0, 4, 1, 1, 0, 1, 0, 0, 1]
pattern good
排序前[0, 2, 3, 4, 5, 7, 8, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 7, 0, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_0,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 - 7.0*n_5) <= 0.0无法将物品 [10, 8, 7, 0, 2, 3, 4, 5]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [1, 6, 9, 11, 12]  放进袋子  6  袋子种类为1
patten : [0, 1, 1, 0, 0, 1, 0, 1, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[1, 6, 9, 11, 12],6
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 12 rows and 20 columns.
MIP Presolve modified 274 coefficients.
Aggregator did 14 substitutions.
Reduced MIP has 94 rows, 89 columns, and 369 nonzeros.
Reduced MIP has 73 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.03 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.54 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.54 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,6 + 1.0*s_6,6 + 1.0*s_9,6 + 1.0*s_11,6 + 1.0*s_12,6 - 4.0*n_6) <= 0.0无法将物品 [1, 6, 9, 11, 12]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
print n
[0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, -0.0]
将物品  [2, 3, 4, 5, 6, 7, 8, 10]  放进袋子  5  袋子种类为1
patten : [0, 0, 5, 1, 1, 0, 1, 0, 0, 1]
pattern good
排序前[2, 3, 4, 5, 6, 7, 8, 10]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 8, 7, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
28
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,5 + 1.0*s_8,5 + 1.0*s_7,5 + 1.0*s_2,5 + 1.0*s_3,5 + 1.0*s_4,5 + 1.0*s_5,5 + 1.0*s_6,5 - 7.0*n_5) <= 0.0无法将物品 [10, 8, 7, 2, 3, 4, 5, 6]  放进袋子 5 袋子种类为1
needToSolve=true needToAddCut=true
将物品  [0, 1, 9, 11, 12]  放进袋子  6  袋子种类为1
patten : [1, 1, 0, 0, 0, 1, 0, 1, 1, 1]
pattern good
Bag{type=1, X=440.0, Y=410.0, l=0.0, w=0.0, h=0.0, maxVolume=1.1340839946075162E7, cost=0.7, num=1}
[0, 1, 9, 11, 12],6
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 12 rows and 19 columns.
MIP Presolve modified 205 coefficients.
Aggregator did 14 substitutions.
Reduced MIP has 94 rows, 90 columns, and 422 nonzeros.
Reduced MIP has 74 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.12 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.64 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.64 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,6 + 1.0*s_1,6 + 1.0*s_9,6 + 1.0*s_11,6 + 1.0*s_12,6 - 4.0*n_6) <= 0.0无法将物品 [0, 1, 9, 11, 12]  放进袋子 6 袋子种类为1
needToSolve=true needToAddCut=true
print s[i]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0000000000000002, 0.0]
[1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 1, 2, 7, 9]  放进袋子  0  袋子种类为0
patten : [1, 1, 1, 1, 0, 1, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 1, 2, 7, 9],0
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 4 times.
MIP Presolve eliminated 8 rows and 13 columns.
MIP Presolve modified 235 coefficients.
Aggregator did 11 substitutions.
Reduced MIP has 101 rows, 99 columns, and 436 nonzeros.
Reduced MIP has 83 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (1.15 ticks)
Probing fixed 5 vars, tightened 1 bounds.
Probing time = 0.00 sec. (0.13 ticks)
Cover probing fixed 0 vars, tightened 6 bounds.
Tried aggregator 2 times.
MIP Presolve eliminated 9 rows and 16 columns.
MIP Presolve modified 36 coefficients.
Aggregator did 1 substitutions.
Reduced MIP has 91 rows, 82 columns, and 382 nonzeros.
Reduced MIP has 66 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.43 ticks)
Probing fixed 1 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.12 ticks)
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 3 rows and 3 columns.
Reduced MIP has 88 rows, 79 columns, and 363 nonzeros.
Reduced MIP has 63 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.32 ticks)
Probing time = 0.00 sec. (0.10 ticks)
Clique table members: 135.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.13 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    24                      0.0000       25         
      0     0        0.0000    24                     Cuts: 9       30         
      0     0        0.0000    24                    Cuts: 12       44         
      0     0        0.0000    24                    Cuts: 24       57         
      0     0        cutoff                                         57         
Elapsed time = 0.03 sec. (9.65 ticks, tree = 0.01 MB, solutions = 0)

GUB cover cuts applied:  1
Clique cuts applied:  3
Cover cuts applied:  3
Implied bound cuts applied:  5
Mixed integer rounding cuts applied:  1

Root node processing (before b&c):
  Real time             =    0.03 sec. (9.65 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.03 sec. (9.65 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,0 + 1.0*s_1,0 + 1.0*s_2,0 + 1.0*s_7,0 + 1.0*s_9,0 - 4.0*n_0) <= 0.0无法将物品 [0, 1, 2, 7, 9]  放进袋子 0 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [3, 4, 5, 6, 8, 10, 11, 12]  放进袋子  8  袋子种类为2
patten : [0, 0, 4, 0, 1, 0, 1, 1, 1, 2]
pattern good
排序前[3, 4, 5, 6, 8, 10, 11, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[10, 12, 11, 8, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
装不完，装了6
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_11,8 + 1.0*s_8,8 + 1.0*s_3,8 + 1.0*s_4,8 + 1.0*s_5,8 + 1.0*s_6,8 - 7.0*n_8) <= 0.0无法将物品 [10, 12, 11, 8, 3, 4, 5, 6]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.9999999999999996, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [2, 3, 4, 5, 6, 9, 11]  放进袋子  0  袋子种类为0
patten : [0, 0, 5, 0, 0, 1, 0, 1, 0, 0]
pattern good
排序前[2, 3, 4, 5, 6, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
1
——————————————————————————————————————————第3层——————————————————————————————————————
12
——————————————————————————————————————————第4层——————————————————————————————————————
288
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=5, x=0, y=160, z=0, lx=180, ly=70, lz=100}
Position{type=2, x=180, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=160, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [0, 1, 7, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [1, 1, 0, 1, 1, 0, 1, 0, 1, 2]
pattern good
排序前[0, 1, 7, 8, 10, 12]
Item{type=6, id=10, p=200, q=150, r=150, num=1, volume=4500000}
Item{type=8, id=12, p=280, q=220, r=70, num=1, volume=4312000}
Item{type=4, id=8, p=210, q=100, r=160, num=1, volume=3360000}
Item{type=3, id=7, p=200, q=140, r=100, num=1, volume=2800000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
排序后[10, 12, 8, 7, 1, 0]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
6
——————————————————————————————————————————第2层——————————————————————————————————————
22
——————————————————————————————————————————第3层——————————————————————————————————————
36
——————————————————————————————————————————第4层——————————————————————————————————————
384
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_10,8 + 1.0*s_12,8 + 1.0*s_8,8 + 1.0*s_7,8 + 1.0*s_1,8 + 1.0*s_0,8 - 5.0*n_8) <= 0.0无法将物品 [10, 12, 8, 7, 1, 0]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
[-0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0]
[-0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[1.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
print n
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
将物品  [0, 2, 3, 4, 5, 6, 9, 11]  放进袋子  0  袋子种类为0
patten : [1, 0, 5, 0, 0, 1, 0, 1, 0, 0]
pattern good
排序前[0, 2, 3, 4, 5, 6, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=0, id=0, p=40, q=60, r=50, num=1, volume=120000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 9, 0, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
1
——————————————————————————————————————————第3层——————————————————————————————————————
6
——————————————————————————————————————————第4层——————————————————————————————————————
144
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
——————————————————————————————————————————第7层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=5, x=0, y=160, z=0, lx=180, ly=70, lz=100}
Position{type=0, x=180, y=160, z=0, lx=60, ly=50, lz=40}
Position{type=2, x=240, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=170, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=180, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=190, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=240, y=200, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [1, 7, 8, 10, 12]  放进袋子  8  袋子种类为2
patten : [0, 1, 0, 1, 1, 0, 1, 0, 1, 2]
pattern good
Bag{type=2, X=520.0, Y=500.0, l=0.0, w=0.0, h=0.0, maxVolume=1.9635004901018865E7, cost=1.0, num=1}
[1, 7, 8, 10, 12],8
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 2 times.
MIP Presolve eliminated 0 rows and 1 columns.
MIP Presolve modified 89 coefficients.
Aggregator did 4 substitutions.
Reduced MIP has 116 rows, 118 columns, and 584 nonzeros.
Reduced MIP has 102 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.78 ticks)
Probing fixed 3 vars, tightened 0 bounds.
Probing time = 0.00 sec. (0.15 ticks)
Cover probing fixed 0 vars, tightened 32 bounds.
Tried aggregator 1 time.
Detecting symmetries...
MIP Presolve eliminated 0 rows and 3 columns.
MIP Presolve modified 71 coefficients.
Reduced MIP has 116 rows, 115 columns, and 572 nonzeros.
Reduced MIP has 99 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.55 ticks)
Probing fixed 0 vars, tightened 4 bounds.
Probing time = 0.00 sec. (0.12 ticks)
Cover probing fixed 0 vars, tightened 8 bounds.
Clique table members: 97.
MIP emphasis: balance optimality and feasibility.
MIP search method: dynamic search.
Parallel mode: deterministic, using up to 8 threads.
Root relaxation solution time = 0.00 sec. (0.31 ticks)

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap

      0     0        0.0000    23                      0.0000       25         
      0     0        0.0000    23                     Cuts: 8       33         
      0     0        0.0000    23                    Cuts: 36       53         
      0     0        0.0000    23                    Cuts: 40       79         
      0     2        0.0000     6                      0.0000       79         
Elapsed time = 0.06 sec. (14.77 ticks, tree = 0.02 MB, solutions = 0)

GUB cover cuts applied:  6
Clique cuts applied:  15
Cover cuts applied:  56
Implied bound cuts applied:  42
Flow cuts applied:  9
Mixed integer rounding cuts applied:  22
Zero-half cuts applied:  2
Gomory fractional cuts applied:  15

Root node processing (before b&c):
  Real time             =    0.05 sec. (14.70 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.14 sec. (54.25 ticks)
  Sync time (average)   =    0.04 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.19 sec. (68.95 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_1,8 + 1.0*s_7,8 + 1.0*s_8,8 + 1.0*s_10,8 + 1.0*s_12,8 - 4.0*n_8) <= 0.0无法将物品 [1, 7, 8, 10, 12]  放进袋子 8 袋子种类为2
needToSolve=true needToAddCut=true
print s[i]
[1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, 1.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 1.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
将物品  [0, 10]  放进袋子  0  袋子种类为0
patten : [1, 0, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_0,0 + 1.0*s_10,0 - 1.0*n_0) <= 0.0无法将物品 [0, 10]  放进袋子 0 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [1, 2, 3, 4, 5, 11]  放进袋子  1  袋子种类为0
patten : [0, 1, 4, 0, 0, 0, 0, 1, 0, 0]
pattern good
排序前[1, 2, 3, 4, 5, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=1, id=1, p=230, q=80, r=80, num=1, volume=1472000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 1, 2, 3, 4, 5]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
18
——————————————————————————————————————————第3层——————————————————————————————————————
500
——————————————————————————————————————————第4层——————————————————————————————————————
500
——————————————————————————————————————————第5层——————————————————————————————————————
500
装不完，装了5
addCuts——IloRange  : -infinity <= (1.0*s_11,1 + 1.0*s_1,1 + 1.0*s_2,1 + 1.0*s_3,1 + 1.0*s_4,1 + 1.0*s_5,1 - 5.0*n_1) <= 0.0无法将物品 [11, 1, 2, 3, 4, 5]  放进袋子 1 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [6, 7, 8]  放进袋子  2  袋子种类为0
patten : [0, 0, 1, 1, 1, 0, 0, 0, 0, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[6, 7, 8],2
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Tried aggregator 3 times.
MIP Presolve eliminated 8 rows and 7 columns.
MIP Presolve modified 104 coefficients.
Aggregator did 8 substitutions.
Reduced MIP has 37 rows, 42 columns, and 146 nonzeros.
Reduced MIP has 35 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.32 ticks)
Probing fixed 8 vars, tightened 2 bounds.
Probing time = 0.00 sec. (0.04 ticks)
Cover probing fixed 0 vars, tightened 4 bounds.
Tried aggregator 2 times.
MIP Presolve eliminated 16 rows and 21 columns.
MIP Presolve modified 12 coefficients.
Aggregator did 1 substitutions.
Reduced MIP has 20 rows, 20 columns, and 69 nonzeros.
Reduced MIP has 13 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.10 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (1.69 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (1.69 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_6,2 + 1.0*s_7,2 + 1.0*s_8,2 - 2.0*n_2) <= 0.0无法将物品 [6, 7, 8]  放进袋子 2 袋子种类为0
needToSolve=true needToAddCut=true
将物品  [9, 12]  放进袋子  3  袋子种类为0
patten : [0, 0, 0, 0, 0, 1, 0, 0, 1, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_9,3 + 1.0*s_12,3 - 1.0*n_3) <= 0.0无法将物品 [9, 12]  放进袋子 3 袋子种类为0
needToSolve=false needToAddCut=true
print s[i]
[0.0, -0.0, -0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0]
[-0.0, -0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0]
[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
[0.0, 1.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
[0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0]
print n
[1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
将物品  [10]  放进袋子  0  袋子种类为0
patten : [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
pattern good
needToSolve=false needToAddCut=false
将物品  [2, 3, 4, 5, 6, 9, 11]  放进袋子  1  袋子种类为0
patten : [0, 0, 5, 0, 0, 1, 0, 1, 0, 0]
pattern good
排序前[2, 3, 4, 5, 6, 9, 11]
Item{type=7, id=11, p=250, q=100, r=160, num=1, volume=4000000}
Item{type=5, id=9, p=180, q=100, r=70, num=1, volume=1260000}
Item{type=2, id=2, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=3, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=4, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=5, p=10, q=10, r=10, num=1, volume=1000}
Item{type=2, id=6, p=10, q=10, r=10, num=1, volume=1000}
排序后[11, 9, 2, 3, 4, 5, 6]
——————————————————————————————————————————第0层——————————————————————————————————————
1
——————————————————————————————————————————第1层——————————————————————————————————————
1
——————————————————————————————————————————第2层——————————————————————————————————————
1
——————————————————————————————————————————第3层——————————————————————————————————————
12
——————————————————————————————————————————第4层——————————————————————————————————————
288
——————————————————————————————————————————第5层——————————————————————————————————————
500
——————————————————————————————————————————第6层——————————————————————————————————————
500
haha
Position{type=7, x=0, y=0, z=0, lx=250, ly=160, lz=100}
Position{type=5, x=0, y=160, z=0, lx=180, ly=70, lz=100}
Position{type=2, x=180, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=190, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=200, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=210, y=160, z=0, lx=10, ly=10, lz=10}
Position{type=2, x=220, y=160, z=0, lx=10, ly=10, lz=10}
needToSolve=true needToAddCut=false
将物品  [7, 8]  放进袋子  2  袋子种类为0
patten : [0, 0, 0, 1, 1, 0, 0, 0, 0, 0]
pattern good
addCuts——IloRange  : -infinity <= (1.0*s_7,2 + 1.0*s_8,2 - 1.0*n_2) <= 0.0无法将物品 [7, 8]  放进袋子 2 袋子种类为0
needToSolve=false needToAddCut=true
将物品  [0, 1, 12]  放进袋子  3  袋子种类为0
patten : [1, 1, 0, 0, 0, 0, 0, 0, 1, 0]
pattern good
Bag{type=0, X=370.0, Y=330.0, l=0.0, w=0.0, h=0.0, maxVolume=6305299.284992639, cost=0.4, num=1}
[0, 1, 12],3
子问题建模完毕
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de2ae
Infeasibility row 'position_1,2':  0  = 1.
Presolve time = 0.00 sec. (0.37 ticks)

Root node processing (before b&c):
  Real time             =    0.00 sec. (0.38 ticks)
Parallel b&c, 8 threads:
  Real time             =    0.00 sec. (0.00 ticks)
  Sync time (average)   =    0.00 sec.
  Wait time (average)   =    0.00 sec.
                          ------------
Total (root+branch&cut) =    0.00 sec. (0.38 ticks)
子问题求解完毕
子问题状态=Infeasible
addCuts——IloRange  : -infinity <= (1.0*s_0,3 + 1.0*s_1,3 + 1.0*s_12,3 - 2.0*n_3) <= 0.0无法将物品 [0, 1, 12]  放进袋子 3 袋子种类为0
needToSolve=true needToAddCut=true

Clique cuts applied:  10
Cover cuts applied:  10
Implied bound cuts applied:  6
Flow cuts applied:  3
Mixed integer rounding cuts applied:  25
Zero-half cuts applied:  11
User cuts applied:  86

Root node processing (before b&c):
  Real time             =   13.26 sec. (80.42 ticks)
Sequential b&c:
  Real time             =    3.81 sec. (47.95 ticks)
                          ------------
Total (root+branch&cut) =   17.08 sec. (128.37 ticks)
!!Thread down
1.7
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0]
[0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0000000000000002, 0.0]
[0.0, 0.0, -0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0]
[-0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, 0.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, 0.0]
[-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0]
Total time =17.143s
——————————————————————————————————————————————————
